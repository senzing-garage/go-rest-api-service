// Code generated by ogen, DO NOT EDIT.

package senzingrestapi

import (
	"bytes"
	"mime"
	"mime/multipart"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeAddDataSourcesRequest(
	req AddDataSourcesReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AddDataSourcesReqEmptyBody:
		// Empty body case.
		return nil
	case *AddDataSourcesReqApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *AddDataSourcesReqTextPlain:
		const contentType = "text/plain"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeAddRecordRequest(
	req AddRecordReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeAddRecordWithReturnedRecordIdRequest(
	req AddRecordWithReturnedRecordIdReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeAnalyzeBulkRecordsRequest(
	req AnalyzeBulkRecordsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AnalyzeBulkRecordsReqApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *AnalyzeBulkRecordsReqApplicationXJsonlines:
		const contentType = "application/x-jsonlines"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AnalyzeBulkRecordsReqMultipartFormData:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if val, ok := request.Body.Get(); ok {
				if err := val.WriteMultipart("body", w); err != nil {
					return errors.Wrap(err, "write \"body\"")
				}
			}
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	case *AnalyzeBulkRecordsReqTextCsv:
		const contentType = "text/csv"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AnalyzeBulkRecordsReqTextPlain:
		const contentType = "text/plain"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeLoadBulkRecordsRequest(
	req LoadBulkRecordsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *LoadBulkRecordsReqApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *LoadBulkRecordsReqApplicationXJsonlines:
		const contentType = "application/x-jsonlines"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *LoadBulkRecordsReqMultipartFormData:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if val, ok := request.Body.Get(); ok {
				if err := val.WriteMultipart("body", w); err != nil {
					return errors.Wrap(err, "write \"body\"")
				}
			}
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	case *LoadBulkRecordsReqTextCsv:
		const contentType = "text/csv"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *LoadBulkRecordsReqTextPlain:
		const contentType = "text/plain"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeSearchEntitiesByPostRequest(
	req SearchEntitiesByPostReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
