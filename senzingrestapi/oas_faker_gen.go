// Code generated by ogen, DO NOT EDIT.

package senzingrestapi

import (
	"fmt"
	"time"

	"github.com/go-faster/jx"
)

// SetFake set fake values.
func (s *AddDataSourcesApplicationJSONForbidden) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddDataSourcesApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AddDataSourcesApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddDataSourcesApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddDataSourcesReqApplicationJSON) SetFake() {
	var variant []SzDataSourceDescriptor

	{
		variant = nil
		for i := 0; i < 0; i++ {
			var elem SzDataSourceDescriptor
			{
				elem.SetFake()
			}
			variant = append(variant, elem)
		}
	}
	s.SetSzDataSourceDescriptorArray(variant)
}

// SetFake set fake values.
func (s *AddRecordApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordApplicationJSONForbidden) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordReq) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *AddRecordWithReturnedRecordIdApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordWithReturnedRecordIdApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordWithReturnedRecordIdApplicationJSONForbidden) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordWithReturnedRecordIdApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordWithReturnedRecordIdApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordWithReturnedRecordIdApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordWithReturnedRecordIdApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = AddRecordWithReturnedRecordIdApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AddRecordWithReturnedRecordIdReq) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *AnalyzeBulkRecordsReqApplicationJSON) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = AnalyzeBulkRecordsReqApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRecordApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = DeleteRecordApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRecordApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = DeleteRecordApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *FindEntityNetworkApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = FindEntityNetworkApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *FindEntityNetworkApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = FindEntityNetworkApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *FindEntityPathApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = FindEntityPathApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *FindEntityPathApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = FindEntityPathApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetAttributeTypeApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetAttributeTypeApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetAttributeTypeApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetAttributeTypeApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetEntityByEntityIdApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetEntityByEntityIdApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetEntityByEntityIdApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetEntityByEntityIdApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetEntityByRecordIdApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetEntityByRecordIdApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetEntityByRecordIdApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetEntityByRecordIdApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetRecordApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetRecordApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetRecordApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetRecordApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetVirtualEntityByRecordIdsApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetVirtualEntityByRecordIdsApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetVirtualEntityByRecordIdsApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = GetVirtualEntityByRecordIdsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *HowEntityByEntityIDApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = HowEntityByEntityIDApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *HowEntityByEntityIDApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = HowEntityByEntityIDApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *HowEntityByRecordIDApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = HowEntityByRecordIDApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *HowEntityByRecordIDApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = HowEntityByRecordIDApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *LoadBulkRecordsApplicationJSONForbidden) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = LoadBulkRecordsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *LoadBulkRecordsApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = LoadBulkRecordsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *LoadBulkRecordsReqApplicationJSON) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = LoadBulkRecordsReqApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt16) SetFake() {
	var elem int16
	{
		elem = int16(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt8) SetFake() {
	var elem int8
	{
		elem = int8(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNilBool) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt64Array) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilString) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzAttributeSearchResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzAttributeSearchResultFeatureScores) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzAttributeTypeResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzAttributeTypesResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzDataSourceResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzDataSourcesResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzDeleteRecordResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzDisclosedRelationArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzEntityNetworkResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzEntityPathResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzEntityResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzFeatureReferenceArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzHowEntityResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzHowMatchInfoFeatureScores) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzLicenseResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzLoadRecordResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzMetaTimings) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzRecordResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzReevaluateResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzResponseWithRawDataRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzVersionResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzVirtualEntityResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzWhyEntitiesResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzWhyEntityResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzWhyMatchInfoCandidateKeys) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzWhyMatchInfoFeatureScores) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSzWhyRecordsResponseRawData) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeClass) SetFake() {
	var elem SzAttributeClass
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeNecessity) SetFake() {
	var elem SzAttributeNecessity
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeSearchResponseData) SetFake() {
	var elem SzAttributeSearchResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeSearchResultFeatures) SetFake() {
	var elem SzAttributeSearchResultFeatures
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeSearchResultType) SetFake() {
	var elem SzAttributeSearchResultType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeType) SetFake() {
	var elem SzAttributeType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeTypeResponseData) SetFake() {
	var elem SzAttributeTypeResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzAttributeTypesResponseData) SetFake() {
	var elem SzAttributeTypesResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzBulkDataAnalysis) SetFake() {
	var elem SzBulkDataAnalysis
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzBulkDataStatus) SetFake() {
	var elem SzBulkDataStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzBulkLoadResult) SetFake() {
	var elem SzBulkLoadResult
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzDataSource) SetFake() {
	var elem SzDataSource
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzDataSourceResponseData) SetFake() {
	var elem SzDataSourceResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzDataSourcesResponseData) SetFake() {
	var elem SzDataSourcesResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzDataSourcesResponseDataDataSourceDetails) SetFake() {
	var elem SzDataSourcesResponseDataDataSourceDetails
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzDeleteRecordResponseData) SetFake() {
	var elem SzDeleteRecordResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityData) SetFake() {
	var elem SzEntityData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityFeatureStatistics) SetFake() {
	var elem SzEntityFeatureStatistics
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityNetworkData) SetFake() {
	var elem SzEntityNetworkData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityPath) SetFake() {
	var elem SzEntityPath
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityPathData) SetFake() {
	var elem SzEntityPathData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityRecord) SetFake() {
	var elem SzEntityRecord
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzEntityRecordOriginalSourceData) SetFake() {
	var elem SzEntityRecordOriginalSourceData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzError) SetFake() {
	var elem SzError
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzHowEntityResult) SetFake() {
	var elem SzHowEntityResult
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzHowEntityResultResolutionSteps) SetFake() {
	var elem SzHowEntityResultResolutionSteps
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzHowMatchInfo) SetFake() {
	var elem SzHowMatchInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzHttpMethod) SetFake() {
	var elem SzHttpMethod
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzLicenseInfo) SetFake() {
	var elem SzLicenseInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzLicenseResponseData) SetFake() {
	var elem SzLicenseResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzLinks) SetFake() {
	var elem SzLinks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzLoadRecordResponseData) SetFake() {
	var elem SzLoadRecordResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzMatchLevel) SetFake() {
	var elem SzMatchLevel
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzMatchedRecordOriginalSourceData) SetFake() {
	var elem SzMatchedRecordOriginalSourceData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzMeta) SetFake() {
	var elem SzMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzNameScoring) SetFake() {
	var elem SzNameScoring
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzRecordResponseData) SetFake() {
	var elem SzRecordResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzReevaluateResponseData) SetFake() {
	var elem SzReevaluateResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzRelatedEntityFeatures) SetFake() {
	var elem SzRelatedEntityFeatures
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzRelationDirection) SetFake() {
	var elem SzRelationDirection
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzRelationshipType) SetFake() {
	var elem SzRelationshipType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzResolutionInfo) SetFake() {
	var elem SzResolutionInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzResolvedEntity) SetFake() {
	var elem SzResolvedEntity
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzResolvedEntityFeatures) SetFake() {
	var elem SzResolvedEntityFeatures
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzScoredFeature) SetFake() {
	var elem SzScoredFeature
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzScoringBehavior) SetFake() {
	var elem SzScoringBehavior
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzScoringBucket) SetFake() {
	var elem SzScoringBucket
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzScoringFrequency) SetFake() {
	var elem SzScoringFrequency
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzServerInfo) SetFake() {
	var elem SzServerInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzVersionInfo) SetFake() {
	var elem SzVersionInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzVirtualEntity) SetFake() {
	var elem SzVirtualEntity
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzVirtualEntityData) SetFake() {
	var elem SzVirtualEntityData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyEntitiesResponseData) SetFake() {
	var elem SzWhyEntitiesResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyEntitiesResult) SetFake() {
	var elem SzWhyEntitiesResult
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyEntityResponseData) SetFake() {
	var elem SzWhyEntityResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyMatchInfo) SetFake() {
	var elem SzWhyMatchInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyRecordsResponseData) SetFake() {
	var elem SzWhyRecordsResponseData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSzWhyRecordsResult) SetFake() {
	var elem SzWhyRecordsResult
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *ReevaluateEntityApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = ReevaluateEntityApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ReevaluateEntityApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = ReevaluateEntityApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReevaluateRecordApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = ReevaluateRecordApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ReevaluateRecordApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = ReevaluateRecordApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *SearchEntitiesByGetApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = SearchEntitiesByGetApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *SearchEntitiesByGetApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = SearchEntitiesByGetApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *SearchEntitiesByPostApplicationJSONBadRequest) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = SearchEntitiesByPostApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *SearchEntitiesByPostApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = SearchEntitiesByPostApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *SearchEntitiesByPostReq) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzAttributeClass) SetFake() {
	*s = SzAttributeClassADDRESS
}

// SetFake set fake values.
func (s *SzAttributeNecessity) SetFake() {
	*s = SzAttributeNecessityREQUIRED
}

// SetFake set fake values.
func (s *SzAttributeSearchResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResponseData) SetFake() {
	{
		{
			s.SearchResults = nil
			for i := 0; i < 0; i++ {
				var elem SzAttributeSearchResult
				{
					elem.SetFake()
				}
				s.SearchResults = append(s.SearchResults, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResult) SetFake() {
	{
		{
			s.EntityId.SetFake()
		}
	}
	{
		{
			s.EntityName.SetFake()
		}
	}
	{
		{
			s.BestName.SetFake()
		}
	}
	{
		{
			s.RecordSummaries = nil
			for i := 0; i < 0; i++ {
				var elem SzDataSourceRecordSummary
				{
					elem.SetFake()
				}
				s.RecordSummaries = append(s.RecordSummaries, elem)
			}
		}
	}
	{
		{
			s.NameData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NameData = append(s.NameData, elem)
			}
		}
	}
	{
		{
			s.CharacteristicData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.CharacteristicData = append(s.CharacteristicData, elem)
			}
		}
	}
	{
		{
			s.AddressData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddressData = append(s.AddressData, elem)
			}
		}
	}
	{
		{
			s.PhoneData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PhoneData = append(s.PhoneData, elem)
			}
		}
	}
	{
		{
			s.IdentifierData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.IdentifierData = append(s.IdentifierData, elem)
			}
		}
	}
	{
		{
			s.RelationshipData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RelationshipData = append(s.RelationshipData, elem)
			}
		}
	}
	{
		{
			s.OtherData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OtherData = append(s.OtherData, elem)
			}
		}
	}
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem SzMatchedRecord
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
	{
		{
			s.Features.SetFake()
		}
	}
	{
		{
			s.Partial.SetFake()
		}
	}
	{
		{
			s.LastSeenTimestamp.SetFake()
		}
	}
	{
		{
			s.MatchLevel.SetFake()
		}
	}
	{
		{
			s.MatchKey.SetFake()
		}
	}
	{
		{
			s.ResolutionRuleCode.SetFake()
		}
	}
	{
		{
			s.ResultType.SetFake()
		}
	}
	{
		{
			s.BestNameScore.SetFake()
		}
	}
	{
		{
			s.FeatureScores.SetFake()
		}
	}
	{
		{
			s.RelatedEntities = nil
			for i := 0; i < 0; i++ {
				var elem SzRelatedEntity
				{
					elem.SetFake()
				}
				s.RelatedEntities = append(s.RelatedEntities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResultFeatureScores) SetFake() {
	var (
		elem []SzSearchFeatureScore
		m    map[string][]SzSearchFeatureScore = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResultFeatures) SetFake() {
	var (
		elem []SzEntityFeature
		m    map[string][]SzEntityFeature = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzAttributeSearchResultType) SetFake() {
	*s = SzAttributeSearchResultTypeMATCH
}

// SetFake set fake values.
func (s *SzAttributeType) SetFake() {
	{
		{
			s.AttributeCode.SetFake()
		}
	}
	{
		{
			s.DefaultValue.SetFake()
		}
	}
	{
		{
			s.Necessity.SetFake()
		}
	}
	{
		{
			s.AttributeClass.SetFake()
		}
	}
	{
		{
			s.FeatureType.SetFake()
		}
	}
	{
		{
			s.Advanced.SetFake()
		}
	}
	{
		{
			s.Internal.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeTypeResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeTypeResponseData) SetFake() {
	{
		{
			s.AttributeType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeTypeResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzAttributeTypesResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeTypesResponseData) SetFake() {
	{
		{
			s.AttributeTypes = nil
			for i := 0; i < 0; i++ {
				var elem SzAttributeType
				{
					elem.SetFake()
				}
				s.AttributeTypes = append(s.AttributeTypes, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzAttributeTypesResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzBaseResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzBulkDataAnalysis) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.CharacterEncoding.SetFake()
		}
	}
	{
		{
			s.MediaType.SetFake()
		}
	}
	{
		{
			s.RecordCount.SetFake()
		}
	}
	{
		{
			s.RecordsWithRecordIdCount.SetFake()
		}
	}
	{
		{
			s.RecordsWithDataSourceCount.SetFake()
		}
	}
	{
		{
			s.AnalysisByDataSource = nil
			for i := 0; i < 0; i++ {
				var elem SzDataSourceRecordAnalysis
				{
					elem.SetFake()
				}
				s.AnalysisByDataSource = append(s.AnalysisByDataSource, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzBulkDataAnalysisResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzBulkDataStatus) SetFake() {
	*s = SzBulkDataStatusNOTSTARTED
}

// SetFake set fake values.
func (s *SzBulkLoadError) SetFake() {
	{
		{
			s.Error.SetFake()
		}
	}
	{
		{
			s.OccurrenceCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzBulkLoadResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzBulkLoadResult) SetFake() {
	{
		{
			s.RecordCount.SetFake()
		}
	}
	{
		{
			s.LoadedRecordCount.SetFake()
		}
	}
	{
		{
			s.IncompleteRecordCount.SetFake()
		}
	}
	{
		{
			s.FailedRecordCount.SetFake()
		}
	}
	{
		{
			s.TopErrors = nil
			for i := 0; i < 0; i++ {
				var elem SzBulkLoadError
				{
					elem.SetFake()
				}
				s.TopErrors = append(s.TopErrors, elem)
			}
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.CharacterEncoding.SetFake()
		}
	}
	{
		{
			s.MediaType.SetFake()
		}
	}
	{
		{
			s.MissingDataSourceCount.SetFake()
		}
	}
	{
		{
			s.ResultsByDataSource = nil
			for i := 0; i < 0; i++ {
				var elem SzDataSourceBulkLoadResult
				{
					elem.SetFake()
				}
				s.ResultsByDataSource = append(s.ResultsByDataSource, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzCandidateKey) SetFake() {
	{
		{
			s.FeatureId.SetFake()
		}
	}
	{
		{
			s.FeatureType.SetFake()
		}
	}
	{
		{
			s.FeatureValue.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSource) SetFake() {
	{
		{
			s.DataSourceCode.SetFake()
		}
	}
	{
		{
			s.DataSourceId.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceBulkLoadResult) SetFake() {
	{
		{
			s.RecordCount.SetFake()
		}
	}
	{
		{
			s.LoadedRecordCount.SetFake()
		}
	}
	{
		{
			s.IncompleteRecordCount.SetFake()
		}
	}
	{
		{
			s.FailedRecordCount.SetFake()
		}
	}
	{
		{
			s.TopErrors = nil
			for i := 0; i < 0; i++ {
				var elem SzBulkLoadError
				{
					elem.SetFake()
				}
				s.TopErrors = append(s.TopErrors, elem)
			}
		}
	}
	{
		{
			s.DataSource.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceDescriptor) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *SzDataSourceRecordAnalysis) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordCount.SetFake()
		}
	}
	{
		{
			s.RecordsWithRecordIdCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceRecordSummary) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordCount.SetFake()
		}
	}
	{
		{
			s.TopRecordIds.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceResponseData) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourceResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzDataSourcesResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourcesResponseData) SetFake() {
	{
		{
			s.DataSources = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.DataSources = append(s.DataSources, elem)
			}
		}
	}
	{
		{
			s.DataSourceDetails.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDataSourcesResponseDataDataSourceDetails) SetFake() {
	var (
		elem SzDataSource
		m    map[string]SzDataSource = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzDataSourcesResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzDeleteRecordResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDeleteRecordResponseData) SetFake() {
	{
		{
			s.Info.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzDeleteRecordResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzDisclosedRelation) SetFake() {
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.Direction.SetFake()
		}
	}
	{
		{
			s.Roles1 = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Roles1 = append(s.Roles1, elem)
			}
		}
	}
	{
		{
			s.Roles2 = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Roles2 = append(s.Roles2, elem)
			}
		}
	}
	{
		{
			s.RelatedFeatures = nil
			for i := 0; i < 0; i++ {
				var elem SzRelatedFeatures
				{
					elem.SetFake()
				}
				s.RelatedFeatures = append(s.RelatedFeatures, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzEntityData) SetFake() {
	{
		{
			s.ResolvedEntity.SetFake()
		}
	}
	{
		{
			s.RelatedEntities = nil
			for i := 0; i < 0; i++ {
				var elem SzRelatedEntity
				{
					elem.SetFake()
				}
				s.RelatedEntities = append(s.RelatedEntities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzEntityFeature) SetFake() {
	{
		{
			s.PrimaryId.SetFake()
		}
	}
	{
		{
			s.PrimaryValue.SetFake()
		}
	}
	{
		{
			s.UsageType.SetFake()
		}
	}
	{
		{
			s.DuplicateValues = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.DuplicateValues = append(s.DuplicateValues, elem)
			}
		}
	}
	{
		{
			s.FeatureDetails = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityFeatureDetail
				{
					elem.SetFake()
				}
				s.FeatureDetails = append(s.FeatureDetails, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzEntityFeatureDetail) SetFake() {
	{
		{
			s.InternalId.SetFake()
		}
	}
	{
		{
			s.FeatureValue.SetFake()
		}
	}
	{
		{
			s.Statistics.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityFeatureStatistics) SetFake() {
	{
		{
			s.UsedForCandidates.SetFake()
		}
	}
	{
		{
			s.UsedForScoring.SetFake()
		}
	}
	{
		{
			s.EntityCount.SetFake()
		}
	}
	{
		{
			s.CandidateCapReached.SetFake()
		}
	}
	{
		{
			s.ScoringCapReached.SetFake()
		}
	}
	{
		{
			s.Suppressed.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityNetworkData) SetFake() {
	{
		{
			s.EntityPaths = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityPath
				{
					elem.SetFake()
				}
				s.EntityPaths = append(s.EntityPaths, elem)
			}
		}
	}
	{
		{
			s.Entities = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityData
				{
					elem.SetFake()
				}
				s.Entities = append(s.Entities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzEntityNetworkResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityNetworkResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzEntityPath) SetFake() {
	{
		{
			s.StartEntityId.SetFake()
		}
	}
	{
		{
			s.EndEntityId.SetFake()
		}
	}
	{
		{
			s.EntityIds.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityPathData) SetFake() {
	{
		{
			s.EntityPath.SetFake()
		}
	}
	{
		{
			s.Entities = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityData
				{
					elem.SetFake()
				}
				s.Entities = append(s.Entities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzEntityPathResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityPathResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzEntityRecord) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.FeatureReferences.SetFake()
		}
	}
	{
		{
			s.LastSeenTimestamp.SetFake()
		}
	}
	{
		{
			s.AddressData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddressData = append(s.AddressData, elem)
			}
		}
	}
	{
		{
			s.CharacteristicData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.CharacteristicData = append(s.CharacteristicData, elem)
			}
		}
	}
	{
		{
			s.IdentifierData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.IdentifierData = append(s.IdentifierData, elem)
			}
		}
	}
	{
		{
			s.NameData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NameData = append(s.NameData, elem)
			}
		}
	}
	{
		{
			s.PhoneData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PhoneData = append(s.PhoneData, elem)
			}
		}
	}
	{
		{
			s.RelationshipData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RelationshipData = append(s.RelationshipData, elem)
			}
		}
	}
	{
		{
			s.OtherData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OtherData = append(s.OtherData, elem)
			}
		}
	}
	{
		{
			s.OriginalSourceData.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityRecordOriginalSourceData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzEntityResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzEntityResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzError) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzErrorResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem SzError
				{
					elem.SetFake()
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzFeatureReference) SetFake() {
	{
		{
			s.InternalId.SetFake()
		}
	}
	{
		{
			s.UsageType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzFeatureScore) SetFake() {
	{
		{
			s.FeatureType.SetFake()
		}
	}
	{
		{
			s.InboundFeature.SetFake()
		}
	}
	{
		{
			s.CandidateFeature.SetFake()
		}
	}
	{
		{
			s.Score.SetFake()
		}
	}
	{
		{
			s.NameScoringDetails.SetFake()
		}
	}
	{
		{
			s.ScoringBucket.SetFake()
		}
	}
	{
		{
			s.ScoringBehavior.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzFlaggedEntity) SetFake() {
	{
		{
			s.EntityId.SetFake()
		}
	}
	{
		{
			s.Degrees.SetFake()
		}
	}
	{
		{
			s.Flags = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Flags = append(s.Flags, elem)
			}
		}
	}
	{
		{
			s.SampleRecords = nil
			for i := 0; i < 0; i++ {
				var elem SzFlaggedRecord
				{
					elem.SetFake()
				}
				s.SampleRecords = append(s.SampleRecords, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzFlaggedRecord) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.Flags = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Flags = append(s.Flags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzHowEntityResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzHowEntityResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzHowEntityResult) SetFake() {
	{
		{
			s.FinalStates = nil
			for i := 0; i < 0; i++ {
				var elem SzVirtualEntity
				{
					elem.SetFake()
				}
				s.FinalStates = append(s.FinalStates, elem)
			}
		}
	}
	{
		{
			s.ResolutionSteps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzHowEntityResultResolutionSteps) SetFake() {
	var (
		elem SzResolutionStep
		m    map[string]SzResolutionStep = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzHowMatchInfo) SetFake() {
	{
		{
			s.MatchKey.SetFake()
		}
	}
	{
		{
			s.ResolutionRule.SetFake()
		}
	}
	{
		{
			s.FeatureScores.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzHowMatchInfoFeatureScores) SetFake() {
	var (
		elem []SzFeatureScore
		m    map[string][]SzFeatureScore = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzHttpMethod) SetFake() {
	*s = SzHttpMethodGET
}

// SetFake set fake values.
func (s *SzLicenseInfo) SetFake() {
	{
		{
			s.Customer.SetFake()
		}
	}
	{
		{
			s.Contract.SetFake()
		}
	}
	{
		{
			s.LicenseType.SetFake()
		}
	}
	{
		{
			s.LicenseLevel.SetFake()
		}
	}
	{
		{
			s.Billing.SetFake()
		}
	}
	{
		{
			s.IssuanceDate.SetFake()
		}
	}
	{
		{
			s.ExpirationDate.SetFake()
		}
	}
	{
		{
			s.RecordLimit.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLicenseResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLicenseResponseData) SetFake() {
	{
		{
			s.License.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLicenseResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzLinks) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
	{
		{
			s.OpenApiSpecification.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLoadRecordResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLoadRecordResponseData) SetFake() {
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.Info.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzLoadRecordResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzMatchLevel) SetFake() {
	*s = SzMatchLevelNOMATCH
}

// SetFake set fake values.
func (s *SzMatchedRecord) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.FeatureReferences.SetFake()
		}
	}
	{
		{
			s.LastSeenTimestamp.SetFake()
		}
	}
	{
		{
			s.AddressData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddressData = append(s.AddressData, elem)
			}
		}
	}
	{
		{
			s.CharacteristicData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.CharacteristicData = append(s.CharacteristicData, elem)
			}
		}
	}
	{
		{
			s.IdentifierData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.IdentifierData = append(s.IdentifierData, elem)
			}
		}
	}
	{
		{
			s.NameData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NameData = append(s.NameData, elem)
			}
		}
	}
	{
		{
			s.PhoneData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PhoneData = append(s.PhoneData, elem)
			}
		}
	}
	{
		{
			s.RelationshipData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RelationshipData = append(s.RelationshipData, elem)
			}
		}
	}
	{
		{
			s.OtherData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OtherData = append(s.OtherData, elem)
			}
		}
	}
	{
		{
			s.OriginalSourceData.SetFake()
		}
	}
	{
		{
			s.MatchKey.SetFake()
		}
	}
	{
		{
			s.ResolutionRuleCode.SetFake()
		}
	}
	{
		{
			s.MatchLevel.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzMatchedRecordOriginalSourceData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzMeta) SetFake() {
	{
		{
			s.Server.SetFake()
		}
	}
	{
		{
			s.HttpMethod.SetFake()
		}
	}
	{
		{
			s.HttpStatusCode.SetFake()
		}
	}
	{
		{
			s.Timestamp.SetFake()
		}
	}
	{
		{
			s.Version.SetFake()
		}
	}
	{
		{
			s.RestApiVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildNumber.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildDate.SetFake()
		}
	}
	{
		{
			s.ConfigCompatibilityVersion.SetFake()
		}
	}
	{
		{
			s.Timings.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzMetaTimings) SetFake() {
	var (
		elem int64
		m    map[string]int64 = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzNameScoring) SetFake() {
	{
		{
			s.FullNameScore.SetFake()
		}
	}
	{
		{
			s.SurnameScore.SetFake()
		}
	}
	{
		{
			s.GivenNameScore.SetFake()
		}
	}
	{
		{
			s.GenerationScore.SetFake()
		}
	}
	{
		{
			s.OrgNameScore.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzRecordResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzRecordResponseData) SetFake() {
	{
		{
			s.Record.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzRecordResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzReevaluateResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzReevaluateResponseData) SetFake() {
	{
		{
			s.Info.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzReevaluateResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzRelatedEntity) SetFake() {
	{
		{
			s.EntityId.SetFake()
		}
	}
	{
		{
			s.EntityName.SetFake()
		}
	}
	{
		{
			s.BestName.SetFake()
		}
	}
	{
		{
			s.RecordSummaries = nil
			for i := 0; i < 0; i++ {
				var elem SzDataSourceRecordSummary
				{
					elem.SetFake()
				}
				s.RecordSummaries = append(s.RecordSummaries, elem)
			}
		}
	}
	{
		{
			s.NameData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NameData = append(s.NameData, elem)
			}
		}
	}
	{
		{
			s.CharacteristicData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.CharacteristicData = append(s.CharacteristicData, elem)
			}
		}
	}
	{
		{
			s.AddressData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddressData = append(s.AddressData, elem)
			}
		}
	}
	{
		{
			s.PhoneData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PhoneData = append(s.PhoneData, elem)
			}
		}
	}
	{
		{
			s.IdentifierData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.IdentifierData = append(s.IdentifierData, elem)
			}
		}
	}
	{
		{
			s.RelationshipData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RelationshipData = append(s.RelationshipData, elem)
			}
		}
	}
	{
		{
			s.OtherData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OtherData = append(s.OtherData, elem)
			}
		}
	}
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem SzMatchedRecord
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
	{
		{
			s.Features.SetFake()
		}
	}
	{
		{
			s.Partial.SetFake()
		}
	}
	{
		{
			s.LastSeenTimestamp.SetFake()
		}
	}
	{
		{
			s.MatchLevel.SetFake()
		}
	}
	{
		{
			s.MatchKey.SetFake()
		}
	}
	{
		{
			s.ResolutionRuleCode.SetFake()
		}
	}
	{
		{
			s.Disclosed.SetFake()
		}
	}
	{
		{
			s.Ambiguous.SetFake()
		}
	}
	{
		{
			s.RelationType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzRelatedEntityFeatures) SetFake() {
	var (
		elem []SzEntityFeature
		m    map[string][]SzEntityFeature = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzRelatedFeatures) SetFake() {
	{
		{
			s.Feature1.SetFake()
		}
	}
	{
		{
			s.Feature2.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzRelationDirection) SetFake() {
	*s = SzRelationDirectionINBOUND
}

// SetFake set fake values.
func (s *SzRelationshipType) SetFake() {
	*s = SzRelationshipTypePOSSIBLEMATCH
}

// SetFake set fake values.
func (s *SzResolutionInfo) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.AffectedEntities = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.AffectedEntities = append(s.AffectedEntities, elem)
			}
		}
	}
	{
		{
			s.FlaggedEntities = nil
			for i := 0; i < 0; i++ {
				var elem SzFlaggedEntity
				{
					elem.SetFake()
				}
				s.FlaggedEntities = append(s.FlaggedEntities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzResolutionStep) SetFake() {
	{
		{
			s.StepNumber.SetFake()
		}
	}
	{
		{
			s.InboundVirtualEntity.SetFake()
		}
	}
	{
		{
			s.CandidateVirtualEntity.SetFake()
		}
	}
	{
		{
			s.MatchInfo.SetFake()
		}
	}
	{
		{
			s.ResolvedVirtualEntityId.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzResolvedEntity) SetFake() {
	{
		{
			s.EntityId.SetFake()
		}
	}
	{
		{
			s.EntityName.SetFake()
		}
	}
	{
		{
			s.BestName.SetFake()
		}
	}
	{
		{
			s.RecordSummaries = nil
			for i := 0; i < 0; i++ {
				var elem SzDataSourceRecordSummary
				{
					elem.SetFake()
				}
				s.RecordSummaries = append(s.RecordSummaries, elem)
			}
		}
	}
	{
		{
			s.NameData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NameData = append(s.NameData, elem)
			}
		}
	}
	{
		{
			s.CharacteristicData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.CharacteristicData = append(s.CharacteristicData, elem)
			}
		}
	}
	{
		{
			s.AddressData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddressData = append(s.AddressData, elem)
			}
		}
	}
	{
		{
			s.PhoneData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PhoneData = append(s.PhoneData, elem)
			}
		}
	}
	{
		{
			s.IdentifierData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.IdentifierData = append(s.IdentifierData, elem)
			}
		}
	}
	{
		{
			s.RelationshipData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RelationshipData = append(s.RelationshipData, elem)
			}
		}
	}
	{
		{
			s.OtherData = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OtherData = append(s.OtherData, elem)
			}
		}
	}
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem SzMatchedRecord
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
	{
		{
			s.Features.SetFake()
		}
	}
	{
		{
			s.Partial.SetFake()
		}
	}
	{
		{
			s.LastSeenTimestamp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzResolvedEntityFeatures) SetFake() {
	var (
		elem []SzEntityFeature
		m    map[string][]SzEntityFeature = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzResponseWithRawData) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzResponseWithRawDataRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzScoredFeature) SetFake() {
	{
		{
			s.FeatureId.SetFake()
		}
	}
	{
		{
			s.FeatureType.SetFake()
		}
	}
	{
		{
			s.FeatureValue.SetFake()
		}
	}
	{
		{
			s.UsageType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzScoringBehavior) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Frequency.SetFake()
		}
	}
	{
		{
			s.Exclusive.SetFake()
		}
	}
	{
		{
			s.Stable.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzScoringBucket) SetFake() {
	*s = SzScoringBucketNOTSCORED
}

// SetFake set fake values.
func (s *SzScoringFrequency) SetFake() {
	*s = SzScoringFrequencyALWAYSONE
}

// SetFake set fake values.
func (s *SzSearchFeatureScore) SetFake() {
	{
		{
			s.FeatureType.SetFake()
		}
	}
	{
		{
			s.InboundFeature.SetFake()
		}
	}
	{
		{
			s.CandidateFeature.SetFake()
		}
	}
	{
		{
			s.Score.SetFake()
		}
	}
	{
		{
			s.NameScoringDetails.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzServerInfo) SetFake() {
	{
		{
			s.Concurrency.SetFake()
		}
	}
	{
		{
			s.ActiveConfigId.SetFake()
		}
	}
	{
		{
			s.DynamicConfig.SetFake()
		}
	}
	{
		{
			s.ReadOnly.SetFake()
		}
	}
	{
		{
			s.AdminEnabled.SetFake()
		}
	}
	{
		{
			s.WebSocketsMessageMaxSize.SetFake()
		}
	}
	{
		{
			s.InfoQueueConfigured.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzServerInfoResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVersionInfo) SetFake() {
	{
		{
			s.ApiServerVersion.SetFake()
		}
	}
	{
		{
			s.RestApiVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildVersion.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildNumber.SetFake()
		}
	}
	{
		{
			s.NativeApiBuildDate.SetFake()
		}
	}
	{
		{
			s.ConfigCompatibilityVersion.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVersionResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVersionResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzVirtualEntity) SetFake() {
	{
		{
			s.VirtualEntityId.SetFake()
		}
	}
	{
		{
			s.Singleton.SetFake()
		}
	}
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem SzVirtualEntityRecord
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzVirtualEntityData) SetFake() {
	{
		{
			s.ResolvedEntity.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVirtualEntityRecord) SetFake() {
	{
		{
			s.DataSource.SetFake()
		}
	}
	{
		{
			s.RecordId.SetFake()
		}
	}
	{
		{
			s.InternalId.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVirtualEntityResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzVirtualEntityResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyEntitiesResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyEntitiesResponseData) SetFake() {
	{
		{
			s.WhyResult.SetFake()
		}
	}
	{
		{
			s.Entities = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityData
				{
					elem.SetFake()
				}
				s.Entities = append(s.Entities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzWhyEntitiesResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyEntitiesResult) SetFake() {
	{
		{
			s.EntityId1.SetFake()
		}
	}
	{
		{
			s.EntityId2.SetFake()
		}
	}
	{
		{
			s.MatchInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyEntityResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyEntityResponseData) SetFake() {
	{
		{
			s.WhyResults = nil
			for i := 0; i < 0; i++ {
				var elem SzWhyEntityResult
				{
					elem.SetFake()
				}
				s.WhyResults = append(s.WhyResults, elem)
			}
		}
	}
	{
		{
			s.Entities = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityData
				{
					elem.SetFake()
				}
				s.Entities = append(s.Entities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzWhyEntityResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyEntityResult) SetFake() {
	{
		{
			s.Perspective.SetFake()
		}
	}
	{
		{
			s.MatchInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyMatchInfo) SetFake() {
	{
		{
			s.WhyKey.SetFake()
		}
	}
	{
		{
			s.MatchLevel.SetFake()
		}
	}
	{
		{
			s.ResolutionRule.SetFake()
		}
	}
	{
		{
			s.CandidateKeys.SetFake()
		}
	}
	{
		{
			s.FeatureScores.SetFake()
		}
	}
	{
		{
			s.DisclosedRelations.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyMatchInfoCandidateKeys) SetFake() {
	var (
		elem []SzCandidateKey
		m    map[string][]SzCandidateKey = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyMatchInfoFeatureScores) SetFake() {
	var (
		elem []SzFeatureScore
		m    map[string][]SzFeatureScore = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyPerspective) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = SzWhyPerspective(unwrapped)
}

// SetFake set fake values.
func (s *SzWhyRecordsResponse) SetFake() {
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.RawData.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SzWhyRecordsResponseData) SetFake() {
	{
		{
			s.WhyResult.SetFake()
		}
	}
	{
		{
			s.Entities = nil
			for i := 0; i < 0; i++ {
				var elem SzEntityData
				{
					elem.SetFake()
				}
				s.Entities = append(s.Entities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SzWhyRecordsResponseRawData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SzWhyRecordsResult) SetFake() {
	{
		{
			s.Perspective1.SetFake()
		}
	}
	{
		{
			s.Perspective2.SetFake()
		}
	}
	{
		{
			s.MatchInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WhyEntitiesApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntitiesApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *WhyEntitiesApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntitiesApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *WhyEntityByEntityIDApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntityByEntityIDApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *WhyEntityByEntityIDApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntityByEntityIDApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *WhyEntityByRecordIDApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntityByRecordIDApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *WhyEntityByRecordIDApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyEntityByRecordIDApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *WhyRecordsApplicationJSONInternalServerError) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyRecordsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *WhyRecordsApplicationJSONNotFound) SetFake() {
	var unwrapped SzErrorResponse
	{
		unwrapped.SetFake()
	}
	*s = WhyRecordsApplicationJSONNotFound(unwrapped)
}
