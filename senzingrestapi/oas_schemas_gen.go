// Code generated by ogen, DO NOT EDIT.

package senzingrestapi

import (
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

type AddDataSourcesApplicationJSONForbidden SzErrorResponse

func (*AddDataSourcesApplicationJSONForbidden) addDataSourcesRes() {}

type AddDataSourcesApplicationJSONInternalServerError SzErrorResponse

func (*AddDataSourcesApplicationJSONInternalServerError) addDataSourcesRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddDataSourcesForbiddenDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddDataSourcesForbiddenDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddDataSourcesForbiddenDefault) addDataSourcesRes() {}

// The response describing the configured data sources.
// Ref: #/components/schemas/SzDataSourcesResponse
type AddDataSourcesOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddDataSourcesOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddDataSourcesOKDefault) addDataSourcesRes() {}

// AddDataSourcesReqApplicationJSON represents sum type.
type AddDataSourcesReqApplicationJSON struct {
	Type                        AddDataSourcesReqApplicationJSONType // switch on this field
	SzDataSourceDescriptorArray []SzDataSourceDescriptor
	SzDataSourceDescriptor      SzDataSourceDescriptor
}

// AddDataSourcesReqApplicationJSONType is oneOf type of AddDataSourcesReqApplicationJSON.
type AddDataSourcesReqApplicationJSONType string

// Possible values for AddDataSourcesReqApplicationJSONType.
const (
	SzDataSourceDescriptorArrayAddDataSourcesReqApplicationJSON AddDataSourcesReqApplicationJSONType = "[]SzDataSourceDescriptor"
	SzDataSourceDescriptorAddDataSourcesReqApplicationJSON      AddDataSourcesReqApplicationJSONType = "SzDataSourceDescriptor"
)

// IsSzDataSourceDescriptorArray reports whether AddDataSourcesReqApplicationJSON is []SzDataSourceDescriptor.
func (s AddDataSourcesReqApplicationJSON) IsSzDataSourceDescriptorArray() bool {
	return s.Type == SzDataSourceDescriptorArrayAddDataSourcesReqApplicationJSON
}

// IsSzDataSourceDescriptor reports whether AddDataSourcesReqApplicationJSON is SzDataSourceDescriptor.
func (s AddDataSourcesReqApplicationJSON) IsSzDataSourceDescriptor() bool {
	return s.Type == SzDataSourceDescriptorAddDataSourcesReqApplicationJSON
}

// SetSzDataSourceDescriptorArray sets AddDataSourcesReqApplicationJSON to []SzDataSourceDescriptor.
func (s *AddDataSourcesReqApplicationJSON) SetSzDataSourceDescriptorArray(v []SzDataSourceDescriptor) {
	s.Type = SzDataSourceDescriptorArrayAddDataSourcesReqApplicationJSON
	s.SzDataSourceDescriptorArray = v
}

// GetSzDataSourceDescriptorArray returns []SzDataSourceDescriptor and true boolean if AddDataSourcesReqApplicationJSON is []SzDataSourceDescriptor.
func (s AddDataSourcesReqApplicationJSON) GetSzDataSourceDescriptorArray() (v []SzDataSourceDescriptor, ok bool) {
	if !s.IsSzDataSourceDescriptorArray() {
		return v, false
	}
	return s.SzDataSourceDescriptorArray, true
}

// NewSzDataSourceDescriptorArrayAddDataSourcesReqApplicationJSON returns new AddDataSourcesReqApplicationJSON from []SzDataSourceDescriptor.
func NewSzDataSourceDescriptorArrayAddDataSourcesReqApplicationJSON(v []SzDataSourceDescriptor) AddDataSourcesReqApplicationJSON {
	var s AddDataSourcesReqApplicationJSON
	s.SetSzDataSourceDescriptorArray(v)
	return s
}

// SetSzDataSourceDescriptor sets AddDataSourcesReqApplicationJSON to SzDataSourceDescriptor.
func (s *AddDataSourcesReqApplicationJSON) SetSzDataSourceDescriptor(v SzDataSourceDescriptor) {
	s.Type = SzDataSourceDescriptorAddDataSourcesReqApplicationJSON
	s.SzDataSourceDescriptor = v
}

// GetSzDataSourceDescriptor returns SzDataSourceDescriptor and true boolean if AddDataSourcesReqApplicationJSON is SzDataSourceDescriptor.
func (s AddDataSourcesReqApplicationJSON) GetSzDataSourceDescriptor() (v SzDataSourceDescriptor, ok bool) {
	if !s.IsSzDataSourceDescriptor() {
		return v, false
	}
	return s.SzDataSourceDescriptor, true
}

// NewSzDataSourceDescriptorAddDataSourcesReqApplicationJSON returns new AddDataSourcesReqApplicationJSON from SzDataSourceDescriptor.
func NewSzDataSourceDescriptorAddDataSourcesReqApplicationJSON(v SzDataSourceDescriptor) AddDataSourcesReqApplicationJSON {
	var s AddDataSourcesReqApplicationJSON
	s.SetSzDataSourceDescriptor(v)
	return s
}

func (*AddDataSourcesReqApplicationJSON) addDataSourcesReq() {}

type AddDataSourcesReqEmptyBody struct{}

func (*AddDataSourcesReqEmptyBody) addDataSourcesReq() {}

type AddDataSourcesReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddDataSourcesReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddDataSourcesReqTextPlain) addDataSourcesReq() {}

type AddRecordApplicationJSONBadRequest SzErrorResponse

func (*AddRecordApplicationJSONBadRequest) addRecordRes() {}

type AddRecordApplicationJSONForbidden SzErrorResponse

func (*AddRecordApplicationJSONForbidden) addRecordRes() {}

type AddRecordApplicationJSONInternalServerError SzErrorResponse

func (*AddRecordApplicationJSONInternalServerError) addRecordRes() {}

type AddRecordApplicationJSONNotFound SzErrorResponse

func (*AddRecordApplicationJSONNotFound) addRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordBadRequestDefault) addRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordForbiddenDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordForbiddenDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordForbiddenDefault) addRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordNotFoundDefault) addRecordRes() {}

// Describes the response when a record is successfully loaded.
// Ref: #/components/schemas/SzLoadRecordResponse
type AddRecordOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordOKDefault) addRecordRes() {}

type AddRecordReq map[string]jx.Raw

func (s *AddRecordReq) init() AddRecordReq {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type AddRecordWithReturnedRecordIdApplicationJSONBadRequest SzErrorResponse

func (*AddRecordWithReturnedRecordIdApplicationJSONBadRequest) addRecordWithReturnedRecordIdRes() {}

type AddRecordWithReturnedRecordIdApplicationJSONForbidden SzErrorResponse

func (*AddRecordWithReturnedRecordIdApplicationJSONForbidden) addRecordWithReturnedRecordIdRes() {}

type AddRecordWithReturnedRecordIdApplicationJSONInternalServerError SzErrorResponse

func (*AddRecordWithReturnedRecordIdApplicationJSONInternalServerError) addRecordWithReturnedRecordIdRes() {
}

type AddRecordWithReturnedRecordIdApplicationJSONNotFound SzErrorResponse

func (*AddRecordWithReturnedRecordIdApplicationJSONNotFound) addRecordWithReturnedRecordIdRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordWithReturnedRecordIdBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordWithReturnedRecordIdBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordWithReturnedRecordIdBadRequestDefault) addRecordWithReturnedRecordIdRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordWithReturnedRecordIdForbiddenDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordWithReturnedRecordIdForbiddenDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordWithReturnedRecordIdForbiddenDefault) addRecordWithReturnedRecordIdRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type AddRecordWithReturnedRecordIdNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordWithReturnedRecordIdNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordWithReturnedRecordIdNotFoundDefault) addRecordWithReturnedRecordIdRes() {}

// Describes the response when a record is successfully loaded.
// Ref: #/components/schemas/SzLoadRecordResponse
type AddRecordWithReturnedRecordIdOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddRecordWithReturnedRecordIdOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddRecordWithReturnedRecordIdOKDefault) addRecordWithReturnedRecordIdRes() {}

type AddRecordWithReturnedRecordIdReq map[string]jx.Raw

func (s *AddRecordWithReturnedRecordIdReq) init() AddRecordWithReturnedRecordIdReq {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The response describing the analysis of bulk data records.
// Ref: #/components/schemas/SzBulkDataAnalysisResponse
type AnalyzeBulkRecordsOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AnalyzeBulkRecordsOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AnalyzeBulkRecordsOKDefault) analyzeBulkRecordsRes() {}

type AnalyzeBulkRecordsReqApplicationJSON string

func (*AnalyzeBulkRecordsReqApplicationJSON) analyzeBulkRecordsReq() {}

type AnalyzeBulkRecordsReqApplicationXJsonlines struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AnalyzeBulkRecordsReqApplicationXJsonlines) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AnalyzeBulkRecordsReqApplicationXJsonlines) analyzeBulkRecordsReq() {}

type AnalyzeBulkRecordsReqMultipartFormData struct {
	Body OptMultipartFile `json:"body"`
}

// GetBody returns the value of Body.
func (s *AnalyzeBulkRecordsReqMultipartFormData) GetBody() OptMultipartFile {
	return s.Body
}

// SetBody sets the value of Body.
func (s *AnalyzeBulkRecordsReqMultipartFormData) SetBody(val OptMultipartFile) {
	s.Body = val
}

func (*AnalyzeBulkRecordsReqMultipartFormData) analyzeBulkRecordsReq() {}

type AnalyzeBulkRecordsReqTextCsv struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AnalyzeBulkRecordsReqTextCsv) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AnalyzeBulkRecordsReqTextCsv) analyzeBulkRecordsReq() {}

type AnalyzeBulkRecordsReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AnalyzeBulkRecordsReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AnalyzeBulkRecordsReqTextPlain) analyzeBulkRecordsReq() {}

type DeleteRecordApplicationJSONInternalServerError SzErrorResponse

func (*DeleteRecordApplicationJSONInternalServerError) deleteRecordRes() {}

type DeleteRecordApplicationJSONNotFound SzErrorResponse

func (*DeleteRecordApplicationJSONNotFound) deleteRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type DeleteRecordNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DeleteRecordNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DeleteRecordNotFoundDefault) deleteRecordRes() {}

// Ref: #/components/schemas/SzDeleteRecordResponse
type DeleteRecordOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DeleteRecordOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DeleteRecordOKDefault) deleteRecordRes() {}

type FindEntityNetworkApplicationJSONBadRequest SzErrorResponse

func (*FindEntityNetworkApplicationJSONBadRequest) findEntityNetworkRes() {}

type FindEntityNetworkApplicationJSONInternalServerError SzErrorResponse

func (*FindEntityNetworkApplicationJSONInternalServerError) findEntityNetworkRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type FindEntityNetworkBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FindEntityNetworkBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*FindEntityNetworkBadRequestDefault) findEntityNetworkRes() {}

// The response describing a network of resolved entities.
// Ref: #/components/schemas/SzEntityNetworkResponse
type FindEntityNetworkOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FindEntityNetworkOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*FindEntityNetworkOKDefault) findEntityNetworkRes() {}

type FindEntityPathApplicationJSONBadRequest SzErrorResponse

func (*FindEntityPathApplicationJSONBadRequest) findEntityPathRes() {}

type FindEntityPathApplicationJSONInternalServerError SzErrorResponse

func (*FindEntityPathApplicationJSONInternalServerError) findEntityPathRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type FindEntityPathBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FindEntityPathBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*FindEntityPathBadRequestDefault) findEntityPathRes() {}

// The response describing a path between two resolved entities.
// Ref: #/components/schemas/SzEntityPathResponse
type FindEntityPathOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FindEntityPathOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*FindEntityPathOKDefault) findEntityPathRes() {}

// The response containing raw configuration in the rawData field.
// Ref: #/components/schemas/SzConfigResponse
type GetActiveConfigOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetActiveConfigOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetActiveConfigOKDefault) getActiveConfigRes() {}

type GetAttributeTypeApplicationJSONInternalServerError SzErrorResponse

func (*GetAttributeTypeApplicationJSONInternalServerError) getAttributeTypeRes() {}

type GetAttributeTypeApplicationJSONNotFound SzErrorResponse

func (*GetAttributeTypeApplicationJSONNotFound) getAttributeTypeRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type GetAttributeTypeNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetAttributeTypeNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetAttributeTypeNotFoundDefault) getAttributeTypeRes() {}

// The response containing information for a single attribute type.
// Ref: #/components/schemas/SzAttributeTypeResponse
type GetAttributeTypeOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetAttributeTypeOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetAttributeTypeOKDefault) getAttributeTypeRes() {}

// The response containing attribute type information.
// Ref: #/components/schemas/SzAttributeTypesResponse
type GetAttributeTypesOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetAttributeTypesOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetAttributeTypesOKDefault) getAttributeTypesRes() {}

// The response describing a data source.
// Ref: #/components/schemas/SzDataSourceResponse
type GetDataSourceOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDataSourceOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDataSourceOKDefault) getDataSourceRes() {}

// The response describing the configured data sources.
// Ref: #/components/schemas/SzDataSourcesResponse
type GetDataSourcesOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDataSourcesOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDataSourcesOKDefault) getDataSourcesRes() {}

type GetEntityByEntityIdApplicationJSONInternalServerError SzErrorResponse

func (*GetEntityByEntityIdApplicationJSONInternalServerError) getEntityByEntityIdRes() {}

type GetEntityByEntityIdApplicationJSONNotFound SzErrorResponse

func (*GetEntityByEntityIdApplicationJSONNotFound) getEntityByEntityIdRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type GetEntityByEntityIdNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEntityByEntityIdNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetEntityByEntityIdNotFoundDefault) getEntityByEntityIdRes() {}

// The response describing a resolved entity and possibly its related entities.
// Ref: #/components/schemas/SzEntityResponse
type GetEntityByEntityIdOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEntityByEntityIdOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetEntityByEntityIdOKDefault) getEntityByEntityIdRes() {}

type GetEntityByRecordIdApplicationJSONInternalServerError SzErrorResponse

func (*GetEntityByRecordIdApplicationJSONInternalServerError) getEntityByRecordIdRes() {}

type GetEntityByRecordIdApplicationJSONNotFound SzErrorResponse

func (*GetEntityByRecordIdApplicationJSONNotFound) getEntityByRecordIdRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type GetEntityByRecordIdNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEntityByRecordIdNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetEntityByRecordIdNotFoundDefault) getEntityByRecordIdRes() {}

// The response describing a resolved entity and possibly its related entities.
// Ref: #/components/schemas/SzEntityResponse
type GetEntityByRecordIdOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEntityByRecordIdOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetEntityByRecordIdOKDefault) getEntityByRecordIdRes() {}

type GetRecordApplicationJSONInternalServerError SzErrorResponse

func (*GetRecordApplicationJSONInternalServerError) getRecordRes() {}

type GetRecordApplicationJSONNotFound SzErrorResponse

func (*GetRecordApplicationJSONNotFound) getRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type GetRecordNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetRecordNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetRecordNotFoundDefault) getRecordRes() {}

// The response describing an entity record.
// Ref: #/components/schemas/SzRecordResponse
type GetRecordOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetRecordOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetRecordOKDefault) getRecordRes() {}

// The response containing the server info.
// Ref: #/components/schemas/SzServerInfoResponse
type GetServerInfoOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetServerInfoOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetServerInfoOKDefault) getServerInfoRes() {}

// The response containing raw configuration in the rawData field.
// Ref: #/components/schemas/SzConfigResponse
type GetTemplateConfigOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetTemplateConfigOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetTemplateConfigOKDefault) getTemplateConfigRes() {}

type GetVirtualEntityByRecordIdsApplicationJSONBadRequest SzErrorResponse

func (*GetVirtualEntityByRecordIdsApplicationJSONBadRequest) getVirtualEntityByRecordIdsRes() {}

type GetVirtualEntityByRecordIdsApplicationJSONInternalServerError SzErrorResponse

func (*GetVirtualEntityByRecordIdsApplicationJSONInternalServerError) getVirtualEntityByRecordIdsRes() {
}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type GetVirtualEntityByRecordIdsBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVirtualEntityByRecordIdsBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVirtualEntityByRecordIdsBadRequestDefault) getVirtualEntityByRecordIdsRes() {}

// The response describing a simulated virtual entity and possibly its related entities.
// Ref: #/components/schemas/SzVirtualEntityResponse
type GetVirtualEntityByRecordIdsOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVirtualEntityByRecordIdsOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVirtualEntityByRecordIdsOKDefault) getVirtualEntityByRecordIdsRes() {}

type HowEntityByEntityIDApplicationJSONInternalServerError SzErrorResponse

func (*HowEntityByEntityIDApplicationJSONInternalServerError) howEntityByEntityIDRes() {}

type HowEntityByEntityIDApplicationJSONNotFound SzErrorResponse

func (*HowEntityByEntityIDApplicationJSONNotFound) howEntityByEntityIDRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type HowEntityByEntityIDNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s HowEntityByEntityIDNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*HowEntityByEntityIDNotFoundDefault) howEntityByEntityIDRes() {}

// The response describing the result of the "how entity" operation.
// Ref: #/components/schemas/SzHowEntityResponse
type HowEntityByEntityIDOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s HowEntityByEntityIDOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*HowEntityByEntityIDOKDefault) howEntityByEntityIDRes() {}

type HowEntityByRecordIDApplicationJSONInternalServerError SzErrorResponse

func (*HowEntityByRecordIDApplicationJSONInternalServerError) howEntityByRecordIDRes() {}

type HowEntityByRecordIDApplicationJSONNotFound SzErrorResponse

func (*HowEntityByRecordIDApplicationJSONNotFound) howEntityByRecordIDRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type HowEntityByRecordIDNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s HowEntityByRecordIDNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*HowEntityByRecordIDNotFoundDefault) howEntityByRecordIDRes() {}

// The response describing the result of the "how entity" operation.
// Ref: #/components/schemas/SzHowEntityResponse
type HowEntityByRecordIDOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s HowEntityByRecordIDOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*HowEntityByRecordIDOKDefault) howEntityByRecordIDRes() {}

// The response containing the license information.
// Ref: #/components/schemas/SzLicenseResponse
type LicenseOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LicenseOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LicenseOKDefault) licenseRes() {}

type LoadBulkRecordsApplicationJSONForbidden SzErrorResponse

func (*LoadBulkRecordsApplicationJSONForbidden) loadBulkRecordsRes() {}

type LoadBulkRecordsApplicationJSONInternalServerError SzErrorResponse

func (*LoadBulkRecordsApplicationJSONInternalServerError) loadBulkRecordsRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type LoadBulkRecordsForbiddenDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoadBulkRecordsForbiddenDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LoadBulkRecordsForbiddenDefault) loadBulkRecordsRes() {}

// The response describing the result of loading bulk data.
// Ref: #/components/schemas/SzBulkLoadResponse
type LoadBulkRecordsOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoadBulkRecordsOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LoadBulkRecordsOKDefault) loadBulkRecordsRes() {}

type LoadBulkRecordsReqApplicationJSON string

func (*LoadBulkRecordsReqApplicationJSON) loadBulkRecordsReq() {}

type LoadBulkRecordsReqApplicationXJsonlines struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoadBulkRecordsReqApplicationXJsonlines) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LoadBulkRecordsReqApplicationXJsonlines) loadBulkRecordsReq() {}

type LoadBulkRecordsReqMultipartFormData struct {
	Body OptMultipartFile `json:"body"`
}

// GetBody returns the value of Body.
func (s *LoadBulkRecordsReqMultipartFormData) GetBody() OptMultipartFile {
	return s.Body
}

// SetBody sets the value of Body.
func (s *LoadBulkRecordsReqMultipartFormData) SetBody(val OptMultipartFile) {
	s.Body = val
}

func (*LoadBulkRecordsReqMultipartFormData) loadBulkRecordsReq() {}

type LoadBulkRecordsReqTextCsv struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoadBulkRecordsReqTextCsv) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LoadBulkRecordsReqTextCsv) loadBulkRecordsReq() {}

type LoadBulkRecordsReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoadBulkRecordsReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*LoadBulkRecordsReqTextPlain) loadBulkRecordsReq() {}

// This represents the possible return type for an Open API specification which can be an instance of
// `SzOpenApiSpecResponse` or raw JSON of the Open API specification.
// Ref: #/components/schemas/SzOpenApiSpecResponseOrRawJson
type OpenApiSpecificationOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s OpenApiSpecificationOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt16 returns new OptInt16 with value set to v.
func NewOptInt16(v int16) OptInt16 {
	return OptInt16{
		Value: v,
		Set:   true,
	}
}

// OptInt16 is optional int16.
type OptInt16 struct {
	Value int16
	Set   bool
}

// IsSet returns true if OptInt16 was set.
func (o OptInt16) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt16) Reset() {
	var v int16
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt16) SetTo(v int16) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt16) Get() (v int16, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt16) Or(d int16) int16 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt8 returns new OptInt8 with value set to v.
func NewOptInt8(v int8) OptInt8 {
	return OptInt8{
		Value: v,
		Set:   true,
	}
}

// OptInt8 is optional int8.
type OptInt8 struct {
	Value int8
	Set   bool
}

// IsSet returns true if OptInt8 was set.
func (o OptInt8) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt8) Reset() {
	var v int8
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt8) SetTo(v int8) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt8) Get() (v int8, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt8) Or(d int8) int8 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt64Array returns new OptNilInt64Array with value set to v.
func NewOptNilInt64Array(v []int64) OptNilInt64Array {
	return OptNilInt64Array{
		Value: v,
		Set:   true,
	}
}

// OptNilInt64Array is optional nullable []int64.
type OptNilInt64Array struct {
	Value []int64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt64Array was set.
func (o OptNilInt64Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt64Array) Reset() {
	var v []int64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt64Array) SetTo(v []int64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt64Array) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt64Array) SetToNull() {
	o.Set = true
	o.Null = true
	var v []int64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt64Array) Get() (v []int64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt64Array) Or(d []int64) []int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzAttributeSearchResponseRawData returns new OptNilSzAttributeSearchResponseRawData with value set to v.
func NewOptNilSzAttributeSearchResponseRawData(v SzAttributeSearchResponseRawData) OptNilSzAttributeSearchResponseRawData {
	return OptNilSzAttributeSearchResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzAttributeSearchResponseRawData is optional nullable SzAttributeSearchResponseRawData.
type OptNilSzAttributeSearchResponseRawData struct {
	Value SzAttributeSearchResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzAttributeSearchResponseRawData was set.
func (o OptNilSzAttributeSearchResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzAttributeSearchResponseRawData) Reset() {
	var v SzAttributeSearchResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzAttributeSearchResponseRawData) SetTo(v SzAttributeSearchResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzAttributeSearchResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzAttributeSearchResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzAttributeSearchResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzAttributeSearchResponseRawData) Get() (v SzAttributeSearchResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzAttributeSearchResponseRawData) Or(d SzAttributeSearchResponseRawData) SzAttributeSearchResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzAttributeSearchResultFeatureScores returns new OptNilSzAttributeSearchResultFeatureScores with value set to v.
func NewOptNilSzAttributeSearchResultFeatureScores(v SzAttributeSearchResultFeatureScores) OptNilSzAttributeSearchResultFeatureScores {
	return OptNilSzAttributeSearchResultFeatureScores{
		Value: v,
		Set:   true,
	}
}

// OptNilSzAttributeSearchResultFeatureScores is optional nullable SzAttributeSearchResultFeatureScores.
type OptNilSzAttributeSearchResultFeatureScores struct {
	Value SzAttributeSearchResultFeatureScores
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzAttributeSearchResultFeatureScores was set.
func (o OptNilSzAttributeSearchResultFeatureScores) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzAttributeSearchResultFeatureScores) Reset() {
	var v SzAttributeSearchResultFeatureScores
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzAttributeSearchResultFeatureScores) SetTo(v SzAttributeSearchResultFeatureScores) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzAttributeSearchResultFeatureScores) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzAttributeSearchResultFeatureScores) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzAttributeSearchResultFeatureScores
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzAttributeSearchResultFeatureScores) Get() (v SzAttributeSearchResultFeatureScores, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzAttributeSearchResultFeatureScores) Or(d SzAttributeSearchResultFeatureScores) SzAttributeSearchResultFeatureScores {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzAttributeTypeResponseRawData returns new OptNilSzAttributeTypeResponseRawData with value set to v.
func NewOptNilSzAttributeTypeResponseRawData(v SzAttributeTypeResponseRawData) OptNilSzAttributeTypeResponseRawData {
	return OptNilSzAttributeTypeResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzAttributeTypeResponseRawData is optional nullable SzAttributeTypeResponseRawData.
type OptNilSzAttributeTypeResponseRawData struct {
	Value SzAttributeTypeResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzAttributeTypeResponseRawData was set.
func (o OptNilSzAttributeTypeResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzAttributeTypeResponseRawData) Reset() {
	var v SzAttributeTypeResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzAttributeTypeResponseRawData) SetTo(v SzAttributeTypeResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzAttributeTypeResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzAttributeTypeResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzAttributeTypeResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzAttributeTypeResponseRawData) Get() (v SzAttributeTypeResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzAttributeTypeResponseRawData) Or(d SzAttributeTypeResponseRawData) SzAttributeTypeResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzAttributeTypesResponseRawData returns new OptNilSzAttributeTypesResponseRawData with value set to v.
func NewOptNilSzAttributeTypesResponseRawData(v SzAttributeTypesResponseRawData) OptNilSzAttributeTypesResponseRawData {
	return OptNilSzAttributeTypesResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzAttributeTypesResponseRawData is optional nullable SzAttributeTypesResponseRawData.
type OptNilSzAttributeTypesResponseRawData struct {
	Value SzAttributeTypesResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzAttributeTypesResponseRawData was set.
func (o OptNilSzAttributeTypesResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzAttributeTypesResponseRawData) Reset() {
	var v SzAttributeTypesResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzAttributeTypesResponseRawData) SetTo(v SzAttributeTypesResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzAttributeTypesResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzAttributeTypesResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzAttributeTypesResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzAttributeTypesResponseRawData) Get() (v SzAttributeTypesResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzAttributeTypesResponseRawData) Or(d SzAttributeTypesResponseRawData) SzAttributeTypesResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzDataSourceResponseRawData returns new OptNilSzDataSourceResponseRawData with value set to v.
func NewOptNilSzDataSourceResponseRawData(v SzDataSourceResponseRawData) OptNilSzDataSourceResponseRawData {
	return OptNilSzDataSourceResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzDataSourceResponseRawData is optional nullable SzDataSourceResponseRawData.
type OptNilSzDataSourceResponseRawData struct {
	Value SzDataSourceResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzDataSourceResponseRawData was set.
func (o OptNilSzDataSourceResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzDataSourceResponseRawData) Reset() {
	var v SzDataSourceResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzDataSourceResponseRawData) SetTo(v SzDataSourceResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzDataSourceResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzDataSourceResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzDataSourceResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzDataSourceResponseRawData) Get() (v SzDataSourceResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzDataSourceResponseRawData) Or(d SzDataSourceResponseRawData) SzDataSourceResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzDataSourcesResponseRawData returns new OptNilSzDataSourcesResponseRawData with value set to v.
func NewOptNilSzDataSourcesResponseRawData(v SzDataSourcesResponseRawData) OptNilSzDataSourcesResponseRawData {
	return OptNilSzDataSourcesResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzDataSourcesResponseRawData is optional nullable SzDataSourcesResponseRawData.
type OptNilSzDataSourcesResponseRawData struct {
	Value SzDataSourcesResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzDataSourcesResponseRawData was set.
func (o OptNilSzDataSourcesResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzDataSourcesResponseRawData) Reset() {
	var v SzDataSourcesResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzDataSourcesResponseRawData) SetTo(v SzDataSourcesResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzDataSourcesResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzDataSourcesResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzDataSourcesResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzDataSourcesResponseRawData) Get() (v SzDataSourcesResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzDataSourcesResponseRawData) Or(d SzDataSourcesResponseRawData) SzDataSourcesResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzDeleteRecordResponseRawData returns new OptNilSzDeleteRecordResponseRawData with value set to v.
func NewOptNilSzDeleteRecordResponseRawData(v SzDeleteRecordResponseRawData) OptNilSzDeleteRecordResponseRawData {
	return OptNilSzDeleteRecordResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzDeleteRecordResponseRawData is optional nullable SzDeleteRecordResponseRawData.
type OptNilSzDeleteRecordResponseRawData struct {
	Value SzDeleteRecordResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzDeleteRecordResponseRawData was set.
func (o OptNilSzDeleteRecordResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzDeleteRecordResponseRawData) Reset() {
	var v SzDeleteRecordResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzDeleteRecordResponseRawData) SetTo(v SzDeleteRecordResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzDeleteRecordResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzDeleteRecordResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzDeleteRecordResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzDeleteRecordResponseRawData) Get() (v SzDeleteRecordResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzDeleteRecordResponseRawData) Or(d SzDeleteRecordResponseRawData) SzDeleteRecordResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzDisclosedRelationArray returns new OptNilSzDisclosedRelationArray with value set to v.
func NewOptNilSzDisclosedRelationArray(v []SzDisclosedRelation) OptNilSzDisclosedRelationArray {
	return OptNilSzDisclosedRelationArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSzDisclosedRelationArray is optional nullable []SzDisclosedRelation.
type OptNilSzDisclosedRelationArray struct {
	Value []SzDisclosedRelation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzDisclosedRelationArray was set.
func (o OptNilSzDisclosedRelationArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzDisclosedRelationArray) Reset() {
	var v []SzDisclosedRelation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzDisclosedRelationArray) SetTo(v []SzDisclosedRelation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzDisclosedRelationArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzDisclosedRelationArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []SzDisclosedRelation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzDisclosedRelationArray) Get() (v []SzDisclosedRelation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzDisclosedRelationArray) Or(d []SzDisclosedRelation) []SzDisclosedRelation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzEntityNetworkResponseRawData returns new OptNilSzEntityNetworkResponseRawData with value set to v.
func NewOptNilSzEntityNetworkResponseRawData(v SzEntityNetworkResponseRawData) OptNilSzEntityNetworkResponseRawData {
	return OptNilSzEntityNetworkResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzEntityNetworkResponseRawData is optional nullable SzEntityNetworkResponseRawData.
type OptNilSzEntityNetworkResponseRawData struct {
	Value SzEntityNetworkResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzEntityNetworkResponseRawData was set.
func (o OptNilSzEntityNetworkResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzEntityNetworkResponseRawData) Reset() {
	var v SzEntityNetworkResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzEntityNetworkResponseRawData) SetTo(v SzEntityNetworkResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzEntityNetworkResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzEntityNetworkResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzEntityNetworkResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzEntityNetworkResponseRawData) Get() (v SzEntityNetworkResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzEntityNetworkResponseRawData) Or(d SzEntityNetworkResponseRawData) SzEntityNetworkResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzEntityPathResponseRawData returns new OptNilSzEntityPathResponseRawData with value set to v.
func NewOptNilSzEntityPathResponseRawData(v SzEntityPathResponseRawData) OptNilSzEntityPathResponseRawData {
	return OptNilSzEntityPathResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzEntityPathResponseRawData is optional nullable SzEntityPathResponseRawData.
type OptNilSzEntityPathResponseRawData struct {
	Value SzEntityPathResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzEntityPathResponseRawData was set.
func (o OptNilSzEntityPathResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzEntityPathResponseRawData) Reset() {
	var v SzEntityPathResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzEntityPathResponseRawData) SetTo(v SzEntityPathResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzEntityPathResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzEntityPathResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzEntityPathResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzEntityPathResponseRawData) Get() (v SzEntityPathResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzEntityPathResponseRawData) Or(d SzEntityPathResponseRawData) SzEntityPathResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzEntityResponseRawData returns new OptNilSzEntityResponseRawData with value set to v.
func NewOptNilSzEntityResponseRawData(v SzEntityResponseRawData) OptNilSzEntityResponseRawData {
	return OptNilSzEntityResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzEntityResponseRawData is optional nullable SzEntityResponseRawData.
type OptNilSzEntityResponseRawData struct {
	Value SzEntityResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzEntityResponseRawData was set.
func (o OptNilSzEntityResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzEntityResponseRawData) Reset() {
	var v SzEntityResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzEntityResponseRawData) SetTo(v SzEntityResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzEntityResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzEntityResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzEntityResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzEntityResponseRawData) Get() (v SzEntityResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzEntityResponseRawData) Or(d SzEntityResponseRawData) SzEntityResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzFeatureReferenceArray returns new OptNilSzFeatureReferenceArray with value set to v.
func NewOptNilSzFeatureReferenceArray(v []SzFeatureReference) OptNilSzFeatureReferenceArray {
	return OptNilSzFeatureReferenceArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSzFeatureReferenceArray is optional nullable []SzFeatureReference.
type OptNilSzFeatureReferenceArray struct {
	Value []SzFeatureReference
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzFeatureReferenceArray was set.
func (o OptNilSzFeatureReferenceArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzFeatureReferenceArray) Reset() {
	var v []SzFeatureReference
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzFeatureReferenceArray) SetTo(v []SzFeatureReference) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzFeatureReferenceArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzFeatureReferenceArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []SzFeatureReference
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzFeatureReferenceArray) Get() (v []SzFeatureReference, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzFeatureReferenceArray) Or(d []SzFeatureReference) []SzFeatureReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzHowEntityResponseRawData returns new OptNilSzHowEntityResponseRawData with value set to v.
func NewOptNilSzHowEntityResponseRawData(v SzHowEntityResponseRawData) OptNilSzHowEntityResponseRawData {
	return OptNilSzHowEntityResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzHowEntityResponseRawData is optional nullable SzHowEntityResponseRawData.
type OptNilSzHowEntityResponseRawData struct {
	Value SzHowEntityResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzHowEntityResponseRawData was set.
func (o OptNilSzHowEntityResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzHowEntityResponseRawData) Reset() {
	var v SzHowEntityResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzHowEntityResponseRawData) SetTo(v SzHowEntityResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzHowEntityResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzHowEntityResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzHowEntityResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzHowEntityResponseRawData) Get() (v SzHowEntityResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzHowEntityResponseRawData) Or(d SzHowEntityResponseRawData) SzHowEntityResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzHowMatchInfoFeatureScores returns new OptNilSzHowMatchInfoFeatureScores with value set to v.
func NewOptNilSzHowMatchInfoFeatureScores(v SzHowMatchInfoFeatureScores) OptNilSzHowMatchInfoFeatureScores {
	return OptNilSzHowMatchInfoFeatureScores{
		Value: v,
		Set:   true,
	}
}

// OptNilSzHowMatchInfoFeatureScores is optional nullable SzHowMatchInfoFeatureScores.
type OptNilSzHowMatchInfoFeatureScores struct {
	Value SzHowMatchInfoFeatureScores
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzHowMatchInfoFeatureScores was set.
func (o OptNilSzHowMatchInfoFeatureScores) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzHowMatchInfoFeatureScores) Reset() {
	var v SzHowMatchInfoFeatureScores
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzHowMatchInfoFeatureScores) SetTo(v SzHowMatchInfoFeatureScores) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzHowMatchInfoFeatureScores) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzHowMatchInfoFeatureScores) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzHowMatchInfoFeatureScores
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzHowMatchInfoFeatureScores) Get() (v SzHowMatchInfoFeatureScores, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzHowMatchInfoFeatureScores) Or(d SzHowMatchInfoFeatureScores) SzHowMatchInfoFeatureScores {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzLicenseResponseRawData returns new OptNilSzLicenseResponseRawData with value set to v.
func NewOptNilSzLicenseResponseRawData(v SzLicenseResponseRawData) OptNilSzLicenseResponseRawData {
	return OptNilSzLicenseResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzLicenseResponseRawData is optional nullable SzLicenseResponseRawData.
type OptNilSzLicenseResponseRawData struct {
	Value SzLicenseResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzLicenseResponseRawData was set.
func (o OptNilSzLicenseResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzLicenseResponseRawData) Reset() {
	var v SzLicenseResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzLicenseResponseRawData) SetTo(v SzLicenseResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzLicenseResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzLicenseResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzLicenseResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzLicenseResponseRawData) Get() (v SzLicenseResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzLicenseResponseRawData) Or(d SzLicenseResponseRawData) SzLicenseResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzLoadRecordResponseRawData returns new OptNilSzLoadRecordResponseRawData with value set to v.
func NewOptNilSzLoadRecordResponseRawData(v SzLoadRecordResponseRawData) OptNilSzLoadRecordResponseRawData {
	return OptNilSzLoadRecordResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzLoadRecordResponseRawData is optional nullable SzLoadRecordResponseRawData.
type OptNilSzLoadRecordResponseRawData struct {
	Value SzLoadRecordResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzLoadRecordResponseRawData was set.
func (o OptNilSzLoadRecordResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzLoadRecordResponseRawData) Reset() {
	var v SzLoadRecordResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzLoadRecordResponseRawData) SetTo(v SzLoadRecordResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzLoadRecordResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzLoadRecordResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzLoadRecordResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzLoadRecordResponseRawData) Get() (v SzLoadRecordResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzLoadRecordResponseRawData) Or(d SzLoadRecordResponseRawData) SzLoadRecordResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzMetaTimings returns new OptNilSzMetaTimings with value set to v.
func NewOptNilSzMetaTimings(v SzMetaTimings) OptNilSzMetaTimings {
	return OptNilSzMetaTimings{
		Value: v,
		Set:   true,
	}
}

// OptNilSzMetaTimings is optional nullable SzMetaTimings.
type OptNilSzMetaTimings struct {
	Value SzMetaTimings
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzMetaTimings was set.
func (o OptNilSzMetaTimings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzMetaTimings) Reset() {
	var v SzMetaTimings
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzMetaTimings) SetTo(v SzMetaTimings) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzMetaTimings) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzMetaTimings) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzMetaTimings
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzMetaTimings) Get() (v SzMetaTimings, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzMetaTimings) Or(d SzMetaTimings) SzMetaTimings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzRecordResponseRawData returns new OptNilSzRecordResponseRawData with value set to v.
func NewOptNilSzRecordResponseRawData(v SzRecordResponseRawData) OptNilSzRecordResponseRawData {
	return OptNilSzRecordResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzRecordResponseRawData is optional nullable SzRecordResponseRawData.
type OptNilSzRecordResponseRawData struct {
	Value SzRecordResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzRecordResponseRawData was set.
func (o OptNilSzRecordResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzRecordResponseRawData) Reset() {
	var v SzRecordResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzRecordResponseRawData) SetTo(v SzRecordResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzRecordResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzRecordResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzRecordResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzRecordResponseRawData) Get() (v SzRecordResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzRecordResponseRawData) Or(d SzRecordResponseRawData) SzRecordResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzReevaluateResponseRawData returns new OptNilSzReevaluateResponseRawData with value set to v.
func NewOptNilSzReevaluateResponseRawData(v SzReevaluateResponseRawData) OptNilSzReevaluateResponseRawData {
	return OptNilSzReevaluateResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzReevaluateResponseRawData is optional nullable SzReevaluateResponseRawData.
type OptNilSzReevaluateResponseRawData struct {
	Value SzReevaluateResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzReevaluateResponseRawData was set.
func (o OptNilSzReevaluateResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzReevaluateResponseRawData) Reset() {
	var v SzReevaluateResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzReevaluateResponseRawData) SetTo(v SzReevaluateResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzReevaluateResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzReevaluateResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzReevaluateResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzReevaluateResponseRawData) Get() (v SzReevaluateResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzReevaluateResponseRawData) Or(d SzReevaluateResponseRawData) SzReevaluateResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzResponseWithRawDataRawData returns new OptNilSzResponseWithRawDataRawData with value set to v.
func NewOptNilSzResponseWithRawDataRawData(v SzResponseWithRawDataRawData) OptNilSzResponseWithRawDataRawData {
	return OptNilSzResponseWithRawDataRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzResponseWithRawDataRawData is optional nullable SzResponseWithRawDataRawData.
type OptNilSzResponseWithRawDataRawData struct {
	Value SzResponseWithRawDataRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzResponseWithRawDataRawData was set.
func (o OptNilSzResponseWithRawDataRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzResponseWithRawDataRawData) Reset() {
	var v SzResponseWithRawDataRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzResponseWithRawDataRawData) SetTo(v SzResponseWithRawDataRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzResponseWithRawDataRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzResponseWithRawDataRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzResponseWithRawDataRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzResponseWithRawDataRawData) Get() (v SzResponseWithRawDataRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzResponseWithRawDataRawData) Or(d SzResponseWithRawDataRawData) SzResponseWithRawDataRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzVersionResponseRawData returns new OptNilSzVersionResponseRawData with value set to v.
func NewOptNilSzVersionResponseRawData(v SzVersionResponseRawData) OptNilSzVersionResponseRawData {
	return OptNilSzVersionResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzVersionResponseRawData is optional nullable SzVersionResponseRawData.
type OptNilSzVersionResponseRawData struct {
	Value SzVersionResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzVersionResponseRawData was set.
func (o OptNilSzVersionResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzVersionResponseRawData) Reset() {
	var v SzVersionResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzVersionResponseRawData) SetTo(v SzVersionResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzVersionResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzVersionResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzVersionResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzVersionResponseRawData) Get() (v SzVersionResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzVersionResponseRawData) Or(d SzVersionResponseRawData) SzVersionResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzVirtualEntityResponseRawData returns new OptNilSzVirtualEntityResponseRawData with value set to v.
func NewOptNilSzVirtualEntityResponseRawData(v SzVirtualEntityResponseRawData) OptNilSzVirtualEntityResponseRawData {
	return OptNilSzVirtualEntityResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzVirtualEntityResponseRawData is optional nullable SzVirtualEntityResponseRawData.
type OptNilSzVirtualEntityResponseRawData struct {
	Value SzVirtualEntityResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzVirtualEntityResponseRawData was set.
func (o OptNilSzVirtualEntityResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzVirtualEntityResponseRawData) Reset() {
	var v SzVirtualEntityResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzVirtualEntityResponseRawData) SetTo(v SzVirtualEntityResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzVirtualEntityResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzVirtualEntityResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzVirtualEntityResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzVirtualEntityResponseRawData) Get() (v SzVirtualEntityResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzVirtualEntityResponseRawData) Or(d SzVirtualEntityResponseRawData) SzVirtualEntityResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzWhyEntitiesResponseRawData returns new OptNilSzWhyEntitiesResponseRawData with value set to v.
func NewOptNilSzWhyEntitiesResponseRawData(v SzWhyEntitiesResponseRawData) OptNilSzWhyEntitiesResponseRawData {
	return OptNilSzWhyEntitiesResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzWhyEntitiesResponseRawData is optional nullable SzWhyEntitiesResponseRawData.
type OptNilSzWhyEntitiesResponseRawData struct {
	Value SzWhyEntitiesResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzWhyEntitiesResponseRawData was set.
func (o OptNilSzWhyEntitiesResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzWhyEntitiesResponseRawData) Reset() {
	var v SzWhyEntitiesResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzWhyEntitiesResponseRawData) SetTo(v SzWhyEntitiesResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzWhyEntitiesResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzWhyEntitiesResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzWhyEntitiesResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzWhyEntitiesResponseRawData) Get() (v SzWhyEntitiesResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzWhyEntitiesResponseRawData) Or(d SzWhyEntitiesResponseRawData) SzWhyEntitiesResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzWhyEntityResponseRawData returns new OptNilSzWhyEntityResponseRawData with value set to v.
func NewOptNilSzWhyEntityResponseRawData(v SzWhyEntityResponseRawData) OptNilSzWhyEntityResponseRawData {
	return OptNilSzWhyEntityResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzWhyEntityResponseRawData is optional nullable SzWhyEntityResponseRawData.
type OptNilSzWhyEntityResponseRawData struct {
	Value SzWhyEntityResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzWhyEntityResponseRawData was set.
func (o OptNilSzWhyEntityResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzWhyEntityResponseRawData) Reset() {
	var v SzWhyEntityResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzWhyEntityResponseRawData) SetTo(v SzWhyEntityResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzWhyEntityResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzWhyEntityResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzWhyEntityResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzWhyEntityResponseRawData) Get() (v SzWhyEntityResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzWhyEntityResponseRawData) Or(d SzWhyEntityResponseRawData) SzWhyEntityResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzWhyMatchInfoCandidateKeys returns new OptNilSzWhyMatchInfoCandidateKeys with value set to v.
func NewOptNilSzWhyMatchInfoCandidateKeys(v SzWhyMatchInfoCandidateKeys) OptNilSzWhyMatchInfoCandidateKeys {
	return OptNilSzWhyMatchInfoCandidateKeys{
		Value: v,
		Set:   true,
	}
}

// OptNilSzWhyMatchInfoCandidateKeys is optional nullable SzWhyMatchInfoCandidateKeys.
type OptNilSzWhyMatchInfoCandidateKeys struct {
	Value SzWhyMatchInfoCandidateKeys
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzWhyMatchInfoCandidateKeys was set.
func (o OptNilSzWhyMatchInfoCandidateKeys) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzWhyMatchInfoCandidateKeys) Reset() {
	var v SzWhyMatchInfoCandidateKeys
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzWhyMatchInfoCandidateKeys) SetTo(v SzWhyMatchInfoCandidateKeys) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzWhyMatchInfoCandidateKeys) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzWhyMatchInfoCandidateKeys) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzWhyMatchInfoCandidateKeys
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzWhyMatchInfoCandidateKeys) Get() (v SzWhyMatchInfoCandidateKeys, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzWhyMatchInfoCandidateKeys) Or(d SzWhyMatchInfoCandidateKeys) SzWhyMatchInfoCandidateKeys {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzWhyMatchInfoFeatureScores returns new OptNilSzWhyMatchInfoFeatureScores with value set to v.
func NewOptNilSzWhyMatchInfoFeatureScores(v SzWhyMatchInfoFeatureScores) OptNilSzWhyMatchInfoFeatureScores {
	return OptNilSzWhyMatchInfoFeatureScores{
		Value: v,
		Set:   true,
	}
}

// OptNilSzWhyMatchInfoFeatureScores is optional nullable SzWhyMatchInfoFeatureScores.
type OptNilSzWhyMatchInfoFeatureScores struct {
	Value SzWhyMatchInfoFeatureScores
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzWhyMatchInfoFeatureScores was set.
func (o OptNilSzWhyMatchInfoFeatureScores) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzWhyMatchInfoFeatureScores) Reset() {
	var v SzWhyMatchInfoFeatureScores
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzWhyMatchInfoFeatureScores) SetTo(v SzWhyMatchInfoFeatureScores) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzWhyMatchInfoFeatureScores) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzWhyMatchInfoFeatureScores) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzWhyMatchInfoFeatureScores
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzWhyMatchInfoFeatureScores) Get() (v SzWhyMatchInfoFeatureScores, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzWhyMatchInfoFeatureScores) Or(d SzWhyMatchInfoFeatureScores) SzWhyMatchInfoFeatureScores {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSzWhyRecordsResponseRawData returns new OptNilSzWhyRecordsResponseRawData with value set to v.
func NewOptNilSzWhyRecordsResponseRawData(v SzWhyRecordsResponseRawData) OptNilSzWhyRecordsResponseRawData {
	return OptNilSzWhyRecordsResponseRawData{
		Value: v,
		Set:   true,
	}
}

// OptNilSzWhyRecordsResponseRawData is optional nullable SzWhyRecordsResponseRawData.
type OptNilSzWhyRecordsResponseRawData struct {
	Value SzWhyRecordsResponseRawData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSzWhyRecordsResponseRawData was set.
func (o OptNilSzWhyRecordsResponseRawData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSzWhyRecordsResponseRawData) Reset() {
	var v SzWhyRecordsResponseRawData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSzWhyRecordsResponseRawData) SetTo(v SzWhyRecordsResponseRawData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSzWhyRecordsResponseRawData) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSzWhyRecordsResponseRawData) SetToNull() {
	o.Set = true
	o.Null = true
	var v SzWhyRecordsResponseRawData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSzWhyRecordsResponseRawData) Get() (v SzWhyRecordsResponseRawData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSzWhyRecordsResponseRawData) Or(d SzWhyRecordsResponseRawData) SzWhyRecordsResponseRawData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeClass returns new OptSzAttributeClass with value set to v.
func NewOptSzAttributeClass(v SzAttributeClass) OptSzAttributeClass {
	return OptSzAttributeClass{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeClass is optional SzAttributeClass.
type OptSzAttributeClass struct {
	Value SzAttributeClass
	Set   bool
}

// IsSet returns true if OptSzAttributeClass was set.
func (o OptSzAttributeClass) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeClass) Reset() {
	var v SzAttributeClass
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeClass) SetTo(v SzAttributeClass) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeClass) Get() (v SzAttributeClass, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeClass) Or(d SzAttributeClass) SzAttributeClass {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeNecessity returns new OptSzAttributeNecessity with value set to v.
func NewOptSzAttributeNecessity(v SzAttributeNecessity) OptSzAttributeNecessity {
	return OptSzAttributeNecessity{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeNecessity is optional SzAttributeNecessity.
type OptSzAttributeNecessity struct {
	Value SzAttributeNecessity
	Set   bool
}

// IsSet returns true if OptSzAttributeNecessity was set.
func (o OptSzAttributeNecessity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeNecessity) Reset() {
	var v SzAttributeNecessity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeNecessity) SetTo(v SzAttributeNecessity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeNecessity) Get() (v SzAttributeNecessity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeNecessity) Or(d SzAttributeNecessity) SzAttributeNecessity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeSearchResponseData returns new OptSzAttributeSearchResponseData with value set to v.
func NewOptSzAttributeSearchResponseData(v SzAttributeSearchResponseData) OptSzAttributeSearchResponseData {
	return OptSzAttributeSearchResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeSearchResponseData is optional SzAttributeSearchResponseData.
type OptSzAttributeSearchResponseData struct {
	Value SzAttributeSearchResponseData
	Set   bool
}

// IsSet returns true if OptSzAttributeSearchResponseData was set.
func (o OptSzAttributeSearchResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeSearchResponseData) Reset() {
	var v SzAttributeSearchResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeSearchResponseData) SetTo(v SzAttributeSearchResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeSearchResponseData) Get() (v SzAttributeSearchResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeSearchResponseData) Or(d SzAttributeSearchResponseData) SzAttributeSearchResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeSearchResultFeatures returns new OptSzAttributeSearchResultFeatures with value set to v.
func NewOptSzAttributeSearchResultFeatures(v SzAttributeSearchResultFeatures) OptSzAttributeSearchResultFeatures {
	return OptSzAttributeSearchResultFeatures{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeSearchResultFeatures is optional SzAttributeSearchResultFeatures.
type OptSzAttributeSearchResultFeatures struct {
	Value SzAttributeSearchResultFeatures
	Set   bool
}

// IsSet returns true if OptSzAttributeSearchResultFeatures was set.
func (o OptSzAttributeSearchResultFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeSearchResultFeatures) Reset() {
	var v SzAttributeSearchResultFeatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeSearchResultFeatures) SetTo(v SzAttributeSearchResultFeatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeSearchResultFeatures) Get() (v SzAttributeSearchResultFeatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeSearchResultFeatures) Or(d SzAttributeSearchResultFeatures) SzAttributeSearchResultFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeSearchResultType returns new OptSzAttributeSearchResultType with value set to v.
func NewOptSzAttributeSearchResultType(v SzAttributeSearchResultType) OptSzAttributeSearchResultType {
	return OptSzAttributeSearchResultType{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeSearchResultType is optional SzAttributeSearchResultType.
type OptSzAttributeSearchResultType struct {
	Value SzAttributeSearchResultType
	Set   bool
}

// IsSet returns true if OptSzAttributeSearchResultType was set.
func (o OptSzAttributeSearchResultType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeSearchResultType) Reset() {
	var v SzAttributeSearchResultType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeSearchResultType) SetTo(v SzAttributeSearchResultType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeSearchResultType) Get() (v SzAttributeSearchResultType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeSearchResultType) Or(d SzAttributeSearchResultType) SzAttributeSearchResultType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeType returns new OptSzAttributeType with value set to v.
func NewOptSzAttributeType(v SzAttributeType) OptSzAttributeType {
	return OptSzAttributeType{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeType is optional SzAttributeType.
type OptSzAttributeType struct {
	Value SzAttributeType
	Set   bool
}

// IsSet returns true if OptSzAttributeType was set.
func (o OptSzAttributeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeType) Reset() {
	var v SzAttributeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeType) SetTo(v SzAttributeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeType) Get() (v SzAttributeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeType) Or(d SzAttributeType) SzAttributeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeTypeResponseData returns new OptSzAttributeTypeResponseData with value set to v.
func NewOptSzAttributeTypeResponseData(v SzAttributeTypeResponseData) OptSzAttributeTypeResponseData {
	return OptSzAttributeTypeResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeTypeResponseData is optional SzAttributeTypeResponseData.
type OptSzAttributeTypeResponseData struct {
	Value SzAttributeTypeResponseData
	Set   bool
}

// IsSet returns true if OptSzAttributeTypeResponseData was set.
func (o OptSzAttributeTypeResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeTypeResponseData) Reset() {
	var v SzAttributeTypeResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeTypeResponseData) SetTo(v SzAttributeTypeResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeTypeResponseData) Get() (v SzAttributeTypeResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeTypeResponseData) Or(d SzAttributeTypeResponseData) SzAttributeTypeResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzAttributeTypesResponseData returns new OptSzAttributeTypesResponseData with value set to v.
func NewOptSzAttributeTypesResponseData(v SzAttributeTypesResponseData) OptSzAttributeTypesResponseData {
	return OptSzAttributeTypesResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzAttributeTypesResponseData is optional SzAttributeTypesResponseData.
type OptSzAttributeTypesResponseData struct {
	Value SzAttributeTypesResponseData
	Set   bool
}

// IsSet returns true if OptSzAttributeTypesResponseData was set.
func (o OptSzAttributeTypesResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzAttributeTypesResponseData) Reset() {
	var v SzAttributeTypesResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzAttributeTypesResponseData) SetTo(v SzAttributeTypesResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzAttributeTypesResponseData) Get() (v SzAttributeTypesResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzAttributeTypesResponseData) Or(d SzAttributeTypesResponseData) SzAttributeTypesResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzBulkDataAnalysis returns new OptSzBulkDataAnalysis with value set to v.
func NewOptSzBulkDataAnalysis(v SzBulkDataAnalysis) OptSzBulkDataAnalysis {
	return OptSzBulkDataAnalysis{
		Value: v,
		Set:   true,
	}
}

// OptSzBulkDataAnalysis is optional SzBulkDataAnalysis.
type OptSzBulkDataAnalysis struct {
	Value SzBulkDataAnalysis
	Set   bool
}

// IsSet returns true if OptSzBulkDataAnalysis was set.
func (o OptSzBulkDataAnalysis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzBulkDataAnalysis) Reset() {
	var v SzBulkDataAnalysis
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzBulkDataAnalysis) SetTo(v SzBulkDataAnalysis) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzBulkDataAnalysis) Get() (v SzBulkDataAnalysis, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzBulkDataAnalysis) Or(d SzBulkDataAnalysis) SzBulkDataAnalysis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzBulkDataStatus returns new OptSzBulkDataStatus with value set to v.
func NewOptSzBulkDataStatus(v SzBulkDataStatus) OptSzBulkDataStatus {
	return OptSzBulkDataStatus{
		Value: v,
		Set:   true,
	}
}

// OptSzBulkDataStatus is optional SzBulkDataStatus.
type OptSzBulkDataStatus struct {
	Value SzBulkDataStatus
	Set   bool
}

// IsSet returns true if OptSzBulkDataStatus was set.
func (o OptSzBulkDataStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzBulkDataStatus) Reset() {
	var v SzBulkDataStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzBulkDataStatus) SetTo(v SzBulkDataStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzBulkDataStatus) Get() (v SzBulkDataStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzBulkDataStatus) Or(d SzBulkDataStatus) SzBulkDataStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzBulkLoadResult returns new OptSzBulkLoadResult with value set to v.
func NewOptSzBulkLoadResult(v SzBulkLoadResult) OptSzBulkLoadResult {
	return OptSzBulkLoadResult{
		Value: v,
		Set:   true,
	}
}

// OptSzBulkLoadResult is optional SzBulkLoadResult.
type OptSzBulkLoadResult struct {
	Value SzBulkLoadResult
	Set   bool
}

// IsSet returns true if OptSzBulkLoadResult was set.
func (o OptSzBulkLoadResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzBulkLoadResult) Reset() {
	var v SzBulkLoadResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzBulkLoadResult) SetTo(v SzBulkLoadResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzBulkLoadResult) Get() (v SzBulkLoadResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzBulkLoadResult) Or(d SzBulkLoadResult) SzBulkLoadResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDataSource returns new OptSzDataSource with value set to v.
func NewOptSzDataSource(v SzDataSource) OptSzDataSource {
	return OptSzDataSource{
		Value: v,
		Set:   true,
	}
}

// OptSzDataSource is optional SzDataSource.
type OptSzDataSource struct {
	Value SzDataSource
	Set   bool
}

// IsSet returns true if OptSzDataSource was set.
func (o OptSzDataSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDataSource) Reset() {
	var v SzDataSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDataSource) SetTo(v SzDataSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDataSource) Get() (v SzDataSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDataSource) Or(d SzDataSource) SzDataSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDataSourceResponseData returns new OptSzDataSourceResponseData with value set to v.
func NewOptSzDataSourceResponseData(v SzDataSourceResponseData) OptSzDataSourceResponseData {
	return OptSzDataSourceResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzDataSourceResponseData is optional SzDataSourceResponseData.
type OptSzDataSourceResponseData struct {
	Value SzDataSourceResponseData
	Set   bool
}

// IsSet returns true if OptSzDataSourceResponseData was set.
func (o OptSzDataSourceResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDataSourceResponseData) Reset() {
	var v SzDataSourceResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDataSourceResponseData) SetTo(v SzDataSourceResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDataSourceResponseData) Get() (v SzDataSourceResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDataSourceResponseData) Or(d SzDataSourceResponseData) SzDataSourceResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDataSourcesResponseData returns new OptSzDataSourcesResponseData with value set to v.
func NewOptSzDataSourcesResponseData(v SzDataSourcesResponseData) OptSzDataSourcesResponseData {
	return OptSzDataSourcesResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzDataSourcesResponseData is optional SzDataSourcesResponseData.
type OptSzDataSourcesResponseData struct {
	Value SzDataSourcesResponseData
	Set   bool
}

// IsSet returns true if OptSzDataSourcesResponseData was set.
func (o OptSzDataSourcesResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDataSourcesResponseData) Reset() {
	var v SzDataSourcesResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDataSourcesResponseData) SetTo(v SzDataSourcesResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDataSourcesResponseData) Get() (v SzDataSourcesResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDataSourcesResponseData) Or(d SzDataSourcesResponseData) SzDataSourcesResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDataSourcesResponseDataDataSourceDetails returns new OptSzDataSourcesResponseDataDataSourceDetails with value set to v.
func NewOptSzDataSourcesResponseDataDataSourceDetails(v SzDataSourcesResponseDataDataSourceDetails) OptSzDataSourcesResponseDataDataSourceDetails {
	return OptSzDataSourcesResponseDataDataSourceDetails{
		Value: v,
		Set:   true,
	}
}

// OptSzDataSourcesResponseDataDataSourceDetails is optional SzDataSourcesResponseDataDataSourceDetails.
type OptSzDataSourcesResponseDataDataSourceDetails struct {
	Value SzDataSourcesResponseDataDataSourceDetails
	Set   bool
}

// IsSet returns true if OptSzDataSourcesResponseDataDataSourceDetails was set.
func (o OptSzDataSourcesResponseDataDataSourceDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDataSourcesResponseDataDataSourceDetails) Reset() {
	var v SzDataSourcesResponseDataDataSourceDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDataSourcesResponseDataDataSourceDetails) SetTo(v SzDataSourcesResponseDataDataSourceDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDataSourcesResponseDataDataSourceDetails) Get() (v SzDataSourcesResponseDataDataSourceDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDataSourcesResponseDataDataSourceDetails) Or(d SzDataSourcesResponseDataDataSourceDetails) SzDataSourcesResponseDataDataSourceDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDeleteRecordResponseData returns new OptSzDeleteRecordResponseData with value set to v.
func NewOptSzDeleteRecordResponseData(v SzDeleteRecordResponseData) OptSzDeleteRecordResponseData {
	return OptSzDeleteRecordResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzDeleteRecordResponseData is optional SzDeleteRecordResponseData.
type OptSzDeleteRecordResponseData struct {
	Value SzDeleteRecordResponseData
	Set   bool
}

// IsSet returns true if OptSzDeleteRecordResponseData was set.
func (o OptSzDeleteRecordResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDeleteRecordResponseData) Reset() {
	var v SzDeleteRecordResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDeleteRecordResponseData) SetTo(v SzDeleteRecordResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDeleteRecordResponseData) Get() (v SzDeleteRecordResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDeleteRecordResponseData) Or(d SzDeleteRecordResponseData) SzDeleteRecordResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzDetailLevel returns new OptSzDetailLevel with value set to v.
func NewOptSzDetailLevel(v SzDetailLevel) OptSzDetailLevel {
	return OptSzDetailLevel{
		Value: v,
		Set:   true,
	}
}

// OptSzDetailLevel is optional SzDetailLevel.
type OptSzDetailLevel struct {
	Value SzDetailLevel
	Set   bool
}

// IsSet returns true if OptSzDetailLevel was set.
func (o OptSzDetailLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzDetailLevel) Reset() {
	var v SzDetailLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzDetailLevel) SetTo(v SzDetailLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzDetailLevel) Get() (v SzDetailLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzDetailLevel) Or(d SzDetailLevel) SzDetailLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityData returns new OptSzEntityData with value set to v.
func NewOptSzEntityData(v SzEntityData) OptSzEntityData {
	return OptSzEntityData{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityData is optional SzEntityData.
type OptSzEntityData struct {
	Value SzEntityData
	Set   bool
}

// IsSet returns true if OptSzEntityData was set.
func (o OptSzEntityData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityData) Reset() {
	var v SzEntityData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityData) SetTo(v SzEntityData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityData) Get() (v SzEntityData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityData) Or(d SzEntityData) SzEntityData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityFeatureStatistics returns new OptSzEntityFeatureStatistics with value set to v.
func NewOptSzEntityFeatureStatistics(v SzEntityFeatureStatistics) OptSzEntityFeatureStatistics {
	return OptSzEntityFeatureStatistics{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityFeatureStatistics is optional SzEntityFeatureStatistics.
type OptSzEntityFeatureStatistics struct {
	Value SzEntityFeatureStatistics
	Set   bool
}

// IsSet returns true if OptSzEntityFeatureStatistics was set.
func (o OptSzEntityFeatureStatistics) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityFeatureStatistics) Reset() {
	var v SzEntityFeatureStatistics
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityFeatureStatistics) SetTo(v SzEntityFeatureStatistics) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityFeatureStatistics) Get() (v SzEntityFeatureStatistics, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityFeatureStatistics) Or(d SzEntityFeatureStatistics) SzEntityFeatureStatistics {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityNetworkData returns new OptSzEntityNetworkData with value set to v.
func NewOptSzEntityNetworkData(v SzEntityNetworkData) OptSzEntityNetworkData {
	return OptSzEntityNetworkData{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityNetworkData is optional SzEntityNetworkData.
type OptSzEntityNetworkData struct {
	Value SzEntityNetworkData
	Set   bool
}

// IsSet returns true if OptSzEntityNetworkData was set.
func (o OptSzEntityNetworkData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityNetworkData) Reset() {
	var v SzEntityNetworkData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityNetworkData) SetTo(v SzEntityNetworkData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityNetworkData) Get() (v SzEntityNetworkData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityNetworkData) Or(d SzEntityNetworkData) SzEntityNetworkData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityPath returns new OptSzEntityPath with value set to v.
func NewOptSzEntityPath(v SzEntityPath) OptSzEntityPath {
	return OptSzEntityPath{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityPath is optional SzEntityPath.
type OptSzEntityPath struct {
	Value SzEntityPath
	Set   bool
}

// IsSet returns true if OptSzEntityPath was set.
func (o OptSzEntityPath) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityPath) Reset() {
	var v SzEntityPath
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityPath) SetTo(v SzEntityPath) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityPath) Get() (v SzEntityPath, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityPath) Or(d SzEntityPath) SzEntityPath {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityPathData returns new OptSzEntityPathData with value set to v.
func NewOptSzEntityPathData(v SzEntityPathData) OptSzEntityPathData {
	return OptSzEntityPathData{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityPathData is optional SzEntityPathData.
type OptSzEntityPathData struct {
	Value SzEntityPathData
	Set   bool
}

// IsSet returns true if OptSzEntityPathData was set.
func (o OptSzEntityPathData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityPathData) Reset() {
	var v SzEntityPathData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityPathData) SetTo(v SzEntityPathData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityPathData) Get() (v SzEntityPathData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityPathData) Or(d SzEntityPathData) SzEntityPathData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityRecord returns new OptSzEntityRecord with value set to v.
func NewOptSzEntityRecord(v SzEntityRecord) OptSzEntityRecord {
	return OptSzEntityRecord{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityRecord is optional SzEntityRecord.
type OptSzEntityRecord struct {
	Value SzEntityRecord
	Set   bool
}

// IsSet returns true if OptSzEntityRecord was set.
func (o OptSzEntityRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityRecord) Reset() {
	var v SzEntityRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityRecord) SetTo(v SzEntityRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityRecord) Get() (v SzEntityRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityRecord) Or(d SzEntityRecord) SzEntityRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzEntityRecordOriginalSourceData returns new OptSzEntityRecordOriginalSourceData with value set to v.
func NewOptSzEntityRecordOriginalSourceData(v SzEntityRecordOriginalSourceData) OptSzEntityRecordOriginalSourceData {
	return OptSzEntityRecordOriginalSourceData{
		Value: v,
		Set:   true,
	}
}

// OptSzEntityRecordOriginalSourceData is optional SzEntityRecordOriginalSourceData.
type OptSzEntityRecordOriginalSourceData struct {
	Value SzEntityRecordOriginalSourceData
	Set   bool
}

// IsSet returns true if OptSzEntityRecordOriginalSourceData was set.
func (o OptSzEntityRecordOriginalSourceData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzEntityRecordOriginalSourceData) Reset() {
	var v SzEntityRecordOriginalSourceData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzEntityRecordOriginalSourceData) SetTo(v SzEntityRecordOriginalSourceData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzEntityRecordOriginalSourceData) Get() (v SzEntityRecordOriginalSourceData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzEntityRecordOriginalSourceData) Or(d SzEntityRecordOriginalSourceData) SzEntityRecordOriginalSourceData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzError returns new OptSzError with value set to v.
func NewOptSzError(v SzError) OptSzError {
	return OptSzError{
		Value: v,
		Set:   true,
	}
}

// OptSzError is optional SzError.
type OptSzError struct {
	Value SzError
	Set   bool
}

// IsSet returns true if OptSzError was set.
func (o OptSzError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzError) Reset() {
	var v SzError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzError) SetTo(v SzError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzError) Get() (v SzError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzError) Or(d SzError) SzError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzFeatureMode returns new OptSzFeatureMode with value set to v.
func NewOptSzFeatureMode(v SzFeatureMode) OptSzFeatureMode {
	return OptSzFeatureMode{
		Value: v,
		Set:   true,
	}
}

// OptSzFeatureMode is optional SzFeatureMode.
type OptSzFeatureMode struct {
	Value SzFeatureMode
	Set   bool
}

// IsSet returns true if OptSzFeatureMode was set.
func (o OptSzFeatureMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzFeatureMode) Reset() {
	var v SzFeatureMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzFeatureMode) SetTo(v SzFeatureMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzFeatureMode) Get() (v SzFeatureMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzFeatureMode) Or(d SzFeatureMode) SzFeatureMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzHowEntityResult returns new OptSzHowEntityResult with value set to v.
func NewOptSzHowEntityResult(v SzHowEntityResult) OptSzHowEntityResult {
	return OptSzHowEntityResult{
		Value: v,
		Set:   true,
	}
}

// OptSzHowEntityResult is optional SzHowEntityResult.
type OptSzHowEntityResult struct {
	Value SzHowEntityResult
	Set   bool
}

// IsSet returns true if OptSzHowEntityResult was set.
func (o OptSzHowEntityResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzHowEntityResult) Reset() {
	var v SzHowEntityResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzHowEntityResult) SetTo(v SzHowEntityResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzHowEntityResult) Get() (v SzHowEntityResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzHowEntityResult) Or(d SzHowEntityResult) SzHowEntityResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzHowEntityResultResolutionSteps returns new OptSzHowEntityResultResolutionSteps with value set to v.
func NewOptSzHowEntityResultResolutionSteps(v SzHowEntityResultResolutionSteps) OptSzHowEntityResultResolutionSteps {
	return OptSzHowEntityResultResolutionSteps{
		Value: v,
		Set:   true,
	}
}

// OptSzHowEntityResultResolutionSteps is optional SzHowEntityResultResolutionSteps.
type OptSzHowEntityResultResolutionSteps struct {
	Value SzHowEntityResultResolutionSteps
	Set   bool
}

// IsSet returns true if OptSzHowEntityResultResolutionSteps was set.
func (o OptSzHowEntityResultResolutionSteps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzHowEntityResultResolutionSteps) Reset() {
	var v SzHowEntityResultResolutionSteps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzHowEntityResultResolutionSteps) SetTo(v SzHowEntityResultResolutionSteps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzHowEntityResultResolutionSteps) Get() (v SzHowEntityResultResolutionSteps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzHowEntityResultResolutionSteps) Or(d SzHowEntityResultResolutionSteps) SzHowEntityResultResolutionSteps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzHowMatchInfo returns new OptSzHowMatchInfo with value set to v.
func NewOptSzHowMatchInfo(v SzHowMatchInfo) OptSzHowMatchInfo {
	return OptSzHowMatchInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzHowMatchInfo is optional SzHowMatchInfo.
type OptSzHowMatchInfo struct {
	Value SzHowMatchInfo
	Set   bool
}

// IsSet returns true if OptSzHowMatchInfo was set.
func (o OptSzHowMatchInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzHowMatchInfo) Reset() {
	var v SzHowMatchInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzHowMatchInfo) SetTo(v SzHowMatchInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzHowMatchInfo) Get() (v SzHowMatchInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzHowMatchInfo) Or(d SzHowMatchInfo) SzHowMatchInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzHttpMethod returns new OptSzHttpMethod with value set to v.
func NewOptSzHttpMethod(v SzHttpMethod) OptSzHttpMethod {
	return OptSzHttpMethod{
		Value: v,
		Set:   true,
	}
}

// OptSzHttpMethod is optional SzHttpMethod.
type OptSzHttpMethod struct {
	Value SzHttpMethod
	Set   bool
}

// IsSet returns true if OptSzHttpMethod was set.
func (o OptSzHttpMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzHttpMethod) Reset() {
	var v SzHttpMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzHttpMethod) SetTo(v SzHttpMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzHttpMethod) Get() (v SzHttpMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzHttpMethod) Or(d SzHttpMethod) SzHttpMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzLicenseInfo returns new OptSzLicenseInfo with value set to v.
func NewOptSzLicenseInfo(v SzLicenseInfo) OptSzLicenseInfo {
	return OptSzLicenseInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzLicenseInfo is optional SzLicenseInfo.
type OptSzLicenseInfo struct {
	Value SzLicenseInfo
	Set   bool
}

// IsSet returns true if OptSzLicenseInfo was set.
func (o OptSzLicenseInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzLicenseInfo) Reset() {
	var v SzLicenseInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzLicenseInfo) SetTo(v SzLicenseInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzLicenseInfo) Get() (v SzLicenseInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzLicenseInfo) Or(d SzLicenseInfo) SzLicenseInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzLicenseResponseData returns new OptSzLicenseResponseData with value set to v.
func NewOptSzLicenseResponseData(v SzLicenseResponseData) OptSzLicenseResponseData {
	return OptSzLicenseResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzLicenseResponseData is optional SzLicenseResponseData.
type OptSzLicenseResponseData struct {
	Value SzLicenseResponseData
	Set   bool
}

// IsSet returns true if OptSzLicenseResponseData was set.
func (o OptSzLicenseResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzLicenseResponseData) Reset() {
	var v SzLicenseResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzLicenseResponseData) SetTo(v SzLicenseResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzLicenseResponseData) Get() (v SzLicenseResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzLicenseResponseData) Or(d SzLicenseResponseData) SzLicenseResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzLinks returns new OptSzLinks with value set to v.
func NewOptSzLinks(v SzLinks) OptSzLinks {
	return OptSzLinks{
		Value: v,
		Set:   true,
	}
}

// OptSzLinks is optional SzLinks.
type OptSzLinks struct {
	Value SzLinks
	Set   bool
}

// IsSet returns true if OptSzLinks was set.
func (o OptSzLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzLinks) Reset() {
	var v SzLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzLinks) SetTo(v SzLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzLinks) Get() (v SzLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzLinks) Or(d SzLinks) SzLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzLoadRecordResponseData returns new OptSzLoadRecordResponseData with value set to v.
func NewOptSzLoadRecordResponseData(v SzLoadRecordResponseData) OptSzLoadRecordResponseData {
	return OptSzLoadRecordResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzLoadRecordResponseData is optional SzLoadRecordResponseData.
type OptSzLoadRecordResponseData struct {
	Value SzLoadRecordResponseData
	Set   bool
}

// IsSet returns true if OptSzLoadRecordResponseData was set.
func (o OptSzLoadRecordResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzLoadRecordResponseData) Reset() {
	var v SzLoadRecordResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzLoadRecordResponseData) SetTo(v SzLoadRecordResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzLoadRecordResponseData) Get() (v SzLoadRecordResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzLoadRecordResponseData) Or(d SzLoadRecordResponseData) SzLoadRecordResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzMatchLevel returns new OptSzMatchLevel with value set to v.
func NewOptSzMatchLevel(v SzMatchLevel) OptSzMatchLevel {
	return OptSzMatchLevel{
		Value: v,
		Set:   true,
	}
}

// OptSzMatchLevel is optional SzMatchLevel.
type OptSzMatchLevel struct {
	Value SzMatchLevel
	Set   bool
}

// IsSet returns true if OptSzMatchLevel was set.
func (o OptSzMatchLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzMatchLevel) Reset() {
	var v SzMatchLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzMatchLevel) SetTo(v SzMatchLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzMatchLevel) Get() (v SzMatchLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzMatchLevel) Or(d SzMatchLevel) SzMatchLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzMatchedRecordOriginalSourceData returns new OptSzMatchedRecordOriginalSourceData with value set to v.
func NewOptSzMatchedRecordOriginalSourceData(v SzMatchedRecordOriginalSourceData) OptSzMatchedRecordOriginalSourceData {
	return OptSzMatchedRecordOriginalSourceData{
		Value: v,
		Set:   true,
	}
}

// OptSzMatchedRecordOriginalSourceData is optional SzMatchedRecordOriginalSourceData.
type OptSzMatchedRecordOriginalSourceData struct {
	Value SzMatchedRecordOriginalSourceData
	Set   bool
}

// IsSet returns true if OptSzMatchedRecordOriginalSourceData was set.
func (o OptSzMatchedRecordOriginalSourceData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzMatchedRecordOriginalSourceData) Reset() {
	var v SzMatchedRecordOriginalSourceData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzMatchedRecordOriginalSourceData) SetTo(v SzMatchedRecordOriginalSourceData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzMatchedRecordOriginalSourceData) Get() (v SzMatchedRecordOriginalSourceData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzMatchedRecordOriginalSourceData) Or(d SzMatchedRecordOriginalSourceData) SzMatchedRecordOriginalSourceData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzMeta returns new OptSzMeta with value set to v.
func NewOptSzMeta(v SzMeta) OptSzMeta {
	return OptSzMeta{
		Value: v,
		Set:   true,
	}
}

// OptSzMeta is optional SzMeta.
type OptSzMeta struct {
	Value SzMeta
	Set   bool
}

// IsSet returns true if OptSzMeta was set.
func (o OptSzMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzMeta) Reset() {
	var v SzMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzMeta) SetTo(v SzMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzMeta) Get() (v SzMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzMeta) Or(d SzMeta) SzMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzNameScoring returns new OptSzNameScoring with value set to v.
func NewOptSzNameScoring(v SzNameScoring) OptSzNameScoring {
	return OptSzNameScoring{
		Value: v,
		Set:   true,
	}
}

// OptSzNameScoring is optional SzNameScoring.
type OptSzNameScoring struct {
	Value SzNameScoring
	Set   bool
}

// IsSet returns true if OptSzNameScoring was set.
func (o OptSzNameScoring) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzNameScoring) Reset() {
	var v SzNameScoring
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzNameScoring) SetTo(v SzNameScoring) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzNameScoring) Get() (v SzNameScoring, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzNameScoring) Or(d SzNameScoring) SzNameScoring {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzRecordResponseData returns new OptSzRecordResponseData with value set to v.
func NewOptSzRecordResponseData(v SzRecordResponseData) OptSzRecordResponseData {
	return OptSzRecordResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzRecordResponseData is optional SzRecordResponseData.
type OptSzRecordResponseData struct {
	Value SzRecordResponseData
	Set   bool
}

// IsSet returns true if OptSzRecordResponseData was set.
func (o OptSzRecordResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzRecordResponseData) Reset() {
	var v SzRecordResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzRecordResponseData) SetTo(v SzRecordResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzRecordResponseData) Get() (v SzRecordResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzRecordResponseData) Or(d SzRecordResponseData) SzRecordResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzReevaluateResponseData returns new OptSzReevaluateResponseData with value set to v.
func NewOptSzReevaluateResponseData(v SzReevaluateResponseData) OptSzReevaluateResponseData {
	return OptSzReevaluateResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzReevaluateResponseData is optional SzReevaluateResponseData.
type OptSzReevaluateResponseData struct {
	Value SzReevaluateResponseData
	Set   bool
}

// IsSet returns true if OptSzReevaluateResponseData was set.
func (o OptSzReevaluateResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzReevaluateResponseData) Reset() {
	var v SzReevaluateResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzReevaluateResponseData) SetTo(v SzReevaluateResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzReevaluateResponseData) Get() (v SzReevaluateResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzReevaluateResponseData) Or(d SzReevaluateResponseData) SzReevaluateResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzRelatedEntityFeatures returns new OptSzRelatedEntityFeatures with value set to v.
func NewOptSzRelatedEntityFeatures(v SzRelatedEntityFeatures) OptSzRelatedEntityFeatures {
	return OptSzRelatedEntityFeatures{
		Value: v,
		Set:   true,
	}
}

// OptSzRelatedEntityFeatures is optional SzRelatedEntityFeatures.
type OptSzRelatedEntityFeatures struct {
	Value SzRelatedEntityFeatures
	Set   bool
}

// IsSet returns true if OptSzRelatedEntityFeatures was set.
func (o OptSzRelatedEntityFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzRelatedEntityFeatures) Reset() {
	var v SzRelatedEntityFeatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzRelatedEntityFeatures) SetTo(v SzRelatedEntityFeatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzRelatedEntityFeatures) Get() (v SzRelatedEntityFeatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzRelatedEntityFeatures) Or(d SzRelatedEntityFeatures) SzRelatedEntityFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzRelationDirection returns new OptSzRelationDirection with value set to v.
func NewOptSzRelationDirection(v SzRelationDirection) OptSzRelationDirection {
	return OptSzRelationDirection{
		Value: v,
		Set:   true,
	}
}

// OptSzRelationDirection is optional SzRelationDirection.
type OptSzRelationDirection struct {
	Value SzRelationDirection
	Set   bool
}

// IsSet returns true if OptSzRelationDirection was set.
func (o OptSzRelationDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzRelationDirection) Reset() {
	var v SzRelationDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzRelationDirection) SetTo(v SzRelationDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzRelationDirection) Get() (v SzRelationDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzRelationDirection) Or(d SzRelationDirection) SzRelationDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzRelationshipMode returns new OptSzRelationshipMode with value set to v.
func NewOptSzRelationshipMode(v SzRelationshipMode) OptSzRelationshipMode {
	return OptSzRelationshipMode{
		Value: v,
		Set:   true,
	}
}

// OptSzRelationshipMode is optional SzRelationshipMode.
type OptSzRelationshipMode struct {
	Value SzRelationshipMode
	Set   bool
}

// IsSet returns true if OptSzRelationshipMode was set.
func (o OptSzRelationshipMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzRelationshipMode) Reset() {
	var v SzRelationshipMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzRelationshipMode) SetTo(v SzRelationshipMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzRelationshipMode) Get() (v SzRelationshipMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzRelationshipMode) Or(d SzRelationshipMode) SzRelationshipMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzRelationshipType returns new OptSzRelationshipType with value set to v.
func NewOptSzRelationshipType(v SzRelationshipType) OptSzRelationshipType {
	return OptSzRelationshipType{
		Value: v,
		Set:   true,
	}
}

// OptSzRelationshipType is optional SzRelationshipType.
type OptSzRelationshipType struct {
	Value SzRelationshipType
	Set   bool
}

// IsSet returns true if OptSzRelationshipType was set.
func (o OptSzRelationshipType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzRelationshipType) Reset() {
	var v SzRelationshipType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzRelationshipType) SetTo(v SzRelationshipType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzRelationshipType) Get() (v SzRelationshipType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzRelationshipType) Or(d SzRelationshipType) SzRelationshipType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzResolutionInfo returns new OptSzResolutionInfo with value set to v.
func NewOptSzResolutionInfo(v SzResolutionInfo) OptSzResolutionInfo {
	return OptSzResolutionInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzResolutionInfo is optional SzResolutionInfo.
type OptSzResolutionInfo struct {
	Value SzResolutionInfo
	Set   bool
}

// IsSet returns true if OptSzResolutionInfo was set.
func (o OptSzResolutionInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzResolutionInfo) Reset() {
	var v SzResolutionInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzResolutionInfo) SetTo(v SzResolutionInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzResolutionInfo) Get() (v SzResolutionInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzResolutionInfo) Or(d SzResolutionInfo) SzResolutionInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzResolvedEntity returns new OptSzResolvedEntity with value set to v.
func NewOptSzResolvedEntity(v SzResolvedEntity) OptSzResolvedEntity {
	return OptSzResolvedEntity{
		Value: v,
		Set:   true,
	}
}

// OptSzResolvedEntity is optional SzResolvedEntity.
type OptSzResolvedEntity struct {
	Value SzResolvedEntity
	Set   bool
}

// IsSet returns true if OptSzResolvedEntity was set.
func (o OptSzResolvedEntity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzResolvedEntity) Reset() {
	var v SzResolvedEntity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzResolvedEntity) SetTo(v SzResolvedEntity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzResolvedEntity) Get() (v SzResolvedEntity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzResolvedEntity) Or(d SzResolvedEntity) SzResolvedEntity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzResolvedEntityFeatures returns new OptSzResolvedEntityFeatures with value set to v.
func NewOptSzResolvedEntityFeatures(v SzResolvedEntityFeatures) OptSzResolvedEntityFeatures {
	return OptSzResolvedEntityFeatures{
		Value: v,
		Set:   true,
	}
}

// OptSzResolvedEntityFeatures is optional SzResolvedEntityFeatures.
type OptSzResolvedEntityFeatures struct {
	Value SzResolvedEntityFeatures
	Set   bool
}

// IsSet returns true if OptSzResolvedEntityFeatures was set.
func (o OptSzResolvedEntityFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzResolvedEntityFeatures) Reset() {
	var v SzResolvedEntityFeatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzResolvedEntityFeatures) SetTo(v SzResolvedEntityFeatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzResolvedEntityFeatures) Get() (v SzResolvedEntityFeatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzResolvedEntityFeatures) Or(d SzResolvedEntityFeatures) SzResolvedEntityFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzScoredFeature returns new OptSzScoredFeature with value set to v.
func NewOptSzScoredFeature(v SzScoredFeature) OptSzScoredFeature {
	return OptSzScoredFeature{
		Value: v,
		Set:   true,
	}
}

// OptSzScoredFeature is optional SzScoredFeature.
type OptSzScoredFeature struct {
	Value SzScoredFeature
	Set   bool
}

// IsSet returns true if OptSzScoredFeature was set.
func (o OptSzScoredFeature) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzScoredFeature) Reset() {
	var v SzScoredFeature
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzScoredFeature) SetTo(v SzScoredFeature) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzScoredFeature) Get() (v SzScoredFeature, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzScoredFeature) Or(d SzScoredFeature) SzScoredFeature {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzScoringBehavior returns new OptSzScoringBehavior with value set to v.
func NewOptSzScoringBehavior(v SzScoringBehavior) OptSzScoringBehavior {
	return OptSzScoringBehavior{
		Value: v,
		Set:   true,
	}
}

// OptSzScoringBehavior is optional SzScoringBehavior.
type OptSzScoringBehavior struct {
	Value SzScoringBehavior
	Set   bool
}

// IsSet returns true if OptSzScoringBehavior was set.
func (o OptSzScoringBehavior) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzScoringBehavior) Reset() {
	var v SzScoringBehavior
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzScoringBehavior) SetTo(v SzScoringBehavior) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzScoringBehavior) Get() (v SzScoringBehavior, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzScoringBehavior) Or(d SzScoringBehavior) SzScoringBehavior {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzScoringBucket returns new OptSzScoringBucket with value set to v.
func NewOptSzScoringBucket(v SzScoringBucket) OptSzScoringBucket {
	return OptSzScoringBucket{
		Value: v,
		Set:   true,
	}
}

// OptSzScoringBucket is optional SzScoringBucket.
type OptSzScoringBucket struct {
	Value SzScoringBucket
	Set   bool
}

// IsSet returns true if OptSzScoringBucket was set.
func (o OptSzScoringBucket) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzScoringBucket) Reset() {
	var v SzScoringBucket
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzScoringBucket) SetTo(v SzScoringBucket) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzScoringBucket) Get() (v SzScoringBucket, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzScoringBucket) Or(d SzScoringBucket) SzScoringBucket {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzScoringFrequency returns new OptSzScoringFrequency with value set to v.
func NewOptSzScoringFrequency(v SzScoringFrequency) OptSzScoringFrequency {
	return OptSzScoringFrequency{
		Value: v,
		Set:   true,
	}
}

// OptSzScoringFrequency is optional SzScoringFrequency.
type OptSzScoringFrequency struct {
	Value SzScoringFrequency
	Set   bool
}

// IsSet returns true if OptSzScoringFrequency was set.
func (o OptSzScoringFrequency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzScoringFrequency) Reset() {
	var v SzScoringFrequency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzScoringFrequency) SetTo(v SzScoringFrequency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzScoringFrequency) Get() (v SzScoringFrequency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzScoringFrequency) Or(d SzScoringFrequency) SzScoringFrequency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzServerInfo returns new OptSzServerInfo with value set to v.
func NewOptSzServerInfo(v SzServerInfo) OptSzServerInfo {
	return OptSzServerInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzServerInfo is optional SzServerInfo.
type OptSzServerInfo struct {
	Value SzServerInfo
	Set   bool
}

// IsSet returns true if OptSzServerInfo was set.
func (o OptSzServerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzServerInfo) Reset() {
	var v SzServerInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzServerInfo) SetTo(v SzServerInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzServerInfo) Get() (v SzServerInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzServerInfo) Or(d SzServerInfo) SzServerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzVersionInfo returns new OptSzVersionInfo with value set to v.
func NewOptSzVersionInfo(v SzVersionInfo) OptSzVersionInfo {
	return OptSzVersionInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzVersionInfo is optional SzVersionInfo.
type OptSzVersionInfo struct {
	Value SzVersionInfo
	Set   bool
}

// IsSet returns true if OptSzVersionInfo was set.
func (o OptSzVersionInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzVersionInfo) Reset() {
	var v SzVersionInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzVersionInfo) SetTo(v SzVersionInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzVersionInfo) Get() (v SzVersionInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzVersionInfo) Or(d SzVersionInfo) SzVersionInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzVirtualEntity returns new OptSzVirtualEntity with value set to v.
func NewOptSzVirtualEntity(v SzVirtualEntity) OptSzVirtualEntity {
	return OptSzVirtualEntity{
		Value: v,
		Set:   true,
	}
}

// OptSzVirtualEntity is optional SzVirtualEntity.
type OptSzVirtualEntity struct {
	Value SzVirtualEntity
	Set   bool
}

// IsSet returns true if OptSzVirtualEntity was set.
func (o OptSzVirtualEntity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzVirtualEntity) Reset() {
	var v SzVirtualEntity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzVirtualEntity) SetTo(v SzVirtualEntity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzVirtualEntity) Get() (v SzVirtualEntity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzVirtualEntity) Or(d SzVirtualEntity) SzVirtualEntity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzVirtualEntityData returns new OptSzVirtualEntityData with value set to v.
func NewOptSzVirtualEntityData(v SzVirtualEntityData) OptSzVirtualEntityData {
	return OptSzVirtualEntityData{
		Value: v,
		Set:   true,
	}
}

// OptSzVirtualEntityData is optional SzVirtualEntityData.
type OptSzVirtualEntityData struct {
	Value SzVirtualEntityData
	Set   bool
}

// IsSet returns true if OptSzVirtualEntityData was set.
func (o OptSzVirtualEntityData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzVirtualEntityData) Reset() {
	var v SzVirtualEntityData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzVirtualEntityData) SetTo(v SzVirtualEntityData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzVirtualEntityData) Get() (v SzVirtualEntityData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzVirtualEntityData) Or(d SzVirtualEntityData) SzVirtualEntityData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyEntitiesResponseData returns new OptSzWhyEntitiesResponseData with value set to v.
func NewOptSzWhyEntitiesResponseData(v SzWhyEntitiesResponseData) OptSzWhyEntitiesResponseData {
	return OptSzWhyEntitiesResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyEntitiesResponseData is optional SzWhyEntitiesResponseData.
type OptSzWhyEntitiesResponseData struct {
	Value SzWhyEntitiesResponseData
	Set   bool
}

// IsSet returns true if OptSzWhyEntitiesResponseData was set.
func (o OptSzWhyEntitiesResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyEntitiesResponseData) Reset() {
	var v SzWhyEntitiesResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyEntitiesResponseData) SetTo(v SzWhyEntitiesResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyEntitiesResponseData) Get() (v SzWhyEntitiesResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyEntitiesResponseData) Or(d SzWhyEntitiesResponseData) SzWhyEntitiesResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyEntitiesResult returns new OptSzWhyEntitiesResult with value set to v.
func NewOptSzWhyEntitiesResult(v SzWhyEntitiesResult) OptSzWhyEntitiesResult {
	return OptSzWhyEntitiesResult{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyEntitiesResult is optional SzWhyEntitiesResult.
type OptSzWhyEntitiesResult struct {
	Value SzWhyEntitiesResult
	Set   bool
}

// IsSet returns true if OptSzWhyEntitiesResult was set.
func (o OptSzWhyEntitiesResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyEntitiesResult) Reset() {
	var v SzWhyEntitiesResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyEntitiesResult) SetTo(v SzWhyEntitiesResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyEntitiesResult) Get() (v SzWhyEntitiesResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyEntitiesResult) Or(d SzWhyEntitiesResult) SzWhyEntitiesResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyEntityResponseData returns new OptSzWhyEntityResponseData with value set to v.
func NewOptSzWhyEntityResponseData(v SzWhyEntityResponseData) OptSzWhyEntityResponseData {
	return OptSzWhyEntityResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyEntityResponseData is optional SzWhyEntityResponseData.
type OptSzWhyEntityResponseData struct {
	Value SzWhyEntityResponseData
	Set   bool
}

// IsSet returns true if OptSzWhyEntityResponseData was set.
func (o OptSzWhyEntityResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyEntityResponseData) Reset() {
	var v SzWhyEntityResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyEntityResponseData) SetTo(v SzWhyEntityResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyEntityResponseData) Get() (v SzWhyEntityResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyEntityResponseData) Or(d SzWhyEntityResponseData) SzWhyEntityResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyMatchInfo returns new OptSzWhyMatchInfo with value set to v.
func NewOptSzWhyMatchInfo(v SzWhyMatchInfo) OptSzWhyMatchInfo {
	return OptSzWhyMatchInfo{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyMatchInfo is optional SzWhyMatchInfo.
type OptSzWhyMatchInfo struct {
	Value SzWhyMatchInfo
	Set   bool
}

// IsSet returns true if OptSzWhyMatchInfo was set.
func (o OptSzWhyMatchInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyMatchInfo) Reset() {
	var v SzWhyMatchInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyMatchInfo) SetTo(v SzWhyMatchInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyMatchInfo) Get() (v SzWhyMatchInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyMatchInfo) Or(d SzWhyMatchInfo) SzWhyMatchInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyRecordsResponseData returns new OptSzWhyRecordsResponseData with value set to v.
func NewOptSzWhyRecordsResponseData(v SzWhyRecordsResponseData) OptSzWhyRecordsResponseData {
	return OptSzWhyRecordsResponseData{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyRecordsResponseData is optional SzWhyRecordsResponseData.
type OptSzWhyRecordsResponseData struct {
	Value SzWhyRecordsResponseData
	Set   bool
}

// IsSet returns true if OptSzWhyRecordsResponseData was set.
func (o OptSzWhyRecordsResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyRecordsResponseData) Reset() {
	var v SzWhyRecordsResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyRecordsResponseData) SetTo(v SzWhyRecordsResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyRecordsResponseData) Get() (v SzWhyRecordsResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyRecordsResponseData) Or(d SzWhyRecordsResponseData) SzWhyRecordsResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSzWhyRecordsResult returns new OptSzWhyRecordsResult with value set to v.
func NewOptSzWhyRecordsResult(v SzWhyRecordsResult) OptSzWhyRecordsResult {
	return OptSzWhyRecordsResult{
		Value: v,
		Set:   true,
	}
}

// OptSzWhyRecordsResult is optional SzWhyRecordsResult.
type OptSzWhyRecordsResult struct {
	Value SzWhyRecordsResult
	Set   bool
}

// IsSet returns true if OptSzWhyRecordsResult was set.
func (o OptSzWhyRecordsResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSzWhyRecordsResult) Reset() {
	var v SzWhyRecordsResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSzWhyRecordsResult) SetTo(v SzWhyRecordsResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSzWhyRecordsResult) Get() (v SzWhyRecordsResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSzWhyRecordsResult) Or(d SzWhyRecordsResult) SzWhyRecordsResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type ReevaluateEntityApplicationJSONInternalServerError SzErrorResponse

func (*ReevaluateEntityApplicationJSONInternalServerError) reevaluateEntityRes() {}

type ReevaluateEntityApplicationJSONNotFound SzErrorResponse

func (*ReevaluateEntityApplicationJSONNotFound) reevaluateEntityRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type ReevaluateEntityNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReevaluateEntityNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReevaluateEntityNotFoundDefault) reevaluateEntityRes() {}

// Ref: #/components/schemas/SzReevaluateResponse
type ReevaluateEntityOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReevaluateEntityOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReevaluateEntityOKDefault) reevaluateEntityRes() {}

type ReevaluateRecordApplicationJSONInternalServerError SzErrorResponse

func (*ReevaluateRecordApplicationJSONInternalServerError) reevaluateRecordRes() {}

type ReevaluateRecordApplicationJSONNotFound SzErrorResponse

func (*ReevaluateRecordApplicationJSONNotFound) reevaluateRecordRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type ReevaluateRecordNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReevaluateRecordNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReevaluateRecordNotFoundDefault) reevaluateRecordRes() {}

// Ref: #/components/schemas/SzReevaluateResponse
type ReevaluateRecordOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReevaluateRecordOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReevaluateRecordOKDefault) reevaluateRecordRes() {}

type SearchEntitiesByGetApplicationJSONBadRequest SzErrorResponse

func (*SearchEntitiesByGetApplicationJSONBadRequest) searchEntitiesByGetRes() {}

type SearchEntitiesByGetApplicationJSONInternalServerError SzErrorResponse

func (*SearchEntitiesByGetApplicationJSONInternalServerError) searchEntitiesByGetRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type SearchEntitiesByGetBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SearchEntitiesByGetBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SearchEntitiesByGetBadRequestDefault) searchEntitiesByGetRes() {}

// The response describing the resolved entities found from a search.
// Ref: #/components/schemas/SzAttributeSearchResponse
type SearchEntitiesByGetOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SearchEntitiesByGetOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SearchEntitiesByGetOKDefault) searchEntitiesByGetRes() {}

type SearchEntitiesByPostApplicationJSONBadRequest SzErrorResponse

func (*SearchEntitiesByPostApplicationJSONBadRequest) searchEntitiesByPostRes() {}

type SearchEntitiesByPostApplicationJSONInternalServerError SzErrorResponse

func (*SearchEntitiesByPostApplicationJSONInternalServerError) searchEntitiesByPostRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type SearchEntitiesByPostBadRequestDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SearchEntitiesByPostBadRequestDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SearchEntitiesByPostBadRequestDefault) searchEntitiesByPostRes() {}

// The response describing the resolved entities found from a search.
// Ref: #/components/schemas/SzAttributeSearchResponse
type SearchEntitiesByPostOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SearchEntitiesByPostOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SearchEntitiesByPostOKDefault) searchEntitiesByPostRes() {}

type SearchEntitiesByPostReq map[string]jx.Raw

func (s *SearchEntitiesByPostReq) init() SearchEntitiesByPostReq {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type ServerErrorDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ServerErrorDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ServerErrorDefault) addDataSourcesRes()                {}
func (*ServerErrorDefault) addRecordRes()                     {}
func (*ServerErrorDefault) addRecordWithReturnedRecordIdRes() {}
func (*ServerErrorDefault) analyzeBulkRecordsRes()            {}
func (*ServerErrorDefault) deleteRecordRes()                  {}
func (*ServerErrorDefault) findEntityNetworkRes()             {}
func (*ServerErrorDefault) findEntityPathRes()                {}
func (*ServerErrorDefault) getActiveConfigRes()               {}
func (*ServerErrorDefault) getAttributeTypeRes()              {}
func (*ServerErrorDefault) getAttributeTypesRes()             {}
func (*ServerErrorDefault) getDataSourceRes()                 {}
func (*ServerErrorDefault) getDataSourcesRes()                {}
func (*ServerErrorDefault) getEntityByEntityIdRes()           {}
func (*ServerErrorDefault) getEntityByRecordIdRes()           {}
func (*ServerErrorDefault) getRecordRes()                     {}
func (*ServerErrorDefault) getTemplateConfigRes()             {}
func (*ServerErrorDefault) getVirtualEntityByRecordIdsRes()   {}
func (*ServerErrorDefault) howEntityByEntityIDRes()           {}
func (*ServerErrorDefault) howEntityByRecordIDRes()           {}
func (*ServerErrorDefault) loadBulkRecordsRes()               {}
func (*ServerErrorDefault) reevaluateEntityRes()              {}
func (*ServerErrorDefault) reevaluateRecordRes()              {}
func (*ServerErrorDefault) searchEntitiesByGetRes()           {}
func (*ServerErrorDefault) searchEntitiesByPostRes()          {}
func (*ServerErrorDefault) whyEntitiesRes()                   {}
func (*ServerErrorDefault) whyEntityByEntityIDRes()           {}
func (*ServerErrorDefault) whyEntityByRecordIDRes()           {}
func (*ServerErrorDefault) whyRecordsRes()                    {}

// Enumerates the various classes of attribute types (and features). This is a generalization over
// attribute type that is more general than feature type (NOTE: stand-alone attribute types such as
// "DATA_SOURCE" or "RECORD_ID" do not have a feature type, but do have an attribute class of
// "OBSERVATION").  Attribute class determines how attributes / features are grouped together (e.g.:
// "nameData" contains all name features and "identifierData" contains all identifier features).  The
// possible values are:
// * `ADDRESS` - Attributes pertaining to an address such as "POSTAL_CODE"
// * `CHARACTERISTIC` - Attributes pertaining to physical characteristics
// of an entity.  Such as "BIRTH_DATE"
// * `IDENTIFIER` - Attributes pertaining to identifiers such as
// drivers license number, passport number, or email
// address.
// * `NAME` - Attributes pertaing to names such as "NAME_FIRST" or
// "NAME_LAST"
// * `OBSERVATION` - Attributes pertaining to meta-data about the
// observation (record) such as "RECORD_ID" or
// "DATA_SOURCE"
// * `PHONE` - Attributes pertaining to phone numbers such
// "PHONE_NUMBER" or "PHONE_EXTENSION"
// * `RELATIONSHIP` - Attributes pertaining to relationships such as
// "RELATIONSHIP_TYPE".
// * `OTHER` - An attribute class for custom features or for attributes
// that are loaded but not mapped.
// Ref: #/components/schemas/SzAttributeClass
type SzAttributeClass string

const (
	SzAttributeClassADDRESS        SzAttributeClass = "ADDRESS"
	SzAttributeClassCHARACTERISTIC SzAttributeClass = "CHARACTERISTIC"
	SzAttributeClassIDENTIFIER     SzAttributeClass = "IDENTIFIER"
	SzAttributeClassNAME           SzAttributeClass = "NAME"
	SzAttributeClassOBSERVATION    SzAttributeClass = "OBSERVATION"
	SzAttributeClassPHONE          SzAttributeClass = "PHONE"
	SzAttributeClassRELATIONSHIP   SzAttributeClass = "RELATIONSHIP"
	SzAttributeClassOTHER          SzAttributeClass = "OTHER"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzAttributeClass) MarshalText() ([]byte, error) {
	switch s {
	case SzAttributeClassADDRESS:
		return []byte(s), nil
	case SzAttributeClassCHARACTERISTIC:
		return []byte(s), nil
	case SzAttributeClassIDENTIFIER:
		return []byte(s), nil
	case SzAttributeClassNAME:
		return []byte(s), nil
	case SzAttributeClassOBSERVATION:
		return []byte(s), nil
	case SzAttributeClassPHONE:
		return []byte(s), nil
	case SzAttributeClassRELATIONSHIP:
		return []byte(s), nil
	case SzAttributeClassOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzAttributeClass) UnmarshalText(data []byte) error {
	switch SzAttributeClass(data) {
	case SzAttributeClassADDRESS:
		*s = SzAttributeClassADDRESS
		return nil
	case SzAttributeClassCHARACTERISTIC:
		*s = SzAttributeClassCHARACTERISTIC
		return nil
	case SzAttributeClassIDENTIFIER:
		*s = SzAttributeClassIDENTIFIER
		return nil
	case SzAttributeClassNAME:
		*s = SzAttributeClassNAME
		return nil
	case SzAttributeClassOBSERVATION:
		*s = SzAttributeClassOBSERVATION
		return nil
	case SzAttributeClassPHONE:
		*s = SzAttributeClassPHONE
		return nil
	case SzAttributeClassRELATIONSHIP:
		*s = SzAttributeClassRELATIONSHIP
		return nil
	case SzAttributeClassOTHER:
		*s = SzAttributeClassOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the necessity for this attribute type within the feature type.  Possible values are:
// * `REQUIRED` - The attribute for the attribute type must be
// provided whenever the feature is provided (e.g.:
// "PASSPORT_NUMBER" is required with the "PASSPORT"
// feature).
// * `SUFFICIENT` - If no attributes for `REQUIRED` attribute types
// are provided for the feature, then at least one
// marked `SUFFICIENT` must be provided (e.g.:
// "NAME_FULL" or "NAME_ORG" for the "NAME" feature)
// * `PREFERRED` - Attributes of `PREFERRED` attribute types are
// optional, but providing them greatly enhances
// accuracy for scoring and matching purposes (e.g.:
// a "PASSPORT_COUNTRY" for "PASSPORT" feature)
// * `OPTIONAL` - Attributes of `OPTIONAL` attribute types are
// optional and do not significantly affect accuracy
// for scoring and matching purposes, but do provide
// additional information (e.g.: "PASSPORT_ISSUE_DT"
// for the "PASSPORT" feature).
// Ref: #/components/schemas/SzAttributeNecessity
type SzAttributeNecessity string

const (
	SzAttributeNecessityREQUIRED   SzAttributeNecessity = "REQUIRED"
	SzAttributeNecessitySUFFICIENT SzAttributeNecessity = "SUFFICIENT"
	SzAttributeNecessityPREFERRED  SzAttributeNecessity = "PREFERRED"
	SzAttributeNecessityOPTIONAL   SzAttributeNecessity = "OPTIONAL"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzAttributeNecessity) MarshalText() ([]byte, error) {
	switch s {
	case SzAttributeNecessityREQUIRED:
		return []byte(s), nil
	case SzAttributeNecessitySUFFICIENT:
		return []byte(s), nil
	case SzAttributeNecessityPREFERRED:
		return []byte(s), nil
	case SzAttributeNecessityOPTIONAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzAttributeNecessity) UnmarshalText(data []byte) error {
	switch SzAttributeNecessity(data) {
	case SzAttributeNecessityREQUIRED:
		*s = SzAttributeNecessityREQUIRED
		return nil
	case SzAttributeNecessitySUFFICIENT:
		*s = SzAttributeNecessitySUFFICIENT
		return nil
	case SzAttributeNecessityPREFERRED:
		*s = SzAttributeNecessityPREFERRED
		return nil
	case SzAttributeNecessityOPTIONAL:
		*s = SzAttributeNecessityOPTIONAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/SzAttributeSearchResponse
type SzAttributeSearchResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzAttributeSearchResponseRawData `json:"rawData"`
	Data    OptSzAttributeSearchResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzAttributeSearchResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzAttributeSearchResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzAttributeSearchResponse) GetRawData() OptNilSzAttributeSearchResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzAttributeSearchResponse) GetData() OptSzAttributeSearchResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzAttributeSearchResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzAttributeSearchResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzAttributeSearchResponse) SetRawData(val OptNilSzAttributeSearchResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzAttributeSearchResponse) SetData(val OptSzAttributeSearchResponseData) {
	s.Data = val
}

func (*SzAttributeSearchResponse) searchEntitiesByGetRes()  {}
func (*SzAttributeSearchResponse) searchEntitiesByPostRes() {}

// Describes the data segment of the `SzAttributeSearchResponse`.
// Ref: #/components/schemas/SzAttributeSearchResponseData
type SzAttributeSearchResponseData struct {
	// The array of `AttributeSearchResult` instances describing the entities matching the specified
	// entity search attributes including the `AttributeSearchResultType` for each.
	SearchResults []SzAttributeSearchResult `json:"searchResults"`
}

// GetSearchResults returns the value of SearchResults.
func (s *SzAttributeSearchResponseData) GetSearchResults() []SzAttributeSearchResult {
	return s.SearchResults
}

// SetSearchResults sets the value of SearchResults.
func (s *SzAttributeSearchResponseData) SetSearchResults(val []SzAttributeSearchResult) {
	s.SearchResults = val
}

// The RAW result from the underlying native API function.
type SzAttributeSearchResponseRawData map[string]jx.Raw

func (s *SzAttributeSearchResponseRawData) init() SzAttributeSearchResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzAttributeSearchResult
type SzAttributeSearchResult struct {
	// The unique numeric ID identifying the entity.
	EntityId OptInt64 `json:"entityId"`
	// The name associated with this entity that is considered the best name among all the associated
	// names.
	EntityName OptString `json:"entityName"`
	// Usually the same as the entityName property, but this may differ if the entity was found based on
	// a name search.  In such a case, this field represents the name that most closely matches the name
	// that was searched on.
	BestName OptString `json:"bestName"`
	// The array of DataSourceRecordSummary instances describing the number of records associated with
	// each data source that contributes to this entity.
	RecordSummaries []SzDataSourceRecordSummary `json:"recordSummaries"`
	// An array of names associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe").
	NameData []string `json:"nameData"`
	// An array of characteristics associated with the entity that are formatted for readability.  These
	// will be prefixed by a characteristic type and optionally by a "usage type" if one was provided.
	// **NOTE:** The `characteristicData` field is derived from the feature data values that contribute
	// to the `ATTRIBUTE_DATA` field at the record level in the "raw data" JSON.
	CharacteristicData []string `json:"characteristicData"`
	// An array of addresses associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "HOME: 101 Main Street").
	AddressData []string `json:"addressData"`
	// An array of phone numbers associated with the entity that are formatted for readability.  These
	// may be prefixed by a "usage type" if one was provided (e.g.: "HOME: 702-555-1212").
	PhoneData []string `json:"phoneData"`
	// An array of entity data associated with the entity where the items are formatted for readability.
	// These will be prefixed by an identifier type and may be prefixed by a "usage type" if one was
	// provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com").
	IdentifierData []string `json:"identifierData"`
	// An array of relationship data items associated with the entity that describes disclosed
	// relationships.
	RelationshipData []string `json:"relationshipData"`
	// An array of associated data items that were loaded with the entity's records but not normally
	// recognized or used for entity resolution. This array usually contains useful information from the
	// source systems.
	OtherData []string `json:"otherData"`
	// The array of `SzMatchedRecord` instances describing the records associated with this entity.
	Records []SzMatchedRecord `json:"records"`
	// The map of string feature names to arrays of SzEntityFeature instances describing the values
	// associated with each respective feature name.
	Features OptSzAttributeSearchResultFeatures `json:"features"`
	// If true then this `SzResolvedEntity` has complete features and records, otherwise they are not
	// provided.  Also, the recordSummary items may be missing the topRecordIds if partial is true.  This
	// can be true for partially retrieved related entities or if features are suppressed, if the detail
	// level has suppressed records or related matching info (in the case of related entities) or if the
	// force-minimal response flag has been been specified.
	Partial OptBool `json:"partial"`
	// The timestamp that the entity was last seen (i.e.: most recent record was loaded).
	LastSeenTimestamp OptDateTime `json:"lastSeenTimestamp"`
	// The integer "match level" describing how the related entity matched to the primary resolved entity.
	MatchLevel OptInt32 `json:"matchLevel"`
	// The match key describing what features matched between the primary resolved entity and the related
	// entity.
	MatchKey OptString `json:"matchKey"`
	// The code identifying the resolution rule that related this entity to the primary resolved entity.
	ResolutionRuleCode OptString                      `json:"resolutionRuleCode"`
	ResultType         OptSzAttributeSearchResultType `json:"resultType"`
	// The best name score between the search criteria and this matched search entity.  The higher the
	// score the closer the name match.  This uses either the full name score or organization name score.
	//  If none exist then this filed is omitted.
	BestNameScore OptInt32 `json:"bestNameScore"`
	// The map of feature types to arrays of `SzSearchFeatureScore` instances for that feature type.
	FeatureScores OptNilSzAttributeSearchResultFeatureScores `json:"featureScores"`
	// The array of RelatedEntity instances describing the possible matches, discovered relationships,
	// and disclosed relationships.
	RelatedEntities []SzRelatedEntity `json:"relatedEntities"`
}

// GetEntityId returns the value of EntityId.
func (s *SzAttributeSearchResult) GetEntityId() OptInt64 {
	return s.EntityId
}

// GetEntityName returns the value of EntityName.
func (s *SzAttributeSearchResult) GetEntityName() OptString {
	return s.EntityName
}

// GetBestName returns the value of BestName.
func (s *SzAttributeSearchResult) GetBestName() OptString {
	return s.BestName
}

// GetRecordSummaries returns the value of RecordSummaries.
func (s *SzAttributeSearchResult) GetRecordSummaries() []SzDataSourceRecordSummary {
	return s.RecordSummaries
}

// GetNameData returns the value of NameData.
func (s *SzAttributeSearchResult) GetNameData() []string {
	return s.NameData
}

// GetCharacteristicData returns the value of CharacteristicData.
func (s *SzAttributeSearchResult) GetCharacteristicData() []string {
	return s.CharacteristicData
}

// GetAddressData returns the value of AddressData.
func (s *SzAttributeSearchResult) GetAddressData() []string {
	return s.AddressData
}

// GetPhoneData returns the value of PhoneData.
func (s *SzAttributeSearchResult) GetPhoneData() []string {
	return s.PhoneData
}

// GetIdentifierData returns the value of IdentifierData.
func (s *SzAttributeSearchResult) GetIdentifierData() []string {
	return s.IdentifierData
}

// GetRelationshipData returns the value of RelationshipData.
func (s *SzAttributeSearchResult) GetRelationshipData() []string {
	return s.RelationshipData
}

// GetOtherData returns the value of OtherData.
func (s *SzAttributeSearchResult) GetOtherData() []string {
	return s.OtherData
}

// GetRecords returns the value of Records.
func (s *SzAttributeSearchResult) GetRecords() []SzMatchedRecord {
	return s.Records
}

// GetFeatures returns the value of Features.
func (s *SzAttributeSearchResult) GetFeatures() OptSzAttributeSearchResultFeatures {
	return s.Features
}

// GetPartial returns the value of Partial.
func (s *SzAttributeSearchResult) GetPartial() OptBool {
	return s.Partial
}

// GetLastSeenTimestamp returns the value of LastSeenTimestamp.
func (s *SzAttributeSearchResult) GetLastSeenTimestamp() OptDateTime {
	return s.LastSeenTimestamp
}

// GetMatchLevel returns the value of MatchLevel.
func (s *SzAttributeSearchResult) GetMatchLevel() OptInt32 {
	return s.MatchLevel
}

// GetMatchKey returns the value of MatchKey.
func (s *SzAttributeSearchResult) GetMatchKey() OptString {
	return s.MatchKey
}

// GetResolutionRuleCode returns the value of ResolutionRuleCode.
func (s *SzAttributeSearchResult) GetResolutionRuleCode() OptString {
	return s.ResolutionRuleCode
}

// GetResultType returns the value of ResultType.
func (s *SzAttributeSearchResult) GetResultType() OptSzAttributeSearchResultType {
	return s.ResultType
}

// GetBestNameScore returns the value of BestNameScore.
func (s *SzAttributeSearchResult) GetBestNameScore() OptInt32 {
	return s.BestNameScore
}

// GetFeatureScores returns the value of FeatureScores.
func (s *SzAttributeSearchResult) GetFeatureScores() OptNilSzAttributeSearchResultFeatureScores {
	return s.FeatureScores
}

// GetRelatedEntities returns the value of RelatedEntities.
func (s *SzAttributeSearchResult) GetRelatedEntities() []SzRelatedEntity {
	return s.RelatedEntities
}

// SetEntityId sets the value of EntityId.
func (s *SzAttributeSearchResult) SetEntityId(val OptInt64) {
	s.EntityId = val
}

// SetEntityName sets the value of EntityName.
func (s *SzAttributeSearchResult) SetEntityName(val OptString) {
	s.EntityName = val
}

// SetBestName sets the value of BestName.
func (s *SzAttributeSearchResult) SetBestName(val OptString) {
	s.BestName = val
}

// SetRecordSummaries sets the value of RecordSummaries.
func (s *SzAttributeSearchResult) SetRecordSummaries(val []SzDataSourceRecordSummary) {
	s.RecordSummaries = val
}

// SetNameData sets the value of NameData.
func (s *SzAttributeSearchResult) SetNameData(val []string) {
	s.NameData = val
}

// SetCharacteristicData sets the value of CharacteristicData.
func (s *SzAttributeSearchResult) SetCharacteristicData(val []string) {
	s.CharacteristicData = val
}

// SetAddressData sets the value of AddressData.
func (s *SzAttributeSearchResult) SetAddressData(val []string) {
	s.AddressData = val
}

// SetPhoneData sets the value of PhoneData.
func (s *SzAttributeSearchResult) SetPhoneData(val []string) {
	s.PhoneData = val
}

// SetIdentifierData sets the value of IdentifierData.
func (s *SzAttributeSearchResult) SetIdentifierData(val []string) {
	s.IdentifierData = val
}

// SetRelationshipData sets the value of RelationshipData.
func (s *SzAttributeSearchResult) SetRelationshipData(val []string) {
	s.RelationshipData = val
}

// SetOtherData sets the value of OtherData.
func (s *SzAttributeSearchResult) SetOtherData(val []string) {
	s.OtherData = val
}

// SetRecords sets the value of Records.
func (s *SzAttributeSearchResult) SetRecords(val []SzMatchedRecord) {
	s.Records = val
}

// SetFeatures sets the value of Features.
func (s *SzAttributeSearchResult) SetFeatures(val OptSzAttributeSearchResultFeatures) {
	s.Features = val
}

// SetPartial sets the value of Partial.
func (s *SzAttributeSearchResult) SetPartial(val OptBool) {
	s.Partial = val
}

// SetLastSeenTimestamp sets the value of LastSeenTimestamp.
func (s *SzAttributeSearchResult) SetLastSeenTimestamp(val OptDateTime) {
	s.LastSeenTimestamp = val
}

// SetMatchLevel sets the value of MatchLevel.
func (s *SzAttributeSearchResult) SetMatchLevel(val OptInt32) {
	s.MatchLevel = val
}

// SetMatchKey sets the value of MatchKey.
func (s *SzAttributeSearchResult) SetMatchKey(val OptString) {
	s.MatchKey = val
}

// SetResolutionRuleCode sets the value of ResolutionRuleCode.
func (s *SzAttributeSearchResult) SetResolutionRuleCode(val OptString) {
	s.ResolutionRuleCode = val
}

// SetResultType sets the value of ResultType.
func (s *SzAttributeSearchResult) SetResultType(val OptSzAttributeSearchResultType) {
	s.ResultType = val
}

// SetBestNameScore sets the value of BestNameScore.
func (s *SzAttributeSearchResult) SetBestNameScore(val OptInt32) {
	s.BestNameScore = val
}

// SetFeatureScores sets the value of FeatureScores.
func (s *SzAttributeSearchResult) SetFeatureScores(val OptNilSzAttributeSearchResultFeatureScores) {
	s.FeatureScores = val
}

// SetRelatedEntities sets the value of RelatedEntities.
func (s *SzAttributeSearchResult) SetRelatedEntities(val []SzRelatedEntity) {
	s.RelatedEntities = val
}

// The map of feature types to arrays of `SzSearchFeatureScore` instances for that feature type.
type SzAttributeSearchResultFeatureScores map[string][]SzSearchFeatureScore

func (s *SzAttributeSearchResultFeatureScores) init() SzAttributeSearchResultFeatureScores {
	m := *s
	if m == nil {
		m = map[string][]SzSearchFeatureScore{}
		*s = m
	}
	return m
}

// The map of string feature names to arrays of SzEntityFeature instances describing the values
// associated with each respective feature name.
type SzAttributeSearchResultFeatures map[string][]SzEntityFeature

func (s *SzAttributeSearchResultFeatures) init() SzAttributeSearchResultFeatures {
	m := *s
	if m == nil {
		m = map[string][]SzEntityFeature{}
		*s = m
	}
	return m
}

// Describes how the entity matching the search attributes would have entity resolved against those
// attributes (either a match, possible match, discovered relationship or name only match).  The
// possible values are:
// * `MATCH` - The search criteria matches the entity and would resolve
// against it.
// * `POSSIBLE_MATCH` - The search criteria comes close to matching the
// entity but not close enough that it would resolve against it.
// * `POSSIBLE_RELATION` - The search criteria would not match against
// the entity but some features are the same and relate them.
// * `NAME_ONLY_MATCH` - The search criteria matches the entity in name
// only which is not strong enough for a relationship, but provides
// for a weak search match.
// Ref: #/components/schemas/SzAttributeSearchResultType
type SzAttributeSearchResultType string

const (
	SzAttributeSearchResultTypeMATCH            SzAttributeSearchResultType = "MATCH"
	SzAttributeSearchResultTypePOSSIBLEMATCH    SzAttributeSearchResultType = "POSSIBLE_MATCH"
	SzAttributeSearchResultTypePOSSIBLERELATION SzAttributeSearchResultType = "POSSIBLE_RELATION"
	SzAttributeSearchResultTypeNAMEONLYMATCH    SzAttributeSearchResultType = "NAME_ONLY_MATCH"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzAttributeSearchResultType) MarshalText() ([]byte, error) {
	switch s {
	case SzAttributeSearchResultTypeMATCH:
		return []byte(s), nil
	case SzAttributeSearchResultTypePOSSIBLEMATCH:
		return []byte(s), nil
	case SzAttributeSearchResultTypePOSSIBLERELATION:
		return []byte(s), nil
	case SzAttributeSearchResultTypeNAMEONLYMATCH:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzAttributeSearchResultType) UnmarshalText(data []byte) error {
	switch SzAttributeSearchResultType(data) {
	case SzAttributeSearchResultTypeMATCH:
		*s = SzAttributeSearchResultTypeMATCH
		return nil
	case SzAttributeSearchResultTypePOSSIBLEMATCH:
		*s = SzAttributeSearchResultTypePOSSIBLEMATCH
		return nil
	case SzAttributeSearchResultTypePOSSIBLERELATION:
		*s = SzAttributeSearchResultTypePOSSIBLERELATION
		return nil
	case SzAttributeSearchResultTypeNAMEONLYMATCH:
		*s = SzAttributeSearchResultTypeNAMEONLYMATCH
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes an attribute type that partially (or fully) describes a feature of an entity that may be
// loaded as part of a record or used as criteria in a search.
// Ref: #/components/schemas/SzAttributeType
type SzAttributeType struct {
	// The unique string that identifies the attribute type among all other attribute types.
	AttributeCode OptString `json:"attributeCode"`
	// The default value assumed for the attribute when it is not provided but is required as part of a
	// feature.
	DefaultValue   OptNilString            `json:"defaultValue"`
	Necessity      OptSzAttributeNecessity `json:"necessity"`
	AttributeClass OptSzAttributeClass     `json:"attributeClass"`
	// Identifiers the feature type that this attribute type is an attribute of (if any).  For example,
	// the "NAME_FIRST" attribute type would be an attribute of the "NAME" feature type and
	// "PASSPORT_COUNTRY" would be an attribute of "PASSPORT" feature type. Some (advanced) attribute
	// types are stand-alone and do not belong to a feature (e.g.: "RECORD_ID").
	FeatureType OptNilString `json:"featureType"`
	// Indicates if the attribute type is considered to be "advanced". Advanced attribute types usually
	// require the user to have some knowledge of how the data is mapped in the entity repository (e.g.:
	// "RECORD_ID" or "DATA_SOURCE").  An application may exclude displaying these as options if these
	// things are being auto-generated or automatically selected for the user.  You may want to contact
	// Senzing support before leveraging advanced attribute types in your application.
	Advanced OptBool `json:"advanced"`
	// Whether or not an attribute type is typically generated internally based on other attribute types.
	//  These are not commonly used by the user except in some rare cases.  Examples include pre-hashed
	// versions of attributes that are hashed.
	Internal OptBool `json:"internal"`
}

// GetAttributeCode returns the value of AttributeCode.
func (s *SzAttributeType) GetAttributeCode() OptString {
	return s.AttributeCode
}

// GetDefaultValue returns the value of DefaultValue.
func (s *SzAttributeType) GetDefaultValue() OptNilString {
	return s.DefaultValue
}

// GetNecessity returns the value of Necessity.
func (s *SzAttributeType) GetNecessity() OptSzAttributeNecessity {
	return s.Necessity
}

// GetAttributeClass returns the value of AttributeClass.
func (s *SzAttributeType) GetAttributeClass() OptSzAttributeClass {
	return s.AttributeClass
}

// GetFeatureType returns the value of FeatureType.
func (s *SzAttributeType) GetFeatureType() OptNilString {
	return s.FeatureType
}

// GetAdvanced returns the value of Advanced.
func (s *SzAttributeType) GetAdvanced() OptBool {
	return s.Advanced
}

// GetInternal returns the value of Internal.
func (s *SzAttributeType) GetInternal() OptBool {
	return s.Internal
}

// SetAttributeCode sets the value of AttributeCode.
func (s *SzAttributeType) SetAttributeCode(val OptString) {
	s.AttributeCode = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *SzAttributeType) SetDefaultValue(val OptNilString) {
	s.DefaultValue = val
}

// SetNecessity sets the value of Necessity.
func (s *SzAttributeType) SetNecessity(val OptSzAttributeNecessity) {
	s.Necessity = val
}

// SetAttributeClass sets the value of AttributeClass.
func (s *SzAttributeType) SetAttributeClass(val OptSzAttributeClass) {
	s.AttributeClass = val
}

// SetFeatureType sets the value of FeatureType.
func (s *SzAttributeType) SetFeatureType(val OptNilString) {
	s.FeatureType = val
}

// SetAdvanced sets the value of Advanced.
func (s *SzAttributeType) SetAdvanced(val OptBool) {
	s.Advanced = val
}

// SetInternal sets the value of Internal.
func (s *SzAttributeType) SetInternal(val OptBool) {
	s.Internal = val
}

// Merged schema.
// Ref: #/components/schemas/SzAttributeTypeResponse
type SzAttributeTypeResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzAttributeTypeResponseRawData `json:"rawData"`
	Data    OptSzAttributeTypeResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzAttributeTypeResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzAttributeTypeResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzAttributeTypeResponse) GetRawData() OptNilSzAttributeTypeResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzAttributeTypeResponse) GetData() OptSzAttributeTypeResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzAttributeTypeResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzAttributeTypeResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzAttributeTypeResponse) SetRawData(val OptNilSzAttributeTypeResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzAttributeTypeResponse) SetData(val OptSzAttributeTypeResponseData) {
	s.Data = val
}

func (*SzAttributeTypeResponse) getAttributeTypeRes() {}

// Describes the data segment associated with `SzAttributeTypeResponse`.
// Ref: #/components/schemas/SzAttributeTypeResponseData
type SzAttributeTypeResponseData struct {
	AttributeType OptSzAttributeType `json:"attributeType"`
}

// GetAttributeType returns the value of AttributeType.
func (s *SzAttributeTypeResponseData) GetAttributeType() OptSzAttributeType {
	return s.AttributeType
}

// SetAttributeType sets the value of AttributeType.
func (s *SzAttributeTypeResponseData) SetAttributeType(val OptSzAttributeType) {
	s.AttributeType = val
}

// The RAW result from the underlying native API function.
type SzAttributeTypeResponseRawData map[string]jx.Raw

func (s *SzAttributeTypeResponseRawData) init() SzAttributeTypeResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzAttributeTypesResponse
type SzAttributeTypesResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzAttributeTypesResponseRawData `json:"rawData"`
	Data    OptSzAttributeTypesResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzAttributeTypesResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzAttributeTypesResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzAttributeTypesResponse) GetRawData() OptNilSzAttributeTypesResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzAttributeTypesResponse) GetData() OptSzAttributeTypesResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzAttributeTypesResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzAttributeTypesResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzAttributeTypesResponse) SetRawData(val OptNilSzAttributeTypesResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzAttributeTypesResponse) SetData(val OptSzAttributeTypesResponseData) {
	s.Data = val
}

func (*SzAttributeTypesResponse) getAttributeTypesRes() {}

// Describes the data associated with the `SzAttributeTypesResponse`.
// Ref: #/components/schemas/SzAttributeTypesResponseData
type SzAttributeTypesResponseData struct {
	// The list of attribute types.
	AttributeTypes []SzAttributeType `json:"attributeTypes"`
}

// GetAttributeTypes returns the value of AttributeTypes.
func (s *SzAttributeTypesResponseData) GetAttributeTypes() []SzAttributeType {
	return s.AttributeTypes
}

// SetAttributeTypes sets the value of AttributeTypes.
func (s *SzAttributeTypesResponseData) SetAttributeTypes(val []SzAttributeType) {
	s.AttributeTypes = val
}

// The RAW result from the underlying native API function.
type SzAttributeTypesResponseRawData map[string]jx.Raw

func (s *SzAttributeTypesResponseRawData) init() SzAttributeTypesResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Represents the base information included in all responses sans the actual data for the response.
// Ref: #/components/schemas/SzBaseResponse
type SzBaseResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
}

// GetMeta returns the value of Meta.
func (s *SzBaseResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzBaseResponse) GetLinks() OptSzLinks {
	return s.Links
}

// SetMeta sets the value of Meta.
func (s *SzBaseResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzBaseResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// Describes the analysis performed against a set of bulk data records described as a JSON array,
// JSON Lines format or CSV format.
// Ref: #/components/schemas/SzBulkDataAnalysis
type SzBulkDataAnalysis struct {
	// The state of the bulk load.
	Status OptSzBulkDataStatus `json:"status"`
	// The character encoding used to process the bulk data.
	CharacterEncoding OptString `json:"characterEncoding"`
	// The media type of the bulk data.
	MediaType OptString `json:"mediaType"`
	// The number of records found in the bulk data.  This may not match the number of "observed
	// entities" once loaded since some records may be exact duplicates.
	RecordCount OptInt32 `json:"recordCount"`
	// The number of records provided that include a `RECORD_ID` value.
	RecordsWithRecordIdCount OptInt32 `json:"recordsWithRecordIdCount"`
	// The number of records provided that include a `DATA_SOURCE` value.
	RecordsWithDataSourceCount OptInt32 `json:"recordsWithDataSourceCount"`
	// The array of `SzDataSourceRecordAnalysis` elements providing statistics on the records by data
	// source.
	AnalysisByDataSource []SzDataSourceRecordAnalysis `json:"analysisByDataSource"`
}

// GetStatus returns the value of Status.
func (s *SzBulkDataAnalysis) GetStatus() OptSzBulkDataStatus {
	return s.Status
}

// GetCharacterEncoding returns the value of CharacterEncoding.
func (s *SzBulkDataAnalysis) GetCharacterEncoding() OptString {
	return s.CharacterEncoding
}

// GetMediaType returns the value of MediaType.
func (s *SzBulkDataAnalysis) GetMediaType() OptString {
	return s.MediaType
}

// GetRecordCount returns the value of RecordCount.
func (s *SzBulkDataAnalysis) GetRecordCount() OptInt32 {
	return s.RecordCount
}

// GetRecordsWithRecordIdCount returns the value of RecordsWithRecordIdCount.
func (s *SzBulkDataAnalysis) GetRecordsWithRecordIdCount() OptInt32 {
	return s.RecordsWithRecordIdCount
}

// GetRecordsWithDataSourceCount returns the value of RecordsWithDataSourceCount.
func (s *SzBulkDataAnalysis) GetRecordsWithDataSourceCount() OptInt32 {
	return s.RecordsWithDataSourceCount
}

// GetAnalysisByDataSource returns the value of AnalysisByDataSource.
func (s *SzBulkDataAnalysis) GetAnalysisByDataSource() []SzDataSourceRecordAnalysis {
	return s.AnalysisByDataSource
}

// SetStatus sets the value of Status.
func (s *SzBulkDataAnalysis) SetStatus(val OptSzBulkDataStatus) {
	s.Status = val
}

// SetCharacterEncoding sets the value of CharacterEncoding.
func (s *SzBulkDataAnalysis) SetCharacterEncoding(val OptString) {
	s.CharacterEncoding = val
}

// SetMediaType sets the value of MediaType.
func (s *SzBulkDataAnalysis) SetMediaType(val OptString) {
	s.MediaType = val
}

// SetRecordCount sets the value of RecordCount.
func (s *SzBulkDataAnalysis) SetRecordCount(val OptInt32) {
	s.RecordCount = val
}

// SetRecordsWithRecordIdCount sets the value of RecordsWithRecordIdCount.
func (s *SzBulkDataAnalysis) SetRecordsWithRecordIdCount(val OptInt32) {
	s.RecordsWithRecordIdCount = val
}

// SetRecordsWithDataSourceCount sets the value of RecordsWithDataSourceCount.
func (s *SzBulkDataAnalysis) SetRecordsWithDataSourceCount(val OptInt32) {
	s.RecordsWithDataSourceCount = val
}

// SetAnalysisByDataSource sets the value of AnalysisByDataSource.
func (s *SzBulkDataAnalysis) SetAnalysisByDataSource(val []SzDataSourceRecordAnalysis) {
	s.AnalysisByDataSource = val
}

// Merged schema.
// Ref: #/components/schemas/SzBulkDataAnalysisResponse
type SzBulkDataAnalysisResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The `SzBulkDataAnalysis` describing the analysis of the bulk records.
	Data OptSzBulkDataAnalysis `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzBulkDataAnalysisResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzBulkDataAnalysisResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetData returns the value of Data.
func (s *SzBulkDataAnalysisResponse) GetData() OptSzBulkDataAnalysis {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzBulkDataAnalysisResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzBulkDataAnalysisResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetData sets the value of Data.
func (s *SzBulkDataAnalysisResponse) SetData(val OptSzBulkDataAnalysis) {
	s.Data = val
}

func (*SzBulkDataAnalysisResponse) analyzeBulkRecordsRes() {}

// Describes the status of a bulk data operation:
// * `NOT_STARTED` - The bulk data operation has not started.
// * `IN_PROGRESS` - If bulk data operation is in progress.
// * `ABORTED` - The bulk data operation was aborted.
// * `COMPLETED` - The bulk data operation completed normally.
// Ref: #/components/schemas/SzBulkDataStatus
type SzBulkDataStatus string

const (
	SzBulkDataStatusNOTSTARTED SzBulkDataStatus = "NOT_STARTED"
	SzBulkDataStatusINPROGRESS SzBulkDataStatus = "IN_PROGRESS"
	SzBulkDataStatusABORTED    SzBulkDataStatus = "ABORTED"
	SzBulkDataStatusCOMPLETED  SzBulkDataStatus = "COMPLETED"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzBulkDataStatus) MarshalText() ([]byte, error) {
	switch s {
	case SzBulkDataStatusNOTSTARTED:
		return []byte(s), nil
	case SzBulkDataStatusINPROGRESS:
		return []byte(s), nil
	case SzBulkDataStatusABORTED:
		return []byte(s), nil
	case SzBulkDataStatusCOMPLETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzBulkDataStatus) UnmarshalText(data []byte) error {
	switch SzBulkDataStatus(data) {
	case SzBulkDataStatusNOTSTARTED:
		*s = SzBulkDataStatusNOTSTARTED
		return nil
	case SzBulkDataStatusINPROGRESS:
		*s = SzBulkDataStatusINPROGRESS
		return nil
	case SzBulkDataStatusABORTED:
		*s = SzBulkDataStatusABORTED
		return nil
	case SzBulkDataStatusCOMPLETED:
		*s = SzBulkDataStatusCOMPLETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes an error and the number of times it occurred.
// Ref: #/components/schemas/SzBulkLoadError
type SzBulkLoadError struct {
	// The error that occurred.
	Error OptSzError `json:"error"`
	// The number of times the error occurred while loading data from the bulk data set.
	OccurrenceCount OptInt32 `json:"occurrenceCount"`
}

// GetError returns the value of Error.
func (s *SzBulkLoadError) GetError() OptSzError {
	return s.Error
}

// GetOccurrenceCount returns the value of OccurrenceCount.
func (s *SzBulkLoadError) GetOccurrenceCount() OptInt32 {
	return s.OccurrenceCount
}

// SetError sets the value of Error.
func (s *SzBulkLoadError) SetError(val OptSzError) {
	s.Error = val
}

// SetOccurrenceCount sets the value of OccurrenceCount.
func (s *SzBulkLoadError) SetOccurrenceCount(val OptInt32) {
	s.OccurrenceCount = val
}

// Merged schema.
// Ref: #/components/schemas/SzBulkLoadResponse
type SzBulkLoadResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The `SzBulkLoadResult` describing the load statistics from loading a bulk data set.
	Data OptSzBulkLoadResult `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzBulkLoadResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzBulkLoadResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetData returns the value of Data.
func (s *SzBulkLoadResponse) GetData() OptSzBulkLoadResult {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzBulkLoadResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzBulkLoadResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetData sets the value of Data.
func (s *SzBulkLoadResponse) SetData(val OptSzBulkLoadResult) {
	s.Data = val
}

func (*SzBulkLoadResponse) loadBulkRecordsRes() {}

// Merged schema.
// Ref: #/components/schemas/SzBulkLoadResult
type SzBulkLoadResult struct {
	// The number of records found in the bulk data set with the aggregate group.  This may not match the
	// number of "observed entities" once loaded since some records may be exact duplicates.
	RecordCount OptInt32 `json:"recordCount"`
	// The number of records successfully loaded from the bulk data set within the aggregate group.  This
	// may not match the number of "observed entities" loaded since some records may be exact duplicates.
	LoadedRecordCount OptInt32 `json:"loadedRecordCount"`
	// The number of records from the bulk data set within the aggregate group that are missing a
	// `DATA_SOURCE` value.
	IncompleteRecordCount OptInt32 `json:"incompleteRecordCount"`
	// The number of records from the bulk data set within the aggregate group that failed to load.
	FailedRecordCount OptInt32 `json:"failedRecordCount"`
	// The array of top error occurrences with the number of times they occurred when loading records
	// with the associated data source.
	TopErrors []SzBulkLoadError `json:"topErrors"`
	// The state of the bulk load.
	Status OptSzBulkDataStatus `json:"status"`
	// The character encoding used to process the bulk data.
	CharacterEncoding OptString `json:"characterEncoding"`
	// The media type of the bulk data.
	MediaType OptString `json:"mediaType"`
	// The number of records that are incomplete because they are missing the `DATA_SOURCE` field.
	MissingDataSourceCount OptInt32 `json:"missingDataSourceCount"`
	// The array of `SzDataSourceBulkDataResult` elements describing the load statistics by data source.
	ResultsByDataSource []SzDataSourceBulkLoadResult `json:"resultsByDataSource"`
}

// GetRecordCount returns the value of RecordCount.
func (s *SzBulkLoadResult) GetRecordCount() OptInt32 {
	return s.RecordCount
}

// GetLoadedRecordCount returns the value of LoadedRecordCount.
func (s *SzBulkLoadResult) GetLoadedRecordCount() OptInt32 {
	return s.LoadedRecordCount
}

// GetIncompleteRecordCount returns the value of IncompleteRecordCount.
func (s *SzBulkLoadResult) GetIncompleteRecordCount() OptInt32 {
	return s.IncompleteRecordCount
}

// GetFailedRecordCount returns the value of FailedRecordCount.
func (s *SzBulkLoadResult) GetFailedRecordCount() OptInt32 {
	return s.FailedRecordCount
}

// GetTopErrors returns the value of TopErrors.
func (s *SzBulkLoadResult) GetTopErrors() []SzBulkLoadError {
	return s.TopErrors
}

// GetStatus returns the value of Status.
func (s *SzBulkLoadResult) GetStatus() OptSzBulkDataStatus {
	return s.Status
}

// GetCharacterEncoding returns the value of CharacterEncoding.
func (s *SzBulkLoadResult) GetCharacterEncoding() OptString {
	return s.CharacterEncoding
}

// GetMediaType returns the value of MediaType.
func (s *SzBulkLoadResult) GetMediaType() OptString {
	return s.MediaType
}

// GetMissingDataSourceCount returns the value of MissingDataSourceCount.
func (s *SzBulkLoadResult) GetMissingDataSourceCount() OptInt32 {
	return s.MissingDataSourceCount
}

// GetResultsByDataSource returns the value of ResultsByDataSource.
func (s *SzBulkLoadResult) GetResultsByDataSource() []SzDataSourceBulkLoadResult {
	return s.ResultsByDataSource
}

// SetRecordCount sets the value of RecordCount.
func (s *SzBulkLoadResult) SetRecordCount(val OptInt32) {
	s.RecordCount = val
}

// SetLoadedRecordCount sets the value of LoadedRecordCount.
func (s *SzBulkLoadResult) SetLoadedRecordCount(val OptInt32) {
	s.LoadedRecordCount = val
}

// SetIncompleteRecordCount sets the value of IncompleteRecordCount.
func (s *SzBulkLoadResult) SetIncompleteRecordCount(val OptInt32) {
	s.IncompleteRecordCount = val
}

// SetFailedRecordCount sets the value of FailedRecordCount.
func (s *SzBulkLoadResult) SetFailedRecordCount(val OptInt32) {
	s.FailedRecordCount = val
}

// SetTopErrors sets the value of TopErrors.
func (s *SzBulkLoadResult) SetTopErrors(val []SzBulkLoadError) {
	s.TopErrors = val
}

// SetStatus sets the value of Status.
func (s *SzBulkLoadResult) SetStatus(val OptSzBulkDataStatus) {
	s.Status = val
}

// SetCharacterEncoding sets the value of CharacterEncoding.
func (s *SzBulkLoadResult) SetCharacterEncoding(val OptString) {
	s.CharacterEncoding = val
}

// SetMediaType sets the value of MediaType.
func (s *SzBulkLoadResult) SetMediaType(val OptString) {
	s.MediaType = val
}

// SetMissingDataSourceCount sets the value of MissingDataSourceCount.
func (s *SzBulkLoadResult) SetMissingDataSourceCount(val OptInt32) {
	s.MissingDataSourceCount = val
}

// SetResultsByDataSource sets the value of ResultsByDataSource.
func (s *SzBulkLoadResult) SetResultsByDataSource(val []SzDataSourceBulkLoadResult) {
	s.ResultsByDataSource = val
}

// Describes a candidate key that triggered the scoring of two entities.
// Ref: #/components/schemas/SzCandidateKey
type SzCandidateKey struct {
	// The identifier for the candidate feature.
	FeatureId OptInt64 `json:"featureId"`
	// The feature type for the candidate feature.
	FeatureType OptString `json:"featureType"`
	// The feature value for the candidate feature.
	FeatureValue OptString `json:"featureValue"`
}

// GetFeatureId returns the value of FeatureId.
func (s *SzCandidateKey) GetFeatureId() OptInt64 {
	return s.FeatureId
}

// GetFeatureType returns the value of FeatureType.
func (s *SzCandidateKey) GetFeatureType() OptString {
	return s.FeatureType
}

// GetFeatureValue returns the value of FeatureValue.
func (s *SzCandidateKey) GetFeatureValue() OptString {
	return s.FeatureValue
}

// SetFeatureId sets the value of FeatureId.
func (s *SzCandidateKey) SetFeatureId(val OptInt64) {
	s.FeatureId = val
}

// SetFeatureType sets the value of FeatureType.
func (s *SzCandidateKey) SetFeatureType(val OptString) {
	s.FeatureType = val
}

// SetFeatureValue sets the value of FeatureValue.
func (s *SzCandidateKey) SetFeatureValue(val OptString) {
	s.FeatureValue = val
}

// Describes a data source.
// Ref: #/components/schemas/SzDataSource
type SzDataSource struct {
	// The data source code.
	DataSourceCode OptString `json:"dataSourceCode"`
	// The data source ID. The value can be null when used for input in creating a data source to
	// indicate that the data source ID should be auto-generated.
	DataSourceId OptNilInt32 `json:"dataSourceId"`
}

// GetDataSourceCode returns the value of DataSourceCode.
func (s *SzDataSource) GetDataSourceCode() OptString {
	return s.DataSourceCode
}

// GetDataSourceId returns the value of DataSourceId.
func (s *SzDataSource) GetDataSourceId() OptNilInt32 {
	return s.DataSourceId
}

// SetDataSourceCode sets the value of DataSourceCode.
func (s *SzDataSource) SetDataSourceCode(val OptString) {
	s.DataSourceCode = val
}

// SetDataSourceId sets the value of DataSourceId.
func (s *SzDataSource) SetDataSourceId(val OptNilInt32) {
	s.DataSourceId = val
}

// Merged schema.
// Ref: #/components/schemas/SzDataSourceBulkLoadResult
type SzDataSourceBulkLoadResult struct {
	// The number of records found in the bulk data set with the aggregate group.  This may not match the
	// number of "observed entities" once loaded since some records may be exact duplicates.
	RecordCount OptInt32 `json:"recordCount"`
	// The number of records successfully loaded from the bulk data set within the aggregate group.  This
	// may not match the number of "observed entities" loaded since some records may be exact duplicates.
	LoadedRecordCount OptInt32 `json:"loadedRecordCount"`
	// The number of records from the bulk data set within the aggregate group that are missing a
	// `DATA_SOURCE` value.
	IncompleteRecordCount OptInt32 `json:"incompleteRecordCount"`
	// The number of records from the bulk data set within the aggregate group that failed to load.
	FailedRecordCount OptInt32 `json:"failedRecordCount"`
	// The array of top error occurrences with the number of times they occurred when loading records
	// with the associated data source.
	TopErrors []SzBulkLoadError `json:"topErrors"`
	// The data source code identifying the data source for which the load statistics are being provided.
	DataSource OptString `json:"dataSource"`
}

// GetRecordCount returns the value of RecordCount.
func (s *SzDataSourceBulkLoadResult) GetRecordCount() OptInt32 {
	return s.RecordCount
}

// GetLoadedRecordCount returns the value of LoadedRecordCount.
func (s *SzDataSourceBulkLoadResult) GetLoadedRecordCount() OptInt32 {
	return s.LoadedRecordCount
}

// GetIncompleteRecordCount returns the value of IncompleteRecordCount.
func (s *SzDataSourceBulkLoadResult) GetIncompleteRecordCount() OptInt32 {
	return s.IncompleteRecordCount
}

// GetFailedRecordCount returns the value of FailedRecordCount.
func (s *SzDataSourceBulkLoadResult) GetFailedRecordCount() OptInt32 {
	return s.FailedRecordCount
}

// GetTopErrors returns the value of TopErrors.
func (s *SzDataSourceBulkLoadResult) GetTopErrors() []SzBulkLoadError {
	return s.TopErrors
}

// GetDataSource returns the value of DataSource.
func (s *SzDataSourceBulkLoadResult) GetDataSource() OptString {
	return s.DataSource
}

// SetRecordCount sets the value of RecordCount.
func (s *SzDataSourceBulkLoadResult) SetRecordCount(val OptInt32) {
	s.RecordCount = val
}

// SetLoadedRecordCount sets the value of LoadedRecordCount.
func (s *SzDataSourceBulkLoadResult) SetLoadedRecordCount(val OptInt32) {
	s.LoadedRecordCount = val
}

// SetIncompleteRecordCount sets the value of IncompleteRecordCount.
func (s *SzDataSourceBulkLoadResult) SetIncompleteRecordCount(val OptInt32) {
	s.IncompleteRecordCount = val
}

// SetFailedRecordCount sets the value of FailedRecordCount.
func (s *SzDataSourceBulkLoadResult) SetFailedRecordCount(val OptInt32) {
	s.FailedRecordCount = val
}

// SetTopErrors sets the value of TopErrors.
func (s *SzDataSourceBulkLoadResult) SetTopErrors(val []SzBulkLoadError) {
	s.TopErrors = val
}

// SetDataSource sets the value of DataSource.
func (s *SzDataSourceBulkLoadResult) SetDataSource(val OptString) {
	s.DataSource = val
}

// Describes a data source either as only its data source code or as an `SzDataSource` object.
// Ref: #/components/schemas/SzDataSourceDescriptor
// SzDataSourceDescriptor represents sum type.
type SzDataSourceDescriptor struct {
	Type         SzDataSourceDescriptorType // switch on this field
	String       string
	SzDataSource SzDataSource
}

// SzDataSourceDescriptorType is oneOf type of SzDataSourceDescriptor.
type SzDataSourceDescriptorType string

// Possible values for SzDataSourceDescriptorType.
const (
	StringSzDataSourceDescriptor       SzDataSourceDescriptorType = "string"
	SzDataSourceSzDataSourceDescriptor SzDataSourceDescriptorType = "SzDataSource"
)

// IsString reports whether SzDataSourceDescriptor is string.
func (s SzDataSourceDescriptor) IsString() bool { return s.Type == StringSzDataSourceDescriptor }

// IsSzDataSource reports whether SzDataSourceDescriptor is SzDataSource.
func (s SzDataSourceDescriptor) IsSzDataSource() bool {
	return s.Type == SzDataSourceSzDataSourceDescriptor
}

// SetString sets SzDataSourceDescriptor to string.
func (s *SzDataSourceDescriptor) SetString(v string) {
	s.Type = StringSzDataSourceDescriptor
	s.String = v
}

// GetString returns string and true boolean if SzDataSourceDescriptor is string.
func (s SzDataSourceDescriptor) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringSzDataSourceDescriptor returns new SzDataSourceDescriptor from string.
func NewStringSzDataSourceDescriptor(v string) SzDataSourceDescriptor {
	var s SzDataSourceDescriptor
	s.SetString(v)
	return s
}

// SetSzDataSource sets SzDataSourceDescriptor to SzDataSource.
func (s *SzDataSourceDescriptor) SetSzDataSource(v SzDataSource) {
	s.Type = SzDataSourceSzDataSourceDescriptor
	s.SzDataSource = v
}

// GetSzDataSource returns SzDataSource and true boolean if SzDataSourceDescriptor is SzDataSource.
func (s SzDataSourceDescriptor) GetSzDataSource() (v SzDataSource, ok bool) {
	if !s.IsSzDataSource() {
		return v, false
	}
	return s.SzDataSource, true
}

// NewSzDataSourceSzDataSourceDescriptor returns new SzDataSourceDescriptor from SzDataSource.
func NewSzDataSourceSzDataSourceDescriptor(v SzDataSource) SzDataSourceDescriptor {
	var s SzDataSourceDescriptor
	s.SetSzDataSource(v)
	return s
}

// Provides statistics specific to a given data source of the records found in bulk data.
// Ref: #/components/schemas/SzDataSourceRecordAnalysis
type SzDataSourceRecordAnalysis struct {
	// The data source code identifying the data source for which the statistics are being provided.
	// This is `null` if the statistics pertain to those records with no data source defined in the
	// source data.
	DataSource OptNilString `json:"dataSource"`
	// The number of records having the associated data source.
	RecordCount OptInt32 `json:"recordCount"`
	// The number of records having the associated data source that include a `RECORD_ID` value.
	RecordsWithRecordIdCount OptInt32 `json:"recordsWithRecordIdCount"`
}

// GetDataSource returns the value of DataSource.
func (s *SzDataSourceRecordAnalysis) GetDataSource() OptNilString {
	return s.DataSource
}

// GetRecordCount returns the value of RecordCount.
func (s *SzDataSourceRecordAnalysis) GetRecordCount() OptInt32 {
	return s.RecordCount
}

// GetRecordsWithRecordIdCount returns the value of RecordsWithRecordIdCount.
func (s *SzDataSourceRecordAnalysis) GetRecordsWithRecordIdCount() OptInt32 {
	return s.RecordsWithRecordIdCount
}

// SetDataSource sets the value of DataSource.
func (s *SzDataSourceRecordAnalysis) SetDataSource(val OptNilString) {
	s.DataSource = val
}

// SetRecordCount sets the value of RecordCount.
func (s *SzDataSourceRecordAnalysis) SetRecordCount(val OptInt32) {
	s.RecordCount = val
}

// SetRecordsWithRecordIdCount sets the value of RecordsWithRecordIdCount.
func (s *SzDataSourceRecordAnalysis) SetRecordsWithRecordIdCount(val OptInt32) {
	s.RecordsWithRecordIdCount = val
}

// Describes the number of records associated with a specific data source for a given resolved entity.
//
//	Optionally, if the complete set of records has been retrieved for the associated entity, then
//
// this may also contain the "top 10" record IDs for the associated data source.
// Ref: #/components/schemas/SzDataSourceRecordSummary
type SzDataSourceRecordSummary struct {
	// The data source code identifying the data source for which the record breakdown is being described.
	DataSource OptString `json:"dataSource"`
	// The number of records from the respective data source that are part of the associated resolved
	// entity.
	RecordCount OptInt32 `json:"recordCount"`
	// The optional array of string record ID's identifying the top 10 records for the associated entity
	// from the respective data source. This may be null or an empty array if the data was not available.
	TopRecordIds OptNilStringArray `json:"topRecordIds"`
}

// GetDataSource returns the value of DataSource.
func (s *SzDataSourceRecordSummary) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordCount returns the value of RecordCount.
func (s *SzDataSourceRecordSummary) GetRecordCount() OptInt32 {
	return s.RecordCount
}

// GetTopRecordIds returns the value of TopRecordIds.
func (s *SzDataSourceRecordSummary) GetTopRecordIds() OptNilStringArray {
	return s.TopRecordIds
}

// SetDataSource sets the value of DataSource.
func (s *SzDataSourceRecordSummary) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordCount sets the value of RecordCount.
func (s *SzDataSourceRecordSummary) SetRecordCount(val OptInt32) {
	s.RecordCount = val
}

// SetTopRecordIds sets the value of TopRecordIds.
func (s *SzDataSourceRecordSummary) SetTopRecordIds(val OptNilStringArray) {
	s.TopRecordIds = val
}

// Merged schema.
// Ref: #/components/schemas/SzDataSourceResponse
type SzDataSourceResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzDataSourceResponseRawData `json:"rawData"`
	Data    OptSzDataSourceResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzDataSourceResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzDataSourceResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzDataSourceResponse) GetRawData() OptNilSzDataSourceResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzDataSourceResponse) GetData() OptSzDataSourceResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzDataSourceResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzDataSourceResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzDataSourceResponse) SetRawData(val OptNilSzDataSourceResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzDataSourceResponse) SetData(val OptSzDataSourceResponseData) {
	s.Data = val
}

func (*SzDataSourceResponse) getDataSourceRes() {}

// Describes the data associated with `SzDataSourceResponse`.
// Ref: #/components/schemas/SzDataSourceResponseData
type SzDataSourceResponseData struct {
	// The requested data source as an `SzDataSource` object.
	DataSource OptSzDataSource `json:"dataSource"`
}

// GetDataSource returns the value of DataSource.
func (s *SzDataSourceResponseData) GetDataSource() OptSzDataSource {
	return s.DataSource
}

// SetDataSource sets the value of DataSource.
func (s *SzDataSourceResponseData) SetDataSource(val OptSzDataSource) {
	s.DataSource = val
}

// The RAW result from the underlying native API function.
type SzDataSourceResponseRawData map[string]jx.Raw

func (s *SzDataSourceResponseRawData) init() SzDataSourceResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzDataSourcesResponse
type SzDataSourcesResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzDataSourcesResponseRawData `json:"rawData"`
	Data    OptSzDataSourcesResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzDataSourcesResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzDataSourcesResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzDataSourcesResponse) GetRawData() OptNilSzDataSourcesResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzDataSourcesResponse) GetData() OptSzDataSourcesResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzDataSourcesResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzDataSourcesResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzDataSourcesResponse) SetRawData(val OptNilSzDataSourcesResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzDataSourcesResponse) SetData(val OptSzDataSourcesResponseData) {
	s.Data = val
}

func (*SzDataSourcesResponse) addDataSourcesRes() {}
func (*SzDataSourcesResponse) getDataSourcesRes() {}

// Describes the data for `SzDataSourceResponse`.
// Ref: #/components/schemas/SzDataSourcesResponseData
type SzDataSourcesResponseData struct {
	// The list of data source codes for the configured data sources.
	DataSources []string `json:"dataSources"`
	// The list of `SzDataSource` instances describing the data sources that are configured.
	DataSourceDetails OptSzDataSourcesResponseDataDataSourceDetails `json:"dataSourceDetails"`
}

// GetDataSources returns the value of DataSources.
func (s *SzDataSourcesResponseData) GetDataSources() []string {
	return s.DataSources
}

// GetDataSourceDetails returns the value of DataSourceDetails.
func (s *SzDataSourcesResponseData) GetDataSourceDetails() OptSzDataSourcesResponseDataDataSourceDetails {
	return s.DataSourceDetails
}

// SetDataSources sets the value of DataSources.
func (s *SzDataSourcesResponseData) SetDataSources(val []string) {
	s.DataSources = val
}

// SetDataSourceDetails sets the value of DataSourceDetails.
func (s *SzDataSourcesResponseData) SetDataSourceDetails(val OptSzDataSourcesResponseDataDataSourceDetails) {
	s.DataSourceDetails = val
}

// The list of `SzDataSource` instances describing the data sources that are configured.
type SzDataSourcesResponseDataDataSourceDetails map[string]SzDataSource

func (s *SzDataSourcesResponseDataDataSourceDetails) init() SzDataSourcesResponseDataDataSourceDetails {
	m := *s
	if m == nil {
		m = map[string]SzDataSource{}
		*s = m
	}
	return m
}

// The RAW result from the underlying native API function.
type SzDataSourcesResponseRawData map[string]jx.Raw

func (s *SzDataSourcesResponseRawData) init() SzDataSourcesResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzDeleteRecordResponse
type SzDeleteRecordResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzDeleteRecordResponseRawData `json:"rawData"`
	Data    OptSzDeleteRecordResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzDeleteRecordResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzDeleteRecordResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzDeleteRecordResponse) GetRawData() OptNilSzDeleteRecordResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzDeleteRecordResponse) GetData() OptSzDeleteRecordResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzDeleteRecordResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzDeleteRecordResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzDeleteRecordResponse) SetRawData(val OptNilSzDeleteRecordResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzDeleteRecordResponse) SetData(val OptSzDeleteRecordResponseData) {
	s.Data = val
}

func (*SzDeleteRecordResponse) deleteRecordRes() {}

// Describes the data segment of `SzDeleteRecordResponse`.
// Ref: #/components/schemas/SzDeleteRecordResponseData
type SzDeleteRecordResponseData struct {
	// The optionally requested info associated with the load.
	Info OptSzResolutionInfo `json:"info"`
}

// GetInfo returns the value of Info.
func (s *SzDeleteRecordResponseData) GetInfo() OptSzResolutionInfo {
	return s.Info
}

// SetInfo sets the value of Info.
func (s *SzDeleteRecordResponseData) SetInfo(val OptSzResolutionInfo) {
	s.Info = val
}

// The RAW result from the underlying native API function.
type SzDeleteRecordResponseRawData map[string]jx.Raw

func (s *SzDeleteRecordResponseRawData) init() SzDeleteRecordResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes the level of detail desired for entity data when obtained via the various endpoints that
// return entity data.  Details for features of entities as well as the related entities of entities
// are controlled by other flags.  Possible values are:
// * `BARE_MINIMAL` - The entities returned will include only their
// entity ID's.  No record information is returned
// and if related entities are included, they too will
// only be described by their entity ID's and will
// **not** include any matching info.
// * `NETWORK_MINIMAL` - Identical to `BARE_MINIMAL` except in the case
// of related entities being included they will
// also include related matching info.
// * `MINIMAL` - The entities returned will include at most their
// entity ID's as well as identifiers for their
// constituent records (i.e.: data source code and record
// ID for each record).  This detail level is optimized for
// the fastest possible processing time.
// * `BRIEF` - Builds upon `MINIMAL` to add the entity name and related
// entity match info when related entity match info when
// related entities are included.  This detail level aims to
// maintain as much speed as possible while providing names
// and relationship information for rendering a graph.
// * `SUMMARY` - Identical to `BRIEF` except that individual record
// identifier information is excluded, leaving only the
// record summary (i.e.: a record count by data source
// code).  This reduces the size of the JSON document for
// large entities with thousands of records.  It may take
// longer to process than `BRIEF` but less data is
// returned as well, speeding up network transfer times.
// * `VERBOSE` - Combines `BRIEF` and `SUMMARY` and then adds the
// original JSON data for each record, the record-level
// matching info, as well as formatted record data.  NOTE:
// the record-level matching info returned via "how" and
// "why" is often more useful than that embedded in the
// entity.  Further, the formatted record data, while
// readable, is not formatted according to locale (i.e.:
// address, name and date formatting may not appear as
// expected to a user).
// Ref: #/components/schemas/SzDetailLevel
type SzDetailLevel string

const (
	SzDetailLevelBAREMINIMAL    SzDetailLevel = "BARE_MINIMAL"
	SzDetailLevelNETWORKMINIMAL SzDetailLevel = "NETWORK_MINIMAL"
	SzDetailLevelMINIMAL        SzDetailLevel = "MINIMAL"
	SzDetailLevelBRIEF          SzDetailLevel = "BRIEF"
	SzDetailLevelSUMMARY        SzDetailLevel = "SUMMARY"
	SzDetailLevelVERBOSE        SzDetailLevel = "VERBOSE"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzDetailLevel) MarshalText() ([]byte, error) {
	switch s {
	case SzDetailLevelBAREMINIMAL:
		return []byte(s), nil
	case SzDetailLevelNETWORKMINIMAL:
		return []byte(s), nil
	case SzDetailLevelMINIMAL:
		return []byte(s), nil
	case SzDetailLevelBRIEF:
		return []byte(s), nil
	case SzDetailLevelSUMMARY:
		return []byte(s), nil
	case SzDetailLevelVERBOSE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzDetailLevel) UnmarshalText(data []byte) error {
	switch SzDetailLevel(data) {
	case SzDetailLevelBAREMINIMAL:
		*s = SzDetailLevelBAREMINIMAL
		return nil
	case SzDetailLevelNETWORKMINIMAL:
		*s = SzDetailLevelNETWORKMINIMAL
		return nil
	case SzDetailLevelMINIMAL:
		*s = SzDetailLevelMINIMAL
		return nil
	case SzDetailLevelBRIEF:
		*s = SzDetailLevelBRIEF
		return nil
	case SzDetailLevelSUMMARY:
		*s = SzDetailLevelSUMMARY
		return nil
	case SzDetailLevelVERBOSE:
		*s = SzDetailLevelVERBOSE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes a relationship that is disclosed between two records so that the respective entities are
// related.
// Ref: #/components/schemas/SzDisclosedRelation
type SzDisclosedRelation struct {
	// The domain of the relationship (e.g.: spouses, parent/child, employer/employee, corporate
	// hierarchy, etc...).
	Domain OptString `json:"domain"`
	// The direction of the relationship.
	Direction OptSzRelationDirection `json:"direction"`
	// The relationship roles (aka: usage types) assigned to the first entity in the relationship.
	Roles1 []string `json:"roles1"`
	// The relationship roles (aka: usage types) assigned to the second entity in the relationship.
	Roles2 []string `json:"roles2"`
	// The array of `SzRelatedFeatures` instances that the disclosed relationship is composed of.
	RelatedFeatures []SzRelatedFeatures `json:"relatedFeatures"`
}

// GetDomain returns the value of Domain.
func (s *SzDisclosedRelation) GetDomain() OptString {
	return s.Domain
}

// GetDirection returns the value of Direction.
func (s *SzDisclosedRelation) GetDirection() OptSzRelationDirection {
	return s.Direction
}

// GetRoles1 returns the value of Roles1.
func (s *SzDisclosedRelation) GetRoles1() []string {
	return s.Roles1
}

// GetRoles2 returns the value of Roles2.
func (s *SzDisclosedRelation) GetRoles2() []string {
	return s.Roles2
}

// GetRelatedFeatures returns the value of RelatedFeatures.
func (s *SzDisclosedRelation) GetRelatedFeatures() []SzRelatedFeatures {
	return s.RelatedFeatures
}

// SetDomain sets the value of Domain.
func (s *SzDisclosedRelation) SetDomain(val OptString) {
	s.Domain = val
}

// SetDirection sets the value of Direction.
func (s *SzDisclosedRelation) SetDirection(val OptSzRelationDirection) {
	s.Direction = val
}

// SetRoles1 sets the value of Roles1.
func (s *SzDisclosedRelation) SetRoles1(val []string) {
	s.Roles1 = val
}

// SetRoles2 sets the value of Roles2.
func (s *SzDisclosedRelation) SetRoles2(val []string) {
	s.Roles2 = val
}

// SetRelatedFeatures sets the value of RelatedFeatures.
func (s *SzDisclosedRelation) SetRelatedFeatures(val []SzRelatedFeatures) {
	s.RelatedFeatures = val
}

// Describes an entity and the entities related to that entity at one degree of separation.
// Ref: #/components/schemas/SzEntityData
type SzEntityData struct {
	// The ResolvedEntity describing the primary entity.
	ResolvedEntity OptSzResolvedEntity `json:"resolvedEntity"`
	// The array of RelatedEntity instances describing the possible matches, discovered relationships,
	// and disclosed relationships.
	RelatedEntities []SzRelatedEntity `json:"relatedEntities"`
}

// GetResolvedEntity returns the value of ResolvedEntity.
func (s *SzEntityData) GetResolvedEntity() OptSzResolvedEntity {
	return s.ResolvedEntity
}

// GetRelatedEntities returns the value of RelatedEntities.
func (s *SzEntityData) GetRelatedEntities() []SzRelatedEntity {
	return s.RelatedEntities
}

// SetResolvedEntity sets the value of ResolvedEntity.
func (s *SzEntityData) SetResolvedEntity(val OptSzResolvedEntity) {
	s.ResolvedEntity = val
}

// SetRelatedEntities sets the value of RelatedEntities.
func (s *SzEntityData) SetRelatedEntities(val []SzRelatedEntity) {
	s.RelatedEntities = val
}

// Describes a feature for an entity as well as including any close values for the feature that were
// considered to be duplicate values for entity resolution purposes.
// Ref: #/components/schemas/SzEntityFeature
type SzEntityFeature struct {
	// The internal ID for the primary feature value.
	PrimaryId OptInt64 `json:"primaryId"`
	// The primary value for the feature.
	PrimaryValue OptString `json:"primaryValue"`
	// The optional associated usage type (e.g.: "HOME" or "WORK").
	UsageType OptNilString `json:"usageType"`
	// The array of values that are close enough to the primary value for the feature that they are
	// considered to be duplicate values for the purpose of entity resolution.
	DuplicateValues []string `json:"duplicateValues"`
	// The array of `SzEntityFeatureDetail` instances describing the each of the clustered feature values
	// in detail.
	FeatureDetails []SzEntityFeatureDetail `json:"featureDetails"`
}

// GetPrimaryId returns the value of PrimaryId.
func (s *SzEntityFeature) GetPrimaryId() OptInt64 {
	return s.PrimaryId
}

// GetPrimaryValue returns the value of PrimaryValue.
func (s *SzEntityFeature) GetPrimaryValue() OptString {
	return s.PrimaryValue
}

// GetUsageType returns the value of UsageType.
func (s *SzEntityFeature) GetUsageType() OptNilString {
	return s.UsageType
}

// GetDuplicateValues returns the value of DuplicateValues.
func (s *SzEntityFeature) GetDuplicateValues() []string {
	return s.DuplicateValues
}

// GetFeatureDetails returns the value of FeatureDetails.
func (s *SzEntityFeature) GetFeatureDetails() []SzEntityFeatureDetail {
	return s.FeatureDetails
}

// SetPrimaryId sets the value of PrimaryId.
func (s *SzEntityFeature) SetPrimaryId(val OptInt64) {
	s.PrimaryId = val
}

// SetPrimaryValue sets the value of PrimaryValue.
func (s *SzEntityFeature) SetPrimaryValue(val OptString) {
	s.PrimaryValue = val
}

// SetUsageType sets the value of UsageType.
func (s *SzEntityFeature) SetUsageType(val OptNilString) {
	s.UsageType = val
}

// SetDuplicateValues sets the value of DuplicateValues.
func (s *SzEntityFeature) SetDuplicateValues(val []string) {
	s.DuplicateValues = val
}

// SetFeatureDetails sets the value of FeatureDetails.
func (s *SzEntityFeature) SetFeatureDetails(val []SzEntityFeatureDetail) {
	s.FeatureDetails = val
}

// Describes the details of an entity feature value, optionally including statistics if they have
// been requested.
// Ref: #/components/schemas/SzEntityFeatureDetail
type SzEntityFeatureDetail struct {
	// The internal ID for the feature value.
	InternalId OptInt64 `json:"internalId"`
	// The feature value.
	FeatureValue OptString `json:"featureValue"`
	// The `SzEntityFeatureStatistics` describing the statistics for the feature value.  This may be
	// `null` if the statistics were not requested.
	Statistics OptSzEntityFeatureStatistics `json:"statistics"`
}

// GetInternalId returns the value of InternalId.
func (s *SzEntityFeatureDetail) GetInternalId() OptInt64 {
	return s.InternalId
}

// GetFeatureValue returns the value of FeatureValue.
func (s *SzEntityFeatureDetail) GetFeatureValue() OptString {
	return s.FeatureValue
}

// GetStatistics returns the value of Statistics.
func (s *SzEntityFeatureDetail) GetStatistics() OptSzEntityFeatureStatistics {
	return s.Statistics
}

// SetInternalId sets the value of InternalId.
func (s *SzEntityFeatureDetail) SetInternalId(val OptInt64) {
	s.InternalId = val
}

// SetFeatureValue sets the value of FeatureValue.
func (s *SzEntityFeatureDetail) SetFeatureValue(val OptString) {
	s.FeatureValue = val
}

// SetStatistics sets the value of Statistics.
func (s *SzEntityFeatureDetail) SetStatistics(val OptSzEntityFeatureStatistics) {
	s.Statistics = val
}

// Describes the entity resolution statistics for the feature value.
// Ref: #/components/schemas/SzEntityFeatureStatistics
type SzEntityFeatureStatistics struct {
	// Indicates if the feature is used for finding candidates during entity resolution.
	UsedForCandidates OptBool `json:"usedForCandidates"`
	// Indicates if the feature is used for scoring during entity resolution.
	UsedForScoring OptBool `json:"usedForScoring"`
	// The number of entities having this feature value.
	EntityCount OptInt64 `json:"entityCount"`
	// Indicates if this feature value is no longer being used to find candidates because too many
	// entities share the same value.
	CandidateCapReached OptBool `json:"candidateCapReached"`
	// Indicates if this feature value is no longer being used in entity scoring because too many
	// entities share the same value.
	ScoringCapReached OptBool `json:"scoringCapReached"`
	// Indicates if this value was suppressed in favor of a more complete value.
	Suppressed OptBool `json:"suppressed"`
}

// GetUsedForCandidates returns the value of UsedForCandidates.
func (s *SzEntityFeatureStatistics) GetUsedForCandidates() OptBool {
	return s.UsedForCandidates
}

// GetUsedForScoring returns the value of UsedForScoring.
func (s *SzEntityFeatureStatistics) GetUsedForScoring() OptBool {
	return s.UsedForScoring
}

// GetEntityCount returns the value of EntityCount.
func (s *SzEntityFeatureStatistics) GetEntityCount() OptInt64 {
	return s.EntityCount
}

// GetCandidateCapReached returns the value of CandidateCapReached.
func (s *SzEntityFeatureStatistics) GetCandidateCapReached() OptBool {
	return s.CandidateCapReached
}

// GetScoringCapReached returns the value of ScoringCapReached.
func (s *SzEntityFeatureStatistics) GetScoringCapReached() OptBool {
	return s.ScoringCapReached
}

// GetSuppressed returns the value of Suppressed.
func (s *SzEntityFeatureStatistics) GetSuppressed() OptBool {
	return s.Suppressed
}

// SetUsedForCandidates sets the value of UsedForCandidates.
func (s *SzEntityFeatureStatistics) SetUsedForCandidates(val OptBool) {
	s.UsedForCandidates = val
}

// SetUsedForScoring sets the value of UsedForScoring.
func (s *SzEntityFeatureStatistics) SetUsedForScoring(val OptBool) {
	s.UsedForScoring = val
}

// SetEntityCount sets the value of EntityCount.
func (s *SzEntityFeatureStatistics) SetEntityCount(val OptInt64) {
	s.EntityCount = val
}

// SetCandidateCapReached sets the value of CandidateCapReached.
func (s *SzEntityFeatureStatistics) SetCandidateCapReached(val OptBool) {
	s.CandidateCapReached = val
}

// SetScoringCapReached sets the value of ScoringCapReached.
func (s *SzEntityFeatureStatistics) SetScoringCapReached(val OptBool) {
	s.ScoringCapReached = val
}

// SetSuppressed sets the value of Suppressed.
func (s *SzEntityFeatureStatistics) SetSuppressed(val OptBool) {
	s.Suppressed = val
}

// Identifies an entity by either its entity ID or by the data source code and record ID of one of
// its constituent records.  If a record ID is specified then it is either as a JSON-encoded
// `SzRecordId` or a delimited string where the first character is the delimiter, followed by the
// data source code, then the delimiter and the record ID (e.g.: `|CUSTOMERS|ABC123`).
// Ref: #/components/schemas/SzEntityIdentifier
// SzEntityIdentifier represents sum type.
type SzEntityIdentifier struct {
	Type       SzEntityIdentifierType // switch on this field
	Int64      int64
	SzRecordId SzRecordId
	String     string
}

// SzEntityIdentifierType is oneOf type of SzEntityIdentifier.
type SzEntityIdentifierType string

// Possible values for SzEntityIdentifierType.
const (
	Int64SzEntityIdentifier      SzEntityIdentifierType = "int64"
	SzRecordIdSzEntityIdentifier SzEntityIdentifierType = "SzRecordId"
	StringSzEntityIdentifier     SzEntityIdentifierType = "string"
)

// IsInt64 reports whether SzEntityIdentifier is int64.
func (s SzEntityIdentifier) IsInt64() bool { return s.Type == Int64SzEntityIdentifier }

// IsSzRecordId reports whether SzEntityIdentifier is SzRecordId.
func (s SzEntityIdentifier) IsSzRecordId() bool { return s.Type == SzRecordIdSzEntityIdentifier }

// IsString reports whether SzEntityIdentifier is string.
func (s SzEntityIdentifier) IsString() bool { return s.Type == StringSzEntityIdentifier }

// SetInt64 sets SzEntityIdentifier to int64.
func (s *SzEntityIdentifier) SetInt64(v int64) {
	s.Type = Int64SzEntityIdentifier
	s.Int64 = v
}

// GetInt64 returns int64 and true boolean if SzEntityIdentifier is int64.
func (s SzEntityIdentifier) GetInt64() (v int64, ok bool) {
	if !s.IsInt64() {
		return v, false
	}
	return s.Int64, true
}

// NewInt64SzEntityIdentifier returns new SzEntityIdentifier from int64.
func NewInt64SzEntityIdentifier(v int64) SzEntityIdentifier {
	var s SzEntityIdentifier
	s.SetInt64(v)
	return s
}

// SetSzRecordId sets SzEntityIdentifier to SzRecordId.
func (s *SzEntityIdentifier) SetSzRecordId(v SzRecordId) {
	s.Type = SzRecordIdSzEntityIdentifier
	s.SzRecordId = v
}

// GetSzRecordId returns SzRecordId and true boolean if SzEntityIdentifier is SzRecordId.
func (s SzEntityIdentifier) GetSzRecordId() (v SzRecordId, ok bool) {
	if !s.IsSzRecordId() {
		return v, false
	}
	return s.SzRecordId, true
}

// NewSzRecordIdSzEntityIdentifier returns new SzEntityIdentifier from SzRecordId.
func NewSzRecordIdSzEntityIdentifier(v SzRecordId) SzEntityIdentifier {
	var s SzEntityIdentifier
	s.SetSzRecordId(v)
	return s
}

// SetString sets SzEntityIdentifier to string.
func (s *SzEntityIdentifier) SetString(v string) {
	s.Type = StringSzEntityIdentifier
	s.String = v
}

// GetString returns string and true boolean if SzEntityIdentifier is string.
func (s SzEntityIdentifier) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringSzEntityIdentifier returns new SzEntityIdentifier from string.
func NewStringSzEntityIdentifier(v string) SzEntityIdentifier {
	var s SzEntityIdentifier
	s.SetString(v)
	return s
}

// Describes a network of paths between entities using the entity IDs of the entities in the path and
// includes the data from the actual entities in the network.
// Ref: #/components/schemas/SzEntityNetworkData
type SzEntityNetworkData struct {
	// The array of `SzEntityPath` objects describing the paths that make up the entity network
	// (including island networks).
	EntityPaths []SzEntityPath `json:"entityPaths"`
	// The array of `SzEntityData` objects describing the entities on the path.  This may only include
	// partial information on the entities at the edge of the network.
	Entities []SzEntityData `json:"entities"`
}

// GetEntityPaths returns the value of EntityPaths.
func (s *SzEntityNetworkData) GetEntityPaths() []SzEntityPath {
	return s.EntityPaths
}

// GetEntities returns the value of Entities.
func (s *SzEntityNetworkData) GetEntities() []SzEntityData {
	return s.Entities
}

// SetEntityPaths sets the value of EntityPaths.
func (s *SzEntityNetworkData) SetEntityPaths(val []SzEntityPath) {
	s.EntityPaths = val
}

// SetEntities sets the value of Entities.
func (s *SzEntityNetworkData) SetEntities(val []SzEntityData) {
	s.Entities = val
}

// Merged schema.
// Ref: #/components/schemas/SzEntityNetworkResponse
type SzEntityNetworkResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzEntityNetworkResponseRawData `json:"rawData"`
	Data    OptSzEntityNetworkData               `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzEntityNetworkResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzEntityNetworkResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzEntityNetworkResponse) GetRawData() OptNilSzEntityNetworkResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzEntityNetworkResponse) GetData() OptSzEntityNetworkData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzEntityNetworkResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzEntityNetworkResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzEntityNetworkResponse) SetRawData(val OptNilSzEntityNetworkResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzEntityNetworkResponse) SetData(val OptSzEntityNetworkData) {
	s.Data = val
}

func (*SzEntityNetworkResponse) findEntityNetworkRes() {}

// The RAW result from the underlying native API function.
type SzEntityNetworkResponseRawData map[string]jx.Raw

func (s *SzEntityNetworkResponseRawData) init() SzEntityNetworkResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes a path between two entities using the entity IDs of the entities in the path.
// Ref: #/components/schemas/SzEntityPath
type SzEntityPath struct {
	// The starting entity ID for the path.
	StartEntityId OptInt64 `json:"startEntityId"`
	// The ending entity ID for the path.
	EndEntityId OptInt64 `json:"endEntityId"`
	// The array of entity IDs identifying the entities on the path in order of how are they are
	// connected on the path.  This is null if there is no path between the entities.
	EntityIds OptNilInt64Array `json:"entityIds"`
}

// GetStartEntityId returns the value of StartEntityId.
func (s *SzEntityPath) GetStartEntityId() OptInt64 {
	return s.StartEntityId
}

// GetEndEntityId returns the value of EndEntityId.
func (s *SzEntityPath) GetEndEntityId() OptInt64 {
	return s.EndEntityId
}

// GetEntityIds returns the value of EntityIds.
func (s *SzEntityPath) GetEntityIds() OptNilInt64Array {
	return s.EntityIds
}

// SetStartEntityId sets the value of StartEntityId.
func (s *SzEntityPath) SetStartEntityId(val OptInt64) {
	s.StartEntityId = val
}

// SetEndEntityId sets the value of EndEntityId.
func (s *SzEntityPath) SetEndEntityId(val OptInt64) {
	s.EndEntityId = val
}

// SetEntityIds sets the value of EntityIds.
func (s *SzEntityPath) SetEntityIds(val OptNilInt64Array) {
	s.EntityIds = val
}

// Describes a path between two entities using the entity IDs of the entities in the path and
// includes the data from the actual entities on the path.
// Ref: #/components/schemas/SzEntityPathData
type SzEntityPathData struct {
	EntityPath OptSzEntityPath `json:"entityPath"`
	// The array of `SzEntityData` objects describing the entities on the path.  This will include
	// partial information on the first-degree related entities to the entity.
	Entities []SzEntityData `json:"entities"`
}

// GetEntityPath returns the value of EntityPath.
func (s *SzEntityPathData) GetEntityPath() OptSzEntityPath {
	return s.EntityPath
}

// GetEntities returns the value of Entities.
func (s *SzEntityPathData) GetEntities() []SzEntityData {
	return s.Entities
}

// SetEntityPath sets the value of EntityPath.
func (s *SzEntityPathData) SetEntityPath(val OptSzEntityPath) {
	s.EntityPath = val
}

// SetEntities sets the value of Entities.
func (s *SzEntityPathData) SetEntities(val []SzEntityData) {
	s.Entities = val
}

// Merged schema.
// Ref: #/components/schemas/SzEntityPathResponse
type SzEntityPathResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzEntityPathResponseRawData `json:"rawData"`
	Data    OptSzEntityPathData               `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzEntityPathResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzEntityPathResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzEntityPathResponse) GetRawData() OptNilSzEntityPathResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzEntityPathResponse) GetData() OptSzEntityPathData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzEntityPathResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzEntityPathResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzEntityPathResponse) SetRawData(val OptNilSzEntityPathResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzEntityPathResponse) SetData(val OptSzEntityPathData) {
	s.Data = val
}

func (*SzEntityPathResponse) findEntityPathRes() {}

// The RAW result from the underlying native API function.
type SzEntityPathResponseRawData map[string]jx.Raw

func (s *SzEntityPathResponseRawData) init() SzEntityPathResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes a record (aka: observed entity) that has been loaded for a particular data source.
// Ref: #/components/schemas/SzEntityRecord
type SzEntityRecord struct {
	// The data source code identifying the source from which the record was loaded.
	DataSource OptString `json:"dataSource"`
	// The identifier that uniquely identifies this record from other records from the same data source.
	// This may have been loaded with the record or automatically generated from the record's data.
	RecordId OptString `json:"recordId"`
	// The optional array of record feature references to the entity features along with the record's
	// usage type if any.
	FeatureReferences OptNilSzFeatureReferenceArray `json:"featureReferences"`
	// The timestamp that the record was most recently loaded or updated.
	LastSeenTimestamp OptDateTime `json:"lastSeenTimestamp"`
	// An array of addresses associated with the record that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "HOME: 101 Main Street").
	AddressData []string `json:"addressData"`
	// An array of characteristics associated with the record that are
	// formatted for readability.  These will be prefixed by a
	// characteristic type and optionally by a "usage type" if one was
	// provided.
	// **NOTE:** The `characteristicData` field is derived from the
	// `ATTRIBUTE_DATA` field in the "raw data" JSON.
	CharacteristicData []string `json:"characteristicData"`
	// An array of entity data associated with the record where the items are formatted for readability.
	// These will be prefixed by an identifier type and may be prefixed by a "usage type" if one was
	// provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com").
	IdentifierData []string `json:"identifierData"`
	// An array of names associated with the record that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe").
	NameData []string `json:"nameData"`
	// An array of phone numbers associated with the record that are formatted for readability.  These
	// may be prefixed by a "usage type" if one was provided (e.g.: "HOME: 702-555-1212").
	PhoneData []string `json:"phoneData"`
	// An array of relationship data items associated with the record that describes disclosed
	// relationships.
	RelationshipData []string `json:"relationshipData"`
	// An array of associated data items that were loaded with the record but not normally recognized or
	// used for entity resolution.  This array usually contains useful information from the source system.
	OtherData []string `json:"otherData"`
	// The JSON representation of the original data record that was loaded.
	OriginalSourceData OptSzEntityRecordOriginalSourceData `json:"originalSourceData"`
}

// GetDataSource returns the value of DataSource.
func (s *SzEntityRecord) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordId returns the value of RecordId.
func (s *SzEntityRecord) GetRecordId() OptString {
	return s.RecordId
}

// GetFeatureReferences returns the value of FeatureReferences.
func (s *SzEntityRecord) GetFeatureReferences() OptNilSzFeatureReferenceArray {
	return s.FeatureReferences
}

// GetLastSeenTimestamp returns the value of LastSeenTimestamp.
func (s *SzEntityRecord) GetLastSeenTimestamp() OptDateTime {
	return s.LastSeenTimestamp
}

// GetAddressData returns the value of AddressData.
func (s *SzEntityRecord) GetAddressData() []string {
	return s.AddressData
}

// GetCharacteristicData returns the value of CharacteristicData.
func (s *SzEntityRecord) GetCharacteristicData() []string {
	return s.CharacteristicData
}

// GetIdentifierData returns the value of IdentifierData.
func (s *SzEntityRecord) GetIdentifierData() []string {
	return s.IdentifierData
}

// GetNameData returns the value of NameData.
func (s *SzEntityRecord) GetNameData() []string {
	return s.NameData
}

// GetPhoneData returns the value of PhoneData.
func (s *SzEntityRecord) GetPhoneData() []string {
	return s.PhoneData
}

// GetRelationshipData returns the value of RelationshipData.
func (s *SzEntityRecord) GetRelationshipData() []string {
	return s.RelationshipData
}

// GetOtherData returns the value of OtherData.
func (s *SzEntityRecord) GetOtherData() []string {
	return s.OtherData
}

// GetOriginalSourceData returns the value of OriginalSourceData.
func (s *SzEntityRecord) GetOriginalSourceData() OptSzEntityRecordOriginalSourceData {
	return s.OriginalSourceData
}

// SetDataSource sets the value of DataSource.
func (s *SzEntityRecord) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordId sets the value of RecordId.
func (s *SzEntityRecord) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetFeatureReferences sets the value of FeatureReferences.
func (s *SzEntityRecord) SetFeatureReferences(val OptNilSzFeatureReferenceArray) {
	s.FeatureReferences = val
}

// SetLastSeenTimestamp sets the value of LastSeenTimestamp.
func (s *SzEntityRecord) SetLastSeenTimestamp(val OptDateTime) {
	s.LastSeenTimestamp = val
}

// SetAddressData sets the value of AddressData.
func (s *SzEntityRecord) SetAddressData(val []string) {
	s.AddressData = val
}

// SetCharacteristicData sets the value of CharacteristicData.
func (s *SzEntityRecord) SetCharacteristicData(val []string) {
	s.CharacteristicData = val
}

// SetIdentifierData sets the value of IdentifierData.
func (s *SzEntityRecord) SetIdentifierData(val []string) {
	s.IdentifierData = val
}

// SetNameData sets the value of NameData.
func (s *SzEntityRecord) SetNameData(val []string) {
	s.NameData = val
}

// SetPhoneData sets the value of PhoneData.
func (s *SzEntityRecord) SetPhoneData(val []string) {
	s.PhoneData = val
}

// SetRelationshipData sets the value of RelationshipData.
func (s *SzEntityRecord) SetRelationshipData(val []string) {
	s.RelationshipData = val
}

// SetOtherData sets the value of OtherData.
func (s *SzEntityRecord) SetOtherData(val []string) {
	s.OtherData = val
}

// SetOriginalSourceData sets the value of OriginalSourceData.
func (s *SzEntityRecord) SetOriginalSourceData(val OptSzEntityRecordOriginalSourceData) {
	s.OriginalSourceData = val
}

// The JSON representation of the original data record that was loaded.
type SzEntityRecordOriginalSourceData map[string]jx.Raw

func (s *SzEntityRecordOriginalSourceData) init() SzEntityRecordOriginalSourceData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzEntityResponse
type SzEntityResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzEntityResponseRawData `json:"rawData"`
	Data    OptSzEntityData               `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzEntityResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzEntityResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzEntityResponse) GetRawData() OptNilSzEntityResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzEntityResponse) GetData() OptSzEntityData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzEntityResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzEntityResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzEntityResponse) SetRawData(val OptNilSzEntityResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzEntityResponse) SetData(val OptSzEntityData) {
	s.Data = val
}

func (*SzEntityResponse) getEntityByEntityIdRes() {}
func (*SzEntityResponse) getEntityByRecordIdRes() {}

// The RAW result from the underlying native API function.
type SzEntityResponseRawData map[string]jx.Raw

func (s *SzEntityResponseRawData) init() SzEntityResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes an error.
// Ref: #/components/schemas/SzError
type SzError struct {
	// The internal error code.
	Code OptNilString `json:"code"`
	// The message describing the error.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *SzError) GetCode() OptNilString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SzError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *SzError) SetCode(val OptNilString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SzError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/SzErrorResponse
type SzErrorResponse struct {
	Meta   OptSzMeta  `json:"meta"`
	Links  OptSzLinks `json:"links"`
	Errors []SzError  `json:"errors"`
}

// GetMeta returns the value of Meta.
func (s *SzErrorResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzErrorResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetErrors returns the value of Errors.
func (s *SzErrorResponse) GetErrors() []SzError {
	return s.Errors
}

// SetMeta sets the value of Meta.
func (s *SzErrorResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzErrorResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetErrors sets the value of Errors.
func (s *SzErrorResponse) SetErrors(val []SzError) {
	s.Errors = val
}

func (*SzErrorResponse) analyzeBulkRecordsRes() {}
func (*SzErrorResponse) getActiveConfigRes()    {}
func (*SzErrorResponse) getAttributeTypesRes()  {}
func (*SzErrorResponse) getDataSourceRes()      {}
func (*SzErrorResponse) getDataSourcesRes()     {}
func (*SzErrorResponse) getTemplateConfigRes()  {}

// The method by which feature values should be included for entities returned in the response.  The
// possible values are:
// * `NONE` - Do not include any feature values -- this is the fastest
// option from a performance perspective because feature
// values do not have to be retrieved.
// * `ENTITY_NAME_ONLY` - Same as `NONE` in that no "features" are
// returned, but the singular entity name value
// is determined will be determined and returned.
// * `REPRESENTATIVE` - Include only a single representative value per
// "unique" value of a feature.  If there are
// multiple values that are near duplicates then
// only one value is included and the others are
// suppressed.
// * `WITH_DUPLICATES` - ** (default value) ** Group near-duplicate
// feature values and return a representative value
// along with its near duplicate values.
// * `ATTRIBUTED` - Same as `WITH_DUPLICATES` but with record-level
// references attributing each feature to the record(s)
// that provided it for the entity along with any
// usage type that might have been associated with the
// feature at the record level.
// Ref: #/components/schemas/SzFeatureMode
type SzFeatureMode string

const (
	SzFeatureModeNONE           SzFeatureMode = "NONE"
	SzFeatureModeENTITYNAMEONLY SzFeatureMode = "ENTITY_NAME_ONLY"
	SzFeatureModeREPRESENTATIVE SzFeatureMode = "REPRESENTATIVE"
	SzFeatureModeWITHDUPLICATES SzFeatureMode = "WITH_DUPLICATES"
	SzFeatureModeATTRIBUTED     SzFeatureMode = "ATTRIBUTED"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzFeatureMode) MarshalText() ([]byte, error) {
	switch s {
	case SzFeatureModeNONE:
		return []byte(s), nil
	case SzFeatureModeENTITYNAMEONLY:
		return []byte(s), nil
	case SzFeatureModeREPRESENTATIVE:
		return []byte(s), nil
	case SzFeatureModeWITHDUPLICATES:
		return []byte(s), nil
	case SzFeatureModeATTRIBUTED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzFeatureMode) UnmarshalText(data []byte) error {
	switch SzFeatureMode(data) {
	case SzFeatureModeNONE:
		*s = SzFeatureModeNONE
		return nil
	case SzFeatureModeENTITYNAMEONLY:
		*s = SzFeatureModeENTITYNAMEONLY
		return nil
	case SzFeatureModeREPRESENTATIVE:
		*s = SzFeatureModeREPRESENTATIVE
		return nil
	case SzFeatureModeWITHDUPLICATES:
		*s = SzFeatureModeWITHDUPLICATES
		return nil
	case SzFeatureModeATTRIBUTED:
		*s = SzFeatureModeATTRIBUTED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes a record's reference to an entity feature along with the optional usage type with which
// the record references the feature.
// Ref: #/components/schemas/SzFeatureReference
type SzFeatureReference struct {
	// The internal feature ID identifying the feature so that it might be identified and referenced.
	InternalId OptInt64 `json:"internalId"`
	// The optional associated usage type (e.g.: "HOME or "WORK).  This is the usage type with which the
	// record loaded the feature (if any). Other records in the same entity may have the same feature
	// with a different usage type.
	UsageType OptNilString `json:"usageType"`
}

// GetInternalId returns the value of InternalId.
func (s *SzFeatureReference) GetInternalId() OptInt64 {
	return s.InternalId
}

// GetUsageType returns the value of UsageType.
func (s *SzFeatureReference) GetUsageType() OptNilString {
	return s.UsageType
}

// SetInternalId sets the value of InternalId.
func (s *SzFeatureReference) SetInternalId(val OptInt64) {
	s.InternalId = val
}

// SetUsageType sets the value of UsageType.
func (s *SzFeatureReference) SetUsageType(val OptNilString) {
	s.UsageType = val
}

// Describes the scoring between two `SzScoredFeature` instances.
// Ref: #/components/schemas/SzFeatureScore
type SzFeatureScore struct {
	// The feature type of the features being scored.
	FeatureType OptString `json:"featureType"`
	// The inbound feature described as an `SzScoredFeature`.
	InboundFeature OptSzScoredFeature `json:"inboundFeature"`
	// The feature that was a candidate match for the inbound feature (also described as an
	// `SzScoredFeature`).
	CandidateFeature OptSzScoredFeature `json:"candidateFeature"`
	// The integer score between the two feature values (typically from 0 to 100).  If this is a name
	// feature, then this value is the "best" value from the `SzNameScoring` instance described by
	// `nameScoringDetails` (in order of precedence the first of these values that exists: `orgNameScore`,
	//  `fullNameScore`, `surnameScore` and then `givenNameScore`).
	Score OptInt32 `json:"score"`
	// The name scoring values if this score is for a name feature.  This property is omitted if not a
	// name feature.
	NameScoringDetails OptSzNameScoring `json:"nameScoringDetails"`
	// The `SzScoringBucket` describing the meaning of the `score`.
	ScoringBucket OptSzScoringBucket `json:"scoringBucket"`
	// The `SzScoringBehavior` describing the scoring behavior for the features.
	ScoringBehavior OptSzScoringBehavior `json:"scoringBehavior"`
}

// GetFeatureType returns the value of FeatureType.
func (s *SzFeatureScore) GetFeatureType() OptString {
	return s.FeatureType
}

// GetInboundFeature returns the value of InboundFeature.
func (s *SzFeatureScore) GetInboundFeature() OptSzScoredFeature {
	return s.InboundFeature
}

// GetCandidateFeature returns the value of CandidateFeature.
func (s *SzFeatureScore) GetCandidateFeature() OptSzScoredFeature {
	return s.CandidateFeature
}

// GetScore returns the value of Score.
func (s *SzFeatureScore) GetScore() OptInt32 {
	return s.Score
}

// GetNameScoringDetails returns the value of NameScoringDetails.
func (s *SzFeatureScore) GetNameScoringDetails() OptSzNameScoring {
	return s.NameScoringDetails
}

// GetScoringBucket returns the value of ScoringBucket.
func (s *SzFeatureScore) GetScoringBucket() OptSzScoringBucket {
	return s.ScoringBucket
}

// GetScoringBehavior returns the value of ScoringBehavior.
func (s *SzFeatureScore) GetScoringBehavior() OptSzScoringBehavior {
	return s.ScoringBehavior
}

// SetFeatureType sets the value of FeatureType.
func (s *SzFeatureScore) SetFeatureType(val OptString) {
	s.FeatureType = val
}

// SetInboundFeature sets the value of InboundFeature.
func (s *SzFeatureScore) SetInboundFeature(val OptSzScoredFeature) {
	s.InboundFeature = val
}

// SetCandidateFeature sets the value of CandidateFeature.
func (s *SzFeatureScore) SetCandidateFeature(val OptSzScoredFeature) {
	s.CandidateFeature = val
}

// SetScore sets the value of Score.
func (s *SzFeatureScore) SetScore(val OptInt32) {
	s.Score = val
}

// SetNameScoringDetails sets the value of NameScoringDetails.
func (s *SzFeatureScore) SetNameScoringDetails(val OptSzNameScoring) {
	s.NameScoringDetails = val
}

// SetScoringBucket sets the value of ScoringBucket.
func (s *SzFeatureScore) SetScoringBucket(val OptSzScoringBucket) {
	s.ScoringBucket = val
}

// SetScoringBehavior sets the value of ScoringBehavior.
func (s *SzFeatureScore) SetScoringBehavior(val OptSzScoringBehavior) {
	s.ScoringBehavior = val
}

// An entity that was flagged as relevant due to the resolution operation.
// Ref: #/components/schemas/SzFlaggedEntity
type SzFlaggedEntity struct {
	// The entity ID of the relevant entity.
	EntityId OptInt64 `json:"entityId"`
	// The number of degrees this entity is separated from the entity that was affected.
	Degrees OptInt8 `json:"degrees"`
	// The array of flags that were triggered making this entity relevant.
	Flags []string `json:"flags"`
	// An array of objects describing sample records from the relevant entity and the triggered flags for
	// that record.
	SampleRecords []SzFlaggedRecord `json:"sampleRecords"`
}

// GetEntityId returns the value of EntityId.
func (s *SzFlaggedEntity) GetEntityId() OptInt64 {
	return s.EntityId
}

// GetDegrees returns the value of Degrees.
func (s *SzFlaggedEntity) GetDegrees() OptInt8 {
	return s.Degrees
}

// GetFlags returns the value of Flags.
func (s *SzFlaggedEntity) GetFlags() []string {
	return s.Flags
}

// GetSampleRecords returns the value of SampleRecords.
func (s *SzFlaggedEntity) GetSampleRecords() []SzFlaggedRecord {
	return s.SampleRecords
}

// SetEntityId sets the value of EntityId.
func (s *SzFlaggedEntity) SetEntityId(val OptInt64) {
	s.EntityId = val
}

// SetDegrees sets the value of Degrees.
func (s *SzFlaggedEntity) SetDegrees(val OptInt8) {
	s.Degrees = val
}

// SetFlags sets the value of Flags.
func (s *SzFlaggedEntity) SetFlags(val []string) {
	s.Flags = val
}

// SetSampleRecords sets the value of SampleRecords.
func (s *SzFlaggedEntity) SetSampleRecords(val []SzFlaggedRecord) {
	s.SampleRecords = val
}

// Describes a sample record from an `SzFlaggedEntity` including the triggered flags for that record.
// Ref: #/components/schemas/SzFlaggedRecord
type SzFlaggedRecord struct {
	// The data source code associated with the sample record. type: string.
	DataSource OptString `json:"dataSource"`
	// The record ID identifying with the same record.
	RecordId OptString `json:"recordId"`
	// The array of flags triggered by the sample record.
	Flags []string `json:"flags"`
}

// GetDataSource returns the value of DataSource.
func (s *SzFlaggedRecord) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordId returns the value of RecordId.
func (s *SzFlaggedRecord) GetRecordId() OptString {
	return s.RecordId
}

// GetFlags returns the value of Flags.
func (s *SzFlaggedRecord) GetFlags() []string {
	return s.Flags
}

// SetDataSource sets the value of DataSource.
func (s *SzFlaggedRecord) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordId sets the value of RecordId.
func (s *SzFlaggedRecord) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetFlags sets the value of Flags.
func (s *SzFlaggedRecord) SetFlags(val []string) {
	s.Flags = val
}

// Merged schema.
// Ref: #/components/schemas/SzHowEntityResponse
type SzHowEntityResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzHowEntityResponseRawData `json:"rawData"`
	// The data field is the `SzHowEntityResult` itself.
	Data OptSzHowEntityResult `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzHowEntityResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzHowEntityResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzHowEntityResponse) GetRawData() OptNilSzHowEntityResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzHowEntityResponse) GetData() OptSzHowEntityResult {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzHowEntityResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzHowEntityResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzHowEntityResponse) SetRawData(val OptNilSzHowEntityResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzHowEntityResponse) SetData(val OptSzHowEntityResult) {
	s.Data = val
}

func (*SzHowEntityResponse) howEntityByEntityIDRes() {}
func (*SzHowEntityResponse) howEntityByRecordIDRes() {}

// The RAW result from the underlying native API function.
type SzHowEntityResponseRawData map[string]jx.Raw

func (s *SzHowEntityResponseRawData) init() SzHowEntityResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes the result of the "how entity" operation as a mapping of non-singleton virtual entity
// ID's to their corresponding `SzResolutionStep` instances as well as an array of `SzVirtualEntity`
// instances describing the possible final states for the entity. **NOTE**: If there are more than
// one possible final states then the entity requires reevaluation, while a result with a single
// final state does not require reevaluation.
// Ref: #/components/schemas/SzHowEntityResult
type SzHowEntityResult struct {
	// The array of `SzVirtualEntity` instances describing the possible final states for the entity.  If
	// there are more than one elements in the array then the entity requires reevaluation.  If there is
	// only a single element in the array, then reevaluation is not required.  This array will always
	// have at least one element.
	FinalStates []SzVirtualEntity `json:"finalStates"`
	// The map of virtual entity ID's for non-singleton virtual entities to `SzResolutionStep` instances
	// describing how the virtual entity for the respective virtual entity ID was formed.  Since
	// singleton virtual entities are base building blocks, they do not have an associated how step.
	// They are simply formed by the loading of a record to the repository.
	ResolutionSteps OptSzHowEntityResultResolutionSteps `json:"resolutionSteps"`
}

// GetFinalStates returns the value of FinalStates.
func (s *SzHowEntityResult) GetFinalStates() []SzVirtualEntity {
	return s.FinalStates
}

// GetResolutionSteps returns the value of ResolutionSteps.
func (s *SzHowEntityResult) GetResolutionSteps() OptSzHowEntityResultResolutionSteps {
	return s.ResolutionSteps
}

// SetFinalStates sets the value of FinalStates.
func (s *SzHowEntityResult) SetFinalStates(val []SzVirtualEntity) {
	s.FinalStates = val
}

// SetResolutionSteps sets the value of ResolutionSteps.
func (s *SzHowEntityResult) SetResolutionSteps(val OptSzHowEntityResultResolutionSteps) {
	s.ResolutionSteps = val
}

// The map of virtual entity ID's for non-singleton virtual entities to `SzResolutionStep` instances
// describing how the virtual entity for the respective virtual entity ID was formed.  Since
// singleton virtual entities are base building blocks, they do not have an associated how step.
// They are simply formed by the loading of a record to the repository.
type SzHowEntityResultResolutionSteps map[string]SzResolutionStep

func (s *SzHowEntityResultResolutionSteps) init() SzHowEntityResultResolutionSteps {
	m := *s
	if m == nil {
		m = map[string]SzResolutionStep{}
		*s = m
	}
	return m
}

// The match info describing how a step in an entity's resolution completed and why the two virtual
// entities were resolved.
// Ref: #/components/schemas/SzHowMatchInfo
type SzHowMatchInfo struct {
	// The match key indicating the components of the match.
	MatchKey OptString `json:"matchKey"`
	// The resolution rule that triggered the match.
	ResolutionRule OptNilString `json:"resolutionRule"`
	// The map of feature types to arrays of `SzFeatureScore` instances for that feature type.
	FeatureScores OptNilSzHowMatchInfoFeatureScores `json:"featureScores"`
}

// GetMatchKey returns the value of MatchKey.
func (s *SzHowMatchInfo) GetMatchKey() OptString {
	return s.MatchKey
}

// GetResolutionRule returns the value of ResolutionRule.
func (s *SzHowMatchInfo) GetResolutionRule() OptNilString {
	return s.ResolutionRule
}

// GetFeatureScores returns the value of FeatureScores.
func (s *SzHowMatchInfo) GetFeatureScores() OptNilSzHowMatchInfoFeatureScores {
	return s.FeatureScores
}

// SetMatchKey sets the value of MatchKey.
func (s *SzHowMatchInfo) SetMatchKey(val OptString) {
	s.MatchKey = val
}

// SetResolutionRule sets the value of ResolutionRule.
func (s *SzHowMatchInfo) SetResolutionRule(val OptNilString) {
	s.ResolutionRule = val
}

// SetFeatureScores sets the value of FeatureScores.
func (s *SzHowMatchInfo) SetFeatureScores(val OptNilSzHowMatchInfoFeatureScores) {
	s.FeatureScores = val
}

// The map of feature types to arrays of `SzFeatureScore` instances for that feature type.
type SzHowMatchInfoFeatureScores map[string][]SzFeatureScore

func (s *SzHowMatchInfoFeatureScores) init() SzHowMatchInfoFeatureScores {
	m := *s
	if m == nil {
		m = map[string][]SzFeatureScore{}
		*s = m
	}
	return m
}

// The HTTP method that was used for the operation.  The possible values are:
// * `GET` - An HTTP GET operation.
// * `POST` - An HTTP POST operation.
// * `PUT` - An HTTP PUT operation.
// * `PATCH` - An HTTP PATCH operation.
// * `DELETE` - An HTTP DELETE operation.
// Ref: #/components/schemas/SzHttpMethod
type SzHttpMethod string

const (
	SzHttpMethodGET    SzHttpMethod = "GET"
	SzHttpMethodPOST   SzHttpMethod = "POST"
	SzHttpMethodPUT    SzHttpMethod = "PUT"
	SzHttpMethodPATCH  SzHttpMethod = "PATCH"
	SzHttpMethodDELETE SzHttpMethod = "DELETE"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzHttpMethod) MarshalText() ([]byte, error) {
	switch s {
	case SzHttpMethodGET:
		return []byte(s), nil
	case SzHttpMethodPOST:
		return []byte(s), nil
	case SzHttpMethodPUT:
		return []byte(s), nil
	case SzHttpMethodPATCH:
		return []byte(s), nil
	case SzHttpMethodDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzHttpMethod) UnmarshalText(data []byte) error {
	switch SzHttpMethod(data) {
	case SzHttpMethodGET:
		*s = SzHttpMethodGET
		return nil
	case SzHttpMethodPOST:
		*s = SzHttpMethodPOST
		return nil
	case SzHttpMethodPUT:
		*s = SzHttpMethodPUT
		return nil
	case SzHttpMethodPATCH:
		*s = SzHttpMethodPATCH
		return nil
	case SzHttpMethodDELETE:
		*s = SzHttpMethodDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the Senzing product license.
// Ref: #/components/schemas/SzLicenseInfo
type SzLicenseInfo struct {
	// The customer information associated with the license.
	Customer OptString `json:"customer"`
	// The contract information associated with the license.
	Contract OptString `json:"contract"`
	// The description of the type of license.
	LicenseType OptString `json:"licenseType"`
	// The description of the license level.
	LicenseLevel OptString `json:"licenseLevel"`
	// The billing information associated with the license.
	Billing OptString `json:"billing"`
	// The issuance date for the license.
	IssuanceDate OptDateTime `json:"issuanceDate"`
	// The expiration date for the license.
	ExpirationDate OptDateTime `json:"expirationDate"`
	// The record limit associated with the license.
	RecordLimit OptInt64 `json:"recordLimit"`
}

// GetCustomer returns the value of Customer.
func (s *SzLicenseInfo) GetCustomer() OptString {
	return s.Customer
}

// GetContract returns the value of Contract.
func (s *SzLicenseInfo) GetContract() OptString {
	return s.Contract
}

// GetLicenseType returns the value of LicenseType.
func (s *SzLicenseInfo) GetLicenseType() OptString {
	return s.LicenseType
}

// GetLicenseLevel returns the value of LicenseLevel.
func (s *SzLicenseInfo) GetLicenseLevel() OptString {
	return s.LicenseLevel
}

// GetBilling returns the value of Billing.
func (s *SzLicenseInfo) GetBilling() OptString {
	return s.Billing
}

// GetIssuanceDate returns the value of IssuanceDate.
func (s *SzLicenseInfo) GetIssuanceDate() OptDateTime {
	return s.IssuanceDate
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *SzLicenseInfo) GetExpirationDate() OptDateTime {
	return s.ExpirationDate
}

// GetRecordLimit returns the value of RecordLimit.
func (s *SzLicenseInfo) GetRecordLimit() OptInt64 {
	return s.RecordLimit
}

// SetCustomer sets the value of Customer.
func (s *SzLicenseInfo) SetCustomer(val OptString) {
	s.Customer = val
}

// SetContract sets the value of Contract.
func (s *SzLicenseInfo) SetContract(val OptString) {
	s.Contract = val
}

// SetLicenseType sets the value of LicenseType.
func (s *SzLicenseInfo) SetLicenseType(val OptString) {
	s.LicenseType = val
}

// SetLicenseLevel sets the value of LicenseLevel.
func (s *SzLicenseInfo) SetLicenseLevel(val OptString) {
	s.LicenseLevel = val
}

// SetBilling sets the value of Billing.
func (s *SzLicenseInfo) SetBilling(val OptString) {
	s.Billing = val
}

// SetIssuanceDate sets the value of IssuanceDate.
func (s *SzLicenseInfo) SetIssuanceDate(val OptDateTime) {
	s.IssuanceDate = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *SzLicenseInfo) SetExpirationDate(val OptDateTime) {
	s.ExpirationDate = val
}

// SetRecordLimit sets the value of RecordLimit.
func (s *SzLicenseInfo) SetRecordLimit(val OptInt64) {
	s.RecordLimit = val
}

// Merged schema.
// Ref: #/components/schemas/SzLicenseResponse
type SzLicenseResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzLicenseResponseRawData `json:"rawData"`
	Data    OptSzLicenseResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzLicenseResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzLicenseResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzLicenseResponse) GetRawData() OptNilSzLicenseResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzLicenseResponse) GetData() OptSzLicenseResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzLicenseResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzLicenseResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzLicenseResponse) SetRawData(val OptNilSzLicenseResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzLicenseResponse) SetData(val OptSzLicenseResponseData) {
	s.Data = val
}

func (*SzLicenseResponse) licenseRes() {}

// Represents the data segment included with an `SzLicenseResponse`.
// Ref: #/components/schemas/SzLicenseResponseData
type SzLicenseResponseData struct {
	License OptSzLicenseInfo `json:"license"`
}

// GetLicense returns the value of License.
func (s *SzLicenseResponseData) GetLicense() OptSzLicenseInfo {
	return s.License
}

// SetLicense sets the value of License.
func (s *SzLicenseResponseData) SetLicense(val OptSzLicenseInfo) {
	s.License = val
}

// The RAW result from the underlying native API function.
type SzLicenseResponseRawData map[string]jx.Raw

func (s *SzLicenseResponseRawData) init() SzLicenseResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Represents the default links returned with each response.
// Ref: #/components/schemas/SzLinks
type SzLinks struct {
	Self                 OptString `json:"self"`
	OpenApiSpecification OptString `json:"openApiSpecification"`
}

// GetSelf returns the value of Self.
func (s *SzLinks) GetSelf() OptString {
	return s.Self
}

// GetOpenApiSpecification returns the value of OpenApiSpecification.
func (s *SzLinks) GetOpenApiSpecification() OptString {
	return s.OpenApiSpecification
}

// SetSelf sets the value of Self.
func (s *SzLinks) SetSelf(val OptString) {
	s.Self = val
}

// SetOpenApiSpecification sets the value of OpenApiSpecification.
func (s *SzLinks) SetOpenApiSpecification(val OptString) {
	s.OpenApiSpecification = val
}

// Merged schema.
// Ref: #/components/schemas/SzLoadRecordResponse
type SzLoadRecordResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzLoadRecordResponseRawData `json:"rawData"`
	Data    OptSzLoadRecordResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzLoadRecordResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzLoadRecordResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzLoadRecordResponse) GetRawData() OptNilSzLoadRecordResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzLoadRecordResponse) GetData() OptSzLoadRecordResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzLoadRecordResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzLoadRecordResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzLoadRecordResponse) SetRawData(val OptNilSzLoadRecordResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzLoadRecordResponse) SetData(val OptSzLoadRecordResponseData) {
	s.Data = val
}

func (*SzLoadRecordResponse) addRecordRes()                     {}
func (*SzLoadRecordResponse) addRecordWithReturnedRecordIdRes() {}

// Describes the data segment of `SzLoadRecordResponse`.
// Ref: #/components/schemas/SzLoadRecordResponseData
type SzLoadRecordResponseData struct {
	// The record ID of the record that was loaded.
	RecordId OptString `json:"recordId"`
	// The optionally requested info associated with the load.
	Info OptSzResolutionInfo `json:"info"`
}

// GetRecordId returns the value of RecordId.
func (s *SzLoadRecordResponseData) GetRecordId() OptString {
	return s.RecordId
}

// GetInfo returns the value of Info.
func (s *SzLoadRecordResponseData) GetInfo() OptSzResolutionInfo {
	return s.Info
}

// SetRecordId sets the value of RecordId.
func (s *SzLoadRecordResponseData) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetInfo sets the value of Info.
func (s *SzLoadRecordResponseData) SetInfo(val OptSzResolutionInfo) {
	s.Info = val
}

// The RAW result from the underlying native API function.
type SzLoadRecordResponseRawData map[string]jx.Raw

func (s *SzLoadRecordResponseRawData) init() SzLoadRecordResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes the various match levels describing how two records resolve against each other.  The
// possible values are:
// * `NO_MATCH` - No match was found between the records.
// * `RESOLVED` - The records resolved to the same entity.
// * `POSSIBLY_SAME` - The records were not close enough to resolve
// but may represent the same entity if more data was provided.
// * `POSSIBLY_RELATED` - The records share some attributes that
// suggest a relationship.
// * `NAME_ONLY` - The records match in name only.
// * `DISCLOSED` - An explicit relationship has been disclosed between
// the records.
// Ref: #/components/schemas/SzMatchLevel
type SzMatchLevel string

const (
	SzMatchLevelNOMATCH         SzMatchLevel = "NO_MATCH"
	SzMatchLevelRESOLVED        SzMatchLevel = "RESOLVED"
	SzMatchLevelPOSSIBLYSAME    SzMatchLevel = "POSSIBLY_SAME"
	SzMatchLevelPOSSIBLYRELATED SzMatchLevel = "POSSIBLY_RELATED"
	SzMatchLevelNAMEONLY        SzMatchLevel = "NAME_ONLY"
	SzMatchLevelDISCLOSED       SzMatchLevel = "DISCLOSED"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzMatchLevel) MarshalText() ([]byte, error) {
	switch s {
	case SzMatchLevelNOMATCH:
		return []byte(s), nil
	case SzMatchLevelRESOLVED:
		return []byte(s), nil
	case SzMatchLevelPOSSIBLYSAME:
		return []byte(s), nil
	case SzMatchLevelPOSSIBLYRELATED:
		return []byte(s), nil
	case SzMatchLevelNAMEONLY:
		return []byte(s), nil
	case SzMatchLevelDISCLOSED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzMatchLevel) UnmarshalText(data []byte) error {
	switch SzMatchLevel(data) {
	case SzMatchLevelNOMATCH:
		*s = SzMatchLevelNOMATCH
		return nil
	case SzMatchLevelRESOLVED:
		*s = SzMatchLevelRESOLVED
		return nil
	case SzMatchLevelPOSSIBLYSAME:
		*s = SzMatchLevelPOSSIBLYSAME
		return nil
	case SzMatchLevelPOSSIBLYRELATED:
		*s = SzMatchLevelPOSSIBLYRELATED
		return nil
	case SzMatchLevelNAMEONLY:
		*s = SzMatchLevelNAMEONLY
		return nil
	case SzMatchLevelDISCLOSED:
		*s = SzMatchLevelDISCLOSED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/SzMatchedRecord
type SzMatchedRecord struct {
	// The data source code identifying the source from which the record was loaded.
	DataSource OptString `json:"dataSource"`
	// The identifier that uniquely identifies this record from other records from the same data source.
	// This may have been loaded with the record or automatically generated from the record's data.
	RecordId OptString `json:"recordId"`
	// The optional array of record feature references to the entity features along with the record's
	// usage type if any.
	FeatureReferences OptNilSzFeatureReferenceArray `json:"featureReferences"`
	// The timestamp that the record was most recently loaded or updated.
	LastSeenTimestamp OptDateTime `json:"lastSeenTimestamp"`
	// An array of addresses associated with the record that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "HOME: 101 Main Street").
	AddressData []string `json:"addressData"`
	// An array of characteristics associated with the record that are
	// formatted for readability.  These will be prefixed by a
	// characteristic type and optionally by a "usage type" if one was
	// provided.
	// **NOTE:** The `characteristicData` field is derived from the
	// `ATTRIBUTE_DATA` field in the "raw data" JSON.
	CharacteristicData []string `json:"characteristicData"`
	// An array of entity data associated with the record where the items are formatted for readability.
	// These will be prefixed by an identifier type and may be prefixed by a "usage type" if one was
	// provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com").
	IdentifierData []string `json:"identifierData"`
	// An array of names associated with the record that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe").
	NameData []string `json:"nameData"`
	// An array of phone numbers associated with the record that are formatted for readability.  These
	// may be prefixed by a "usage type" if one was provided (e.g.: "HOME: 702-555-1212").
	PhoneData []string `json:"phoneData"`
	// An array of relationship data items associated with the record that describes disclosed
	// relationships.
	RelationshipData []string `json:"relationshipData"`
	// An array of associated data items that were loaded with the record but not normally recognized or
	// used for entity resolution.  This array usually contains useful information from the source system.
	OtherData []string `json:"otherData"`
	// The JSON representation of the original data record that was loaded.
	OriginalSourceData OptSzMatchedRecordOriginalSourceData `json:"originalSourceData"`
	// The match key describing what features matched between the first record in the resolved entity and
	// this record. This is blank for the first record.
	MatchKey OptString `json:"matchKey"`
	// The code identifying the resolution rule that matched this record to the first record in the
	// resolved entity.  This is blank for the first record.
	ResolutionRuleCode OptString `json:"resolutionRuleCode"`
	// The integer "match level" describing how the first record in the resolved entity matched to this
	// record.  This is zero for the first record and usually one (1) for other records.
	MatchLevel OptInt32 `json:"matchLevel"`
}

// GetDataSource returns the value of DataSource.
func (s *SzMatchedRecord) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordId returns the value of RecordId.
func (s *SzMatchedRecord) GetRecordId() OptString {
	return s.RecordId
}

// GetFeatureReferences returns the value of FeatureReferences.
func (s *SzMatchedRecord) GetFeatureReferences() OptNilSzFeatureReferenceArray {
	return s.FeatureReferences
}

// GetLastSeenTimestamp returns the value of LastSeenTimestamp.
func (s *SzMatchedRecord) GetLastSeenTimestamp() OptDateTime {
	return s.LastSeenTimestamp
}

// GetAddressData returns the value of AddressData.
func (s *SzMatchedRecord) GetAddressData() []string {
	return s.AddressData
}

// GetCharacteristicData returns the value of CharacteristicData.
func (s *SzMatchedRecord) GetCharacteristicData() []string {
	return s.CharacteristicData
}

// GetIdentifierData returns the value of IdentifierData.
func (s *SzMatchedRecord) GetIdentifierData() []string {
	return s.IdentifierData
}

// GetNameData returns the value of NameData.
func (s *SzMatchedRecord) GetNameData() []string {
	return s.NameData
}

// GetPhoneData returns the value of PhoneData.
func (s *SzMatchedRecord) GetPhoneData() []string {
	return s.PhoneData
}

// GetRelationshipData returns the value of RelationshipData.
func (s *SzMatchedRecord) GetRelationshipData() []string {
	return s.RelationshipData
}

// GetOtherData returns the value of OtherData.
func (s *SzMatchedRecord) GetOtherData() []string {
	return s.OtherData
}

// GetOriginalSourceData returns the value of OriginalSourceData.
func (s *SzMatchedRecord) GetOriginalSourceData() OptSzMatchedRecordOriginalSourceData {
	return s.OriginalSourceData
}

// GetMatchKey returns the value of MatchKey.
func (s *SzMatchedRecord) GetMatchKey() OptString {
	return s.MatchKey
}

// GetResolutionRuleCode returns the value of ResolutionRuleCode.
func (s *SzMatchedRecord) GetResolutionRuleCode() OptString {
	return s.ResolutionRuleCode
}

// GetMatchLevel returns the value of MatchLevel.
func (s *SzMatchedRecord) GetMatchLevel() OptInt32 {
	return s.MatchLevel
}

// SetDataSource sets the value of DataSource.
func (s *SzMatchedRecord) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordId sets the value of RecordId.
func (s *SzMatchedRecord) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetFeatureReferences sets the value of FeatureReferences.
func (s *SzMatchedRecord) SetFeatureReferences(val OptNilSzFeatureReferenceArray) {
	s.FeatureReferences = val
}

// SetLastSeenTimestamp sets the value of LastSeenTimestamp.
func (s *SzMatchedRecord) SetLastSeenTimestamp(val OptDateTime) {
	s.LastSeenTimestamp = val
}

// SetAddressData sets the value of AddressData.
func (s *SzMatchedRecord) SetAddressData(val []string) {
	s.AddressData = val
}

// SetCharacteristicData sets the value of CharacteristicData.
func (s *SzMatchedRecord) SetCharacteristicData(val []string) {
	s.CharacteristicData = val
}

// SetIdentifierData sets the value of IdentifierData.
func (s *SzMatchedRecord) SetIdentifierData(val []string) {
	s.IdentifierData = val
}

// SetNameData sets the value of NameData.
func (s *SzMatchedRecord) SetNameData(val []string) {
	s.NameData = val
}

// SetPhoneData sets the value of PhoneData.
func (s *SzMatchedRecord) SetPhoneData(val []string) {
	s.PhoneData = val
}

// SetRelationshipData sets the value of RelationshipData.
func (s *SzMatchedRecord) SetRelationshipData(val []string) {
	s.RelationshipData = val
}

// SetOtherData sets the value of OtherData.
func (s *SzMatchedRecord) SetOtherData(val []string) {
	s.OtherData = val
}

// SetOriginalSourceData sets the value of OriginalSourceData.
func (s *SzMatchedRecord) SetOriginalSourceData(val OptSzMatchedRecordOriginalSourceData) {
	s.OriginalSourceData = val
}

// SetMatchKey sets the value of MatchKey.
func (s *SzMatchedRecord) SetMatchKey(val OptString) {
	s.MatchKey = val
}

// SetResolutionRuleCode sets the value of ResolutionRuleCode.
func (s *SzMatchedRecord) SetResolutionRuleCode(val OptString) {
	s.ResolutionRuleCode = val
}

// SetMatchLevel sets the value of MatchLevel.
func (s *SzMatchedRecord) SetMatchLevel(val OptInt32) {
	s.MatchLevel = val
}

// The JSON representation of the original data record that was loaded.
type SzMatchedRecordOriginalSourceData map[string]jx.Raw

func (s *SzMatchedRecordOriginalSourceData) init() SzMatchedRecordOriginalSourceData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Represents the meta data returned with each response.
// Ref: #/components/schemas/SzMeta
type SzMeta struct {
	// The descriptive name of the server that produced the response.
	Server     OptString       `json:"server"`
	HttpMethod OptSzHttpMethod `json:"httpMethod"`
	// The HTTP status response code.
	HttpStatusCode OptInt16 `json:"httpStatusCode"`
	// The timestamp of the operation's execution.
	Timestamp OptDateTime `json:"timestamp"`
	// The version number of the server.
	Version OptString `json:"version"`
	// The REST API specification version implemented by the server.
	RestApiVersion OptString `json:"restApiVersion"`
	// The version of the underlying native Senzing API product.
	NativeApiVersion OptString `json:"nativeApiVersion"`
	// The build version of the underlying native Senzing API product.
	NativeApiBuildVersion OptString `json:"nativeApiBuildVersion"`
	// The build number of the underlying native Senzing API product.
	NativeApiBuildNumber OptString `json:"nativeApiBuildNumber"`
	// The build date of the underlying native Senzing API product.
	NativeApiBuildDate OptDateTime `json:"nativeApiBuildDate"`
	// The config compatilibility version of the underlying native Senzing API product.
	ConfigCompatibilityVersion OptString `json:"configCompatibilityVersion"`
	// The timing measurements that were taken where the keys are identifying what was timed and the
	// values are the number of milliseconds.
	Timings OptNilSzMetaTimings `json:"timings"`
}

// GetServer returns the value of Server.
func (s *SzMeta) GetServer() OptString {
	return s.Server
}

// GetHttpMethod returns the value of HttpMethod.
func (s *SzMeta) GetHttpMethod() OptSzHttpMethod {
	return s.HttpMethod
}

// GetHttpStatusCode returns the value of HttpStatusCode.
func (s *SzMeta) GetHttpStatusCode() OptInt16 {
	return s.HttpStatusCode
}

// GetTimestamp returns the value of Timestamp.
func (s *SzMeta) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetVersion returns the value of Version.
func (s *SzMeta) GetVersion() OptString {
	return s.Version
}

// GetRestApiVersion returns the value of RestApiVersion.
func (s *SzMeta) GetRestApiVersion() OptString {
	return s.RestApiVersion
}

// GetNativeApiVersion returns the value of NativeApiVersion.
func (s *SzMeta) GetNativeApiVersion() OptString {
	return s.NativeApiVersion
}

// GetNativeApiBuildVersion returns the value of NativeApiBuildVersion.
func (s *SzMeta) GetNativeApiBuildVersion() OptString {
	return s.NativeApiBuildVersion
}

// GetNativeApiBuildNumber returns the value of NativeApiBuildNumber.
func (s *SzMeta) GetNativeApiBuildNumber() OptString {
	return s.NativeApiBuildNumber
}

// GetNativeApiBuildDate returns the value of NativeApiBuildDate.
func (s *SzMeta) GetNativeApiBuildDate() OptDateTime {
	return s.NativeApiBuildDate
}

// GetConfigCompatibilityVersion returns the value of ConfigCompatibilityVersion.
func (s *SzMeta) GetConfigCompatibilityVersion() OptString {
	return s.ConfigCompatibilityVersion
}

// GetTimings returns the value of Timings.
func (s *SzMeta) GetTimings() OptNilSzMetaTimings {
	return s.Timings
}

// SetServer sets the value of Server.
func (s *SzMeta) SetServer(val OptString) {
	s.Server = val
}

// SetHttpMethod sets the value of HttpMethod.
func (s *SzMeta) SetHttpMethod(val OptSzHttpMethod) {
	s.HttpMethod = val
}

// SetHttpStatusCode sets the value of HttpStatusCode.
func (s *SzMeta) SetHttpStatusCode(val OptInt16) {
	s.HttpStatusCode = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SzMeta) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetVersion sets the value of Version.
func (s *SzMeta) SetVersion(val OptString) {
	s.Version = val
}

// SetRestApiVersion sets the value of RestApiVersion.
func (s *SzMeta) SetRestApiVersion(val OptString) {
	s.RestApiVersion = val
}

// SetNativeApiVersion sets the value of NativeApiVersion.
func (s *SzMeta) SetNativeApiVersion(val OptString) {
	s.NativeApiVersion = val
}

// SetNativeApiBuildVersion sets the value of NativeApiBuildVersion.
func (s *SzMeta) SetNativeApiBuildVersion(val OptString) {
	s.NativeApiBuildVersion = val
}

// SetNativeApiBuildNumber sets the value of NativeApiBuildNumber.
func (s *SzMeta) SetNativeApiBuildNumber(val OptString) {
	s.NativeApiBuildNumber = val
}

// SetNativeApiBuildDate sets the value of NativeApiBuildDate.
func (s *SzMeta) SetNativeApiBuildDate(val OptDateTime) {
	s.NativeApiBuildDate = val
}

// SetConfigCompatibilityVersion sets the value of ConfigCompatibilityVersion.
func (s *SzMeta) SetConfigCompatibilityVersion(val OptString) {
	s.ConfigCompatibilityVersion = val
}

// SetTimings sets the value of Timings.
func (s *SzMeta) SetTimings(val OptNilSzMetaTimings) {
	s.Timings = val
}

// The timing measurements that were taken where the keys are identifying what was timed and the
// values are the number of milliseconds.
type SzMetaTimings map[string]int64

func (s *SzMetaTimings) init() SzMetaTimings {
	m := *s
	if m == nil {
		m = map[string]int64{}
		*s = m
	}
	return m
}

// Describes the scoring details between two names.
// Ref: #/components/schemas/SzNameScoring
type SzNameScoring struct {
	// The full name score.  This field is omitted if there is not a full name score (e.g.: with an
	// organization name).
	FullNameScore OptInt32 `json:"fullNameScore"`
	// The surname score.  This field is omitted if there is not a surname score (e.g.: with an
	// organization name or if there were no surnames to compare).
	SurnameScore OptInt32 `json:"surnameScore"`
	// The given name score.  This field is omitted if there is not a given name score (e.g.: with an
	// organization name or if there were no given names to compare).
	GivenNameScore OptInt32 `json:"givenNameScore"`
	// The generation match score.  This field is omitted if there is not a generation match score (e.g.:
	// with an organization name or if there were no generations to compare).
	GenerationScore OptInt32 `json:"generationScore"`
	// The organization name score.  This field is omitted if there is not a organization name score (e.g.
	// : with an personal name).
	OrgNameScore OptInt32 `json:"orgNameScore"`
}

// GetFullNameScore returns the value of FullNameScore.
func (s *SzNameScoring) GetFullNameScore() OptInt32 {
	return s.FullNameScore
}

// GetSurnameScore returns the value of SurnameScore.
func (s *SzNameScoring) GetSurnameScore() OptInt32 {
	return s.SurnameScore
}

// GetGivenNameScore returns the value of GivenNameScore.
func (s *SzNameScoring) GetGivenNameScore() OptInt32 {
	return s.GivenNameScore
}

// GetGenerationScore returns the value of GenerationScore.
func (s *SzNameScoring) GetGenerationScore() OptInt32 {
	return s.GenerationScore
}

// GetOrgNameScore returns the value of OrgNameScore.
func (s *SzNameScoring) GetOrgNameScore() OptInt32 {
	return s.OrgNameScore
}

// SetFullNameScore sets the value of FullNameScore.
func (s *SzNameScoring) SetFullNameScore(val OptInt32) {
	s.FullNameScore = val
}

// SetSurnameScore sets the value of SurnameScore.
func (s *SzNameScoring) SetSurnameScore(val OptInt32) {
	s.SurnameScore = val
}

// SetGivenNameScore sets the value of GivenNameScore.
func (s *SzNameScoring) SetGivenNameScore(val OptInt32) {
	s.GivenNameScore = val
}

// SetGenerationScore sets the value of GenerationScore.
func (s *SzNameScoring) SetGenerationScore(val OptInt32) {
	s.GenerationScore = val
}

// SetOrgNameScore sets the value of OrgNameScore.
func (s *SzNameScoring) SetOrgNameScore(val OptInt32) {
	s.OrgNameScore = val
}

// Identifies a record by its data source code and record identifier. This abbreviated format is used
// in query parameters to identify records via JSON strings.
// Ref: #/components/schemas/SzRecordId
type SzRecordId struct {
	// The data source code that uniquely identifies the data source associated with the record.
	Src OptString `json:"src"`
	// The record ID that uniquely identifies a record within the respective data source.
	ID OptString `json:"id"`
}

// GetSrc returns the value of Src.
func (s *SzRecordId) GetSrc() OptString {
	return s.Src
}

// GetID returns the value of ID.
func (s *SzRecordId) GetID() OptString {
	return s.ID
}

// SetSrc sets the value of Src.
func (s *SzRecordId) SetSrc(val OptString) {
	s.Src = val
}

// SetID sets the value of ID.
func (s *SzRecordId) SetID(val OptString) {
	s.ID = val
}

// Identifies a record by its data source code and record ID.  This is either a JSON-encoded
// `SzRecordId` or a delimited string where the first character is the delimiter, followed by the
// data source code, then the delimiter and the record ID (e.g.: `|CUSTOMERS|ABC123`).
// Ref: #/components/schemas/SzRecordIdentifier
// SzRecordIdentifier represents sum type.
type SzRecordIdentifier struct {
	Type       SzRecordIdentifierType // switch on this field
	SzRecordId SzRecordId
	String     string
}

// SzRecordIdentifierType is oneOf type of SzRecordIdentifier.
type SzRecordIdentifierType string

// Possible values for SzRecordIdentifierType.
const (
	SzRecordIdSzRecordIdentifier SzRecordIdentifierType = "SzRecordId"
	StringSzRecordIdentifier     SzRecordIdentifierType = "string"
)

// IsSzRecordId reports whether SzRecordIdentifier is SzRecordId.
func (s SzRecordIdentifier) IsSzRecordId() bool { return s.Type == SzRecordIdSzRecordIdentifier }

// IsString reports whether SzRecordIdentifier is string.
func (s SzRecordIdentifier) IsString() bool { return s.Type == StringSzRecordIdentifier }

// SetSzRecordId sets SzRecordIdentifier to SzRecordId.
func (s *SzRecordIdentifier) SetSzRecordId(v SzRecordId) {
	s.Type = SzRecordIdSzRecordIdentifier
	s.SzRecordId = v
}

// GetSzRecordId returns SzRecordId and true boolean if SzRecordIdentifier is SzRecordId.
func (s SzRecordIdentifier) GetSzRecordId() (v SzRecordId, ok bool) {
	if !s.IsSzRecordId() {
		return v, false
	}
	return s.SzRecordId, true
}

// NewSzRecordIdSzRecordIdentifier returns new SzRecordIdentifier from SzRecordId.
func NewSzRecordIdSzRecordIdentifier(v SzRecordId) SzRecordIdentifier {
	var s SzRecordIdentifier
	s.SetSzRecordId(v)
	return s
}

// SetString sets SzRecordIdentifier to string.
func (s *SzRecordIdentifier) SetString(v string) {
	s.Type = StringSzRecordIdentifier
	s.String = v
}

// GetString returns string and true boolean if SzRecordIdentifier is string.
func (s SzRecordIdentifier) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringSzRecordIdentifier returns new SzRecordIdentifier from string.
func NewStringSzRecordIdentifier(v string) SzRecordIdentifier {
	var s SzRecordIdentifier
	s.SetString(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/SzRecordResponse
type SzRecordResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzRecordResponseRawData `json:"rawData"`
	Data    OptSzRecordResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzRecordResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzRecordResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzRecordResponse) GetRawData() OptNilSzRecordResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzRecordResponse) GetData() OptSzRecordResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzRecordResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzRecordResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzRecordResponse) SetRawData(val OptNilSzRecordResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzRecordResponse) SetData(val OptSzRecordResponseData) {
	s.Data = val
}

func (*SzRecordResponse) getRecordRes() {}

type SzRecordResponseData struct {
	// The `SzEntityRecord` describing the matching record.
	Record OptSzEntityRecord `json:"record"`
}

// GetRecord returns the value of Record.
func (s *SzRecordResponseData) GetRecord() OptSzEntityRecord {
	return s.Record
}

// SetRecord sets the value of Record.
func (s *SzRecordResponseData) SetRecord(val OptSzEntityRecord) {
	s.Record = val
}

// The RAW result from the underlying native API function.
type SzRecordResponseRawData map[string]jx.Raw

func (s *SzRecordResponseRawData) init() SzRecordResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzReevaluateResponse
type SzReevaluateResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzReevaluateResponseRawData `json:"rawData"`
	Data    OptSzReevaluateResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzReevaluateResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzReevaluateResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzReevaluateResponse) GetRawData() OptNilSzReevaluateResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzReevaluateResponse) GetData() OptSzReevaluateResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzReevaluateResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzReevaluateResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzReevaluateResponse) SetRawData(val OptNilSzReevaluateResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzReevaluateResponse) SetData(val OptSzReevaluateResponseData) {
	s.Data = val
}

func (*SzReevaluateResponse) reevaluateEntityRes() {}
func (*SzReevaluateResponse) reevaluateRecordRes() {}

// Describes the data segment of `SzReevaluateResponse`.
// Ref: #/components/schemas/SzReevaluateResponseData
type SzReevaluateResponseData struct {
	// The optionally requested info associated with the load.
	Info OptSzResolutionInfo `json:"info"`
}

// GetInfo returns the value of Info.
func (s *SzReevaluateResponseData) GetInfo() OptSzResolutionInfo {
	return s.Info
}

// SetInfo sets the value of Info.
func (s *SzReevaluateResponseData) SetInfo(val OptSzResolutionInfo) {
	s.Info = val
}

// The RAW result from the underlying native API function.
type SzReevaluateResponseRawData map[string]jx.Raw

func (s *SzReevaluateResponseRawData) init() SzReevaluateResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzRelatedEntity
type SzRelatedEntity struct {
	// The unique numeric ID identifying the entity.
	EntityId OptInt64 `json:"entityId"`
	// The name associated with this entity that is considered the best name among all the associated
	// names.
	EntityName OptString `json:"entityName"`
	// Usually the same as the entityName property, but this may differ if the entity was found based on
	// a name search.  In such a case, this field represents the name that most closely matches the name
	// that was searched on.
	BestName OptString `json:"bestName"`
	// The array of DataSourceRecordSummary instances describing the number of records associated with
	// each data source that contributes to this entity.
	RecordSummaries []SzDataSourceRecordSummary `json:"recordSummaries"`
	// An array of names associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe").
	NameData []string `json:"nameData"`
	// An array of characteristics associated with the entity that are formatted for readability.  These
	// will be prefixed by a characteristic type and optionally by a "usage type" if one was provided.
	// **NOTE:** The `characteristicData` field is derived from the feature data values that contribute
	// to the `ATTRIBUTE_DATA` field at the record level in the "raw data" JSON.
	CharacteristicData []string `json:"characteristicData"`
	// An array of addresses associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "HOME: 101 Main Street").
	AddressData []string `json:"addressData"`
	// An array of phone numbers associated with the entity that are formatted for readability.  These
	// may be prefixed by a "usage type" if one was provided (e.g.: "HOME: 702-555-1212").
	PhoneData []string `json:"phoneData"`
	// An array of entity data associated with the entity where the items are formatted for readability.
	// These will be prefixed by an identifier type and may be prefixed by a "usage type" if one was
	// provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com").
	IdentifierData []string `json:"identifierData"`
	// An array of relationship data items associated with the entity that describes disclosed
	// relationships.
	RelationshipData []string `json:"relationshipData"`
	// An array of associated data items that were loaded with the entity's records but not normally
	// recognized or used for entity resolution. This array usually contains useful information from the
	// source systems.
	OtherData []string `json:"otherData"`
	// The array of `SzMatchedRecord` instances describing the records associated with this entity.
	Records []SzMatchedRecord `json:"records"`
	// The map of string feature names to arrays of SzEntityFeature instances describing the values
	// associated with each respective feature name.
	Features OptSzRelatedEntityFeatures `json:"features"`
	// If true then this `SzResolvedEntity` has complete features and records, otherwise they are not
	// provided.  Also, the recordSummary items may be missing the topRecordIds if partial is true.  This
	// can be true for partially retrieved related entities or if features are suppressed, if the detail
	// level has suppressed records or related matching info (in the case of related entities) or if the
	// force-minimal response flag has been been specified.
	Partial OptBool `json:"partial"`
	// The timestamp that the entity was last seen (i.e.: most recent record was loaded).
	LastSeenTimestamp OptDateTime `json:"lastSeenTimestamp"`
	// The integer "match level" describing how the related entity matched to the primary resolved entity.
	MatchLevel OptInt32 `json:"matchLevel"`
	// The match key describing what features matched between the primary resolved entity and the related
	// entity.
	MatchKey OptString `json:"matchKey"`
	// The code identifying the resolution rule that related this entity to the primary resolved entity.
	ResolutionRuleCode OptString `json:"resolutionRuleCode"`
	// A boolean flag indicating if this related entity represents a disclosed relationship.
	Disclosed OptBool `json:"disclosed"`
	// A boolean flag indicating if this related entity represents an ambiguous relationship.
	Ambiguous    OptBool               `json:"ambiguous"`
	RelationType OptSzRelationshipType `json:"relationType"`
}

// GetEntityId returns the value of EntityId.
func (s *SzRelatedEntity) GetEntityId() OptInt64 {
	return s.EntityId
}

// GetEntityName returns the value of EntityName.
func (s *SzRelatedEntity) GetEntityName() OptString {
	return s.EntityName
}

// GetBestName returns the value of BestName.
func (s *SzRelatedEntity) GetBestName() OptString {
	return s.BestName
}

// GetRecordSummaries returns the value of RecordSummaries.
func (s *SzRelatedEntity) GetRecordSummaries() []SzDataSourceRecordSummary {
	return s.RecordSummaries
}

// GetNameData returns the value of NameData.
func (s *SzRelatedEntity) GetNameData() []string {
	return s.NameData
}

// GetCharacteristicData returns the value of CharacteristicData.
func (s *SzRelatedEntity) GetCharacteristicData() []string {
	return s.CharacteristicData
}

// GetAddressData returns the value of AddressData.
func (s *SzRelatedEntity) GetAddressData() []string {
	return s.AddressData
}

// GetPhoneData returns the value of PhoneData.
func (s *SzRelatedEntity) GetPhoneData() []string {
	return s.PhoneData
}

// GetIdentifierData returns the value of IdentifierData.
func (s *SzRelatedEntity) GetIdentifierData() []string {
	return s.IdentifierData
}

// GetRelationshipData returns the value of RelationshipData.
func (s *SzRelatedEntity) GetRelationshipData() []string {
	return s.RelationshipData
}

// GetOtherData returns the value of OtherData.
func (s *SzRelatedEntity) GetOtherData() []string {
	return s.OtherData
}

// GetRecords returns the value of Records.
func (s *SzRelatedEntity) GetRecords() []SzMatchedRecord {
	return s.Records
}

// GetFeatures returns the value of Features.
func (s *SzRelatedEntity) GetFeatures() OptSzRelatedEntityFeatures {
	return s.Features
}

// GetPartial returns the value of Partial.
func (s *SzRelatedEntity) GetPartial() OptBool {
	return s.Partial
}

// GetLastSeenTimestamp returns the value of LastSeenTimestamp.
func (s *SzRelatedEntity) GetLastSeenTimestamp() OptDateTime {
	return s.LastSeenTimestamp
}

// GetMatchLevel returns the value of MatchLevel.
func (s *SzRelatedEntity) GetMatchLevel() OptInt32 {
	return s.MatchLevel
}

// GetMatchKey returns the value of MatchKey.
func (s *SzRelatedEntity) GetMatchKey() OptString {
	return s.MatchKey
}

// GetResolutionRuleCode returns the value of ResolutionRuleCode.
func (s *SzRelatedEntity) GetResolutionRuleCode() OptString {
	return s.ResolutionRuleCode
}

// GetDisclosed returns the value of Disclosed.
func (s *SzRelatedEntity) GetDisclosed() OptBool {
	return s.Disclosed
}

// GetAmbiguous returns the value of Ambiguous.
func (s *SzRelatedEntity) GetAmbiguous() OptBool {
	return s.Ambiguous
}

// GetRelationType returns the value of RelationType.
func (s *SzRelatedEntity) GetRelationType() OptSzRelationshipType {
	return s.RelationType
}

// SetEntityId sets the value of EntityId.
func (s *SzRelatedEntity) SetEntityId(val OptInt64) {
	s.EntityId = val
}

// SetEntityName sets the value of EntityName.
func (s *SzRelatedEntity) SetEntityName(val OptString) {
	s.EntityName = val
}

// SetBestName sets the value of BestName.
func (s *SzRelatedEntity) SetBestName(val OptString) {
	s.BestName = val
}

// SetRecordSummaries sets the value of RecordSummaries.
func (s *SzRelatedEntity) SetRecordSummaries(val []SzDataSourceRecordSummary) {
	s.RecordSummaries = val
}

// SetNameData sets the value of NameData.
func (s *SzRelatedEntity) SetNameData(val []string) {
	s.NameData = val
}

// SetCharacteristicData sets the value of CharacteristicData.
func (s *SzRelatedEntity) SetCharacteristicData(val []string) {
	s.CharacteristicData = val
}

// SetAddressData sets the value of AddressData.
func (s *SzRelatedEntity) SetAddressData(val []string) {
	s.AddressData = val
}

// SetPhoneData sets the value of PhoneData.
func (s *SzRelatedEntity) SetPhoneData(val []string) {
	s.PhoneData = val
}

// SetIdentifierData sets the value of IdentifierData.
func (s *SzRelatedEntity) SetIdentifierData(val []string) {
	s.IdentifierData = val
}

// SetRelationshipData sets the value of RelationshipData.
func (s *SzRelatedEntity) SetRelationshipData(val []string) {
	s.RelationshipData = val
}

// SetOtherData sets the value of OtherData.
func (s *SzRelatedEntity) SetOtherData(val []string) {
	s.OtherData = val
}

// SetRecords sets the value of Records.
func (s *SzRelatedEntity) SetRecords(val []SzMatchedRecord) {
	s.Records = val
}

// SetFeatures sets the value of Features.
func (s *SzRelatedEntity) SetFeatures(val OptSzRelatedEntityFeatures) {
	s.Features = val
}

// SetPartial sets the value of Partial.
func (s *SzRelatedEntity) SetPartial(val OptBool) {
	s.Partial = val
}

// SetLastSeenTimestamp sets the value of LastSeenTimestamp.
func (s *SzRelatedEntity) SetLastSeenTimestamp(val OptDateTime) {
	s.LastSeenTimestamp = val
}

// SetMatchLevel sets the value of MatchLevel.
func (s *SzRelatedEntity) SetMatchLevel(val OptInt32) {
	s.MatchLevel = val
}

// SetMatchKey sets the value of MatchKey.
func (s *SzRelatedEntity) SetMatchKey(val OptString) {
	s.MatchKey = val
}

// SetResolutionRuleCode sets the value of ResolutionRuleCode.
func (s *SzRelatedEntity) SetResolutionRuleCode(val OptString) {
	s.ResolutionRuleCode = val
}

// SetDisclosed sets the value of Disclosed.
func (s *SzRelatedEntity) SetDisclosed(val OptBool) {
	s.Disclosed = val
}

// SetAmbiguous sets the value of Ambiguous.
func (s *SzRelatedEntity) SetAmbiguous(val OptBool) {
	s.Ambiguous = val
}

// SetRelationType sets the value of RelationType.
func (s *SzRelatedEntity) SetRelationType(val OptSzRelationshipType) {
	s.RelationType = val
}

// The map of string feature names to arrays of SzEntityFeature instances describing the values
// associated with each respective feature name.
type SzRelatedEntityFeatures map[string][]SzEntityFeature

func (s *SzRelatedEntityFeatures) init() SzRelatedEntityFeatures {
	m := *s
	if m == nil {
		m = map[string][]SzEntityFeature{}
		*s = m
	}
	return m
}

// Describes a pair of features that triggered a relationship between the respective records.
// Ref: #/components/schemas/SzRelatedFeatures
type SzRelatedFeatures struct {
	// The first related feature.
	Feature1 OptSzScoredFeature `json:"feature1"`
	// The second related feature.
	Feature2 OptSzScoredFeature `json:"feature2"`
}

// GetFeature1 returns the value of Feature1.
func (s *SzRelatedFeatures) GetFeature1() OptSzScoredFeature {
	return s.Feature1
}

// GetFeature2 returns the value of Feature2.
func (s *SzRelatedFeatures) GetFeature2() OptSzScoredFeature {
	return s.Feature2
}

// SetFeature1 sets the value of Feature1.
func (s *SzRelatedFeatures) SetFeature1(val OptSzScoredFeature) {
	s.Feature1 = val
}

// SetFeature2 sets the value of Feature2.
func (s *SzRelatedFeatures) SetFeature2(val OptSzScoredFeature) {
	s.Feature2 = val
}

// The HTTP method that was used for the operation.  The possible values are:
// * `OUTBOUND` - The relationship goes in the direction from the first
// entity to the second entity.
// * `INBOUND` - The relationship goes in the direction from the second
// entity to the first entity.
// * `BIDIRECTIONAL` - The relationship goes in both directions between
// the two entities.
// Ref: #/components/schemas/SzRelationDirection
type SzRelationDirection string

const (
	SzRelationDirectionINBOUND       SzRelationDirection = "INBOUND"
	SzRelationDirectionOUTBOUND      SzRelationDirection = "OUTBOUND"
	SzRelationDirectionBIDIRECTIONAL SzRelationDirection = "BIDIRECTIONAL"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzRelationDirection) MarshalText() ([]byte, error) {
	switch s {
	case SzRelationDirectionINBOUND:
		return []byte(s), nil
	case SzRelationDirectionOUTBOUND:
		return []byte(s), nil
	case SzRelationDirectionBIDIRECTIONAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzRelationDirection) UnmarshalText(data []byte) error {
	switch SzRelationDirection(data) {
	case SzRelationDirectionINBOUND:
		*s = SzRelationDirectionINBOUND
		return nil
	case SzRelationDirectionOUTBOUND:
		*s = SzRelationDirectionOUTBOUND
		return nil
	case SzRelationDirectionBIDIRECTIONAL:
		*s = SzRelationDirectionBIDIRECTIONAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Controls how to handle the first-degree related entities.  The possible values are:
// * `NONE` - Do not include any data on first-degree related entities --
// this is the fastest option from a performance perspective because
// related entities do not have to be retrieved.
// * `PARTIAL` - **(default value)** Include only partial stub
// information for related entities with the `partial` property of the
// `SzRelatedEntity` instances set to `true`.  Obtaining additional
// information requires subsequent API calls.
// * `FULL` - Include full data on the first-degree related entities
// according to the `featureMode` and `detailLevel` **unless**
// `forceMinimal` is `true`.  This option obtains the entity network
// at one degree for the requested entity and will populate up to 1000
// related entities as much as possible with respect to the
// `featureMode` and `detailLevel`.  Related entities beyond the first
// 1000 will be left incomplete and have their `partial` property set
// to `true` regardless of the `detailLevel` and `featureMode`.  If
// this value is specified along with `forceMinimal=true` then
// `PARTIAL` is used instead.
// Ref: #/components/schemas/SzRelationshipMode
type SzRelationshipMode string

const (
	SzRelationshipModeNONE    SzRelationshipMode = "NONE"
	SzRelationshipModePARTIAL SzRelationshipMode = "PARTIAL"
	SzRelationshipModeFULL    SzRelationshipMode = "FULL"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzRelationshipMode) MarshalText() ([]byte, error) {
	switch s {
	case SzRelationshipModeNONE:
		return []byte(s), nil
	case SzRelationshipModePARTIAL:
		return []byte(s), nil
	case SzRelationshipModeFULL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzRelationshipMode) UnmarshalText(data []byte) error {
	switch SzRelationshipMode(data) {
	case SzRelationshipModeNONE:
		*s = SzRelationshipModeNONE
		return nil
	case SzRelationshipModePARTIAL:
		*s = SzRelationshipModePARTIAL
		return nil
	case SzRelationshipModeFULL:
		*s = SzRelationshipModeFULL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes how an entity is related to another (either a possible match, a discovered possible
// relationship or a disclosed relationship).
// Ref: #/components/schemas/SzRelationshipType
type SzRelationshipType string

const (
	SzRelationshipTypePOSSIBLEMATCH     SzRelationshipType = "POSSIBLE_MATCH"
	SzRelationshipTypePOSSIBLERELATION  SzRelationshipType = "POSSIBLE_RELATION"
	SzRelationshipTypeDISCLOSEDRELATION SzRelationshipType = "DISCLOSED_RELATION"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzRelationshipType) MarshalText() ([]byte, error) {
	switch s {
	case SzRelationshipTypePOSSIBLEMATCH:
		return []byte(s), nil
	case SzRelationshipTypePOSSIBLERELATION:
		return []byte(s), nil
	case SzRelationshipTypeDISCLOSEDRELATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzRelationshipType) UnmarshalText(data []byte) error {
	switch SzRelationshipType(data) {
	case SzRelationshipTypePOSSIBLEMATCH:
		*s = SzRelationshipTypePOSSIBLEMATCH
		return nil
	case SzRelationshipTypePOSSIBLERELATION:
		*s = SzRelationshipTypePOSSIBLERELATION
		return nil
	case SzRelationshipTypeDISCLOSEDRELATION:
		*s = SzRelationshipTypeDISCLOSEDRELATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Provides information relevant to resolution of an entity either when loading a record or
// reevaluating an entity.
// Ref: #/components/schemas/SzResolutionInfo
type SzResolutionInfo struct {
	// The data source for the record that was focus of the load or reevaluate operation.
	DataSource OptString `json:"dataSource"`
	// The record ID for the record that was focus of the load or reevaluate operation.
	RecordId OptString `json:"recordId"`
	// The array of entity ID's for the affected entities.
	AffectedEntities []int64 `json:"affectedEntities"`
	// The entities that were flagged as relevant due to the resolution operation.
	FlaggedEntities []SzFlaggedEntity `json:"flaggedEntities"`
}

// GetDataSource returns the value of DataSource.
func (s *SzResolutionInfo) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordId returns the value of RecordId.
func (s *SzResolutionInfo) GetRecordId() OptString {
	return s.RecordId
}

// GetAffectedEntities returns the value of AffectedEntities.
func (s *SzResolutionInfo) GetAffectedEntities() []int64 {
	return s.AffectedEntities
}

// GetFlaggedEntities returns the value of FlaggedEntities.
func (s *SzResolutionInfo) GetFlaggedEntities() []SzFlaggedEntity {
	return s.FlaggedEntities
}

// SetDataSource sets the value of DataSource.
func (s *SzResolutionInfo) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordId sets the value of RecordId.
func (s *SzResolutionInfo) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetAffectedEntities sets the value of AffectedEntities.
func (s *SzResolutionInfo) SetAffectedEntities(val []int64) {
	s.AffectedEntities = val
}

// SetFlaggedEntities sets the value of FlaggedEntities.
func (s *SzResolutionInfo) SetFlaggedEntities(val []SzFlaggedEntity) {
	s.FlaggedEntities = val
}

// Describes a single step in describing how an entity was created.  Each step consists of either the
// formation of a new "virtual entity" from two records, the adding of a record to an existing
// virtual entity to create a new virtual entity, or the resolving of two virtual entities into a new
// virtual entity consisting of all the records.
// Ref: #/components/schemas/SzResolutionStep
type SzResolutionStep struct {
	// The step number indicating the order of this step relative to other steps if the steps were
	// flattened to be linear.  However, the non-linear nature of entity resolution means that the
	// ordering of the steps is only relevant within a single branch of the resolution tree.
	StepNumber OptInt32 `json:"stepNumber"`
	// The `SzVirtualEntity` describing the inbound virtual entity.
	InboundVirtualEntity OptSzVirtualEntity `json:"inboundVirtualEntity"`
	// The `SzVirtualEntity` describing the candidate virtual entity.
	CandidateVirtualEntity OptSzVirtualEntity `json:"candidateVirtualEntity"`
	// The `SzHowMatchInfo` describing how the two virtual entities matched each other.
	MatchInfo OptSzHowMatchInfo `json:"matchInfo"`
	// The virtual entity ID identifying the virtual entity that resulted from resolving the inbound and
	// candidate virtual entities.
	ResolvedVirtualEntityId OptString `json:"resolvedVirtualEntityId"`
}

// GetStepNumber returns the value of StepNumber.
func (s *SzResolutionStep) GetStepNumber() OptInt32 {
	return s.StepNumber
}

// GetInboundVirtualEntity returns the value of InboundVirtualEntity.
func (s *SzResolutionStep) GetInboundVirtualEntity() OptSzVirtualEntity {
	return s.InboundVirtualEntity
}

// GetCandidateVirtualEntity returns the value of CandidateVirtualEntity.
func (s *SzResolutionStep) GetCandidateVirtualEntity() OptSzVirtualEntity {
	return s.CandidateVirtualEntity
}

// GetMatchInfo returns the value of MatchInfo.
func (s *SzResolutionStep) GetMatchInfo() OptSzHowMatchInfo {
	return s.MatchInfo
}

// GetResolvedVirtualEntityId returns the value of ResolvedVirtualEntityId.
func (s *SzResolutionStep) GetResolvedVirtualEntityId() OptString {
	return s.ResolvedVirtualEntityId
}

// SetStepNumber sets the value of StepNumber.
func (s *SzResolutionStep) SetStepNumber(val OptInt32) {
	s.StepNumber = val
}

// SetInboundVirtualEntity sets the value of InboundVirtualEntity.
func (s *SzResolutionStep) SetInboundVirtualEntity(val OptSzVirtualEntity) {
	s.InboundVirtualEntity = val
}

// SetCandidateVirtualEntity sets the value of CandidateVirtualEntity.
func (s *SzResolutionStep) SetCandidateVirtualEntity(val OptSzVirtualEntity) {
	s.CandidateVirtualEntity = val
}

// SetMatchInfo sets the value of MatchInfo.
func (s *SzResolutionStep) SetMatchInfo(val OptSzHowMatchInfo) {
	s.MatchInfo = val
}

// SetResolvedVirtualEntityId sets the value of ResolvedVirtualEntityId.
func (s *SzResolutionStep) SetResolvedVirtualEntityId(val OptString) {
	s.ResolvedVirtualEntityId = val
}

// Describes a resolved entity that is made up of one or more SzMatchedRecord instances.
// Ref: #/components/schemas/SzResolvedEntity
type SzResolvedEntity struct {
	// The unique numeric ID identifying the entity.
	EntityId OptInt64 `json:"entityId"`
	// The name associated with this entity that is considered the best name among all the associated
	// names.
	EntityName OptString `json:"entityName"`
	// Usually the same as the entityName property, but this may differ if the entity was found based on
	// a name search.  In such a case, this field represents the name that most closely matches the name
	// that was searched on.
	BestName OptString `json:"bestName"`
	// The array of DataSourceRecordSummary instances describing the number of records associated with
	// each data source that contributes to this entity.
	RecordSummaries []SzDataSourceRecordSummary `json:"recordSummaries"`
	// An array of names associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe").
	NameData []string `json:"nameData"`
	// An array of characteristics associated with the entity that are formatted for readability.  These
	// will be prefixed by a characteristic type and optionally by a "usage type" if one was provided.
	// **NOTE:** The `characteristicData` field is derived from the feature data values that contribute
	// to the `ATTRIBUTE_DATA` field at the record level in the "raw data" JSON.
	CharacteristicData []string `json:"characteristicData"`
	// An array of addresses associated with the entity that are formatted for readability.  These may be
	// prefixed by a "usage type" if one was provided (e.g.: "HOME: 101 Main Street").
	AddressData []string `json:"addressData"`
	// An array of phone numbers associated with the entity that are formatted for readability.  These
	// may be prefixed by a "usage type" if one was provided (e.g.: "HOME: 702-555-1212").
	PhoneData []string `json:"phoneData"`
	// An array of entity data associated with the entity where the items are formatted for readability.
	// These will be prefixed by an identifier type and may be prefixed by a "usage type" if one was
	// provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com").
	IdentifierData []string `json:"identifierData"`
	// An array of relationship data items associated with the entity that describes disclosed
	// relationships.
	RelationshipData []string `json:"relationshipData"`
	// An array of associated data items that were loaded with the entity's records but not normally
	// recognized or used for entity resolution. This array usually contains useful information from the
	// source systems.
	OtherData []string `json:"otherData"`
	// The array of `SzMatchedRecord` instances describing the records associated with this entity.
	Records []SzMatchedRecord `json:"records"`
	// The map of string feature names to arrays of SzEntityFeature instances describing the values
	// associated with each respective feature name.
	Features OptSzResolvedEntityFeatures `json:"features"`
	// If true then this `SzResolvedEntity` has complete features and records, otherwise they are not
	// provided.  Also, the recordSummary items may be missing the topRecordIds if partial is true.  This
	// can be true for partially retrieved related entities or if features are suppressed, if the detail
	// level has suppressed records or related matching info (in the case of related entities) or if the
	// force-minimal response flag has been been specified.
	Partial OptBool `json:"partial"`
	// The timestamp that the entity was last seen (i.e.: most recent record was loaded).
	LastSeenTimestamp OptDateTime `json:"lastSeenTimestamp"`
}

// GetEntityId returns the value of EntityId.
func (s *SzResolvedEntity) GetEntityId() OptInt64 {
	return s.EntityId
}

// GetEntityName returns the value of EntityName.
func (s *SzResolvedEntity) GetEntityName() OptString {
	return s.EntityName
}

// GetBestName returns the value of BestName.
func (s *SzResolvedEntity) GetBestName() OptString {
	return s.BestName
}

// GetRecordSummaries returns the value of RecordSummaries.
func (s *SzResolvedEntity) GetRecordSummaries() []SzDataSourceRecordSummary {
	return s.RecordSummaries
}

// GetNameData returns the value of NameData.
func (s *SzResolvedEntity) GetNameData() []string {
	return s.NameData
}

// GetCharacteristicData returns the value of CharacteristicData.
func (s *SzResolvedEntity) GetCharacteristicData() []string {
	return s.CharacteristicData
}

// GetAddressData returns the value of AddressData.
func (s *SzResolvedEntity) GetAddressData() []string {
	return s.AddressData
}

// GetPhoneData returns the value of PhoneData.
func (s *SzResolvedEntity) GetPhoneData() []string {
	return s.PhoneData
}

// GetIdentifierData returns the value of IdentifierData.
func (s *SzResolvedEntity) GetIdentifierData() []string {
	return s.IdentifierData
}

// GetRelationshipData returns the value of RelationshipData.
func (s *SzResolvedEntity) GetRelationshipData() []string {
	return s.RelationshipData
}

// GetOtherData returns the value of OtherData.
func (s *SzResolvedEntity) GetOtherData() []string {
	return s.OtherData
}

// GetRecords returns the value of Records.
func (s *SzResolvedEntity) GetRecords() []SzMatchedRecord {
	return s.Records
}

// GetFeatures returns the value of Features.
func (s *SzResolvedEntity) GetFeatures() OptSzResolvedEntityFeatures {
	return s.Features
}

// GetPartial returns the value of Partial.
func (s *SzResolvedEntity) GetPartial() OptBool {
	return s.Partial
}

// GetLastSeenTimestamp returns the value of LastSeenTimestamp.
func (s *SzResolvedEntity) GetLastSeenTimestamp() OptDateTime {
	return s.LastSeenTimestamp
}

// SetEntityId sets the value of EntityId.
func (s *SzResolvedEntity) SetEntityId(val OptInt64) {
	s.EntityId = val
}

// SetEntityName sets the value of EntityName.
func (s *SzResolvedEntity) SetEntityName(val OptString) {
	s.EntityName = val
}

// SetBestName sets the value of BestName.
func (s *SzResolvedEntity) SetBestName(val OptString) {
	s.BestName = val
}

// SetRecordSummaries sets the value of RecordSummaries.
func (s *SzResolvedEntity) SetRecordSummaries(val []SzDataSourceRecordSummary) {
	s.RecordSummaries = val
}

// SetNameData sets the value of NameData.
func (s *SzResolvedEntity) SetNameData(val []string) {
	s.NameData = val
}

// SetCharacteristicData sets the value of CharacteristicData.
func (s *SzResolvedEntity) SetCharacteristicData(val []string) {
	s.CharacteristicData = val
}

// SetAddressData sets the value of AddressData.
func (s *SzResolvedEntity) SetAddressData(val []string) {
	s.AddressData = val
}

// SetPhoneData sets the value of PhoneData.
func (s *SzResolvedEntity) SetPhoneData(val []string) {
	s.PhoneData = val
}

// SetIdentifierData sets the value of IdentifierData.
func (s *SzResolvedEntity) SetIdentifierData(val []string) {
	s.IdentifierData = val
}

// SetRelationshipData sets the value of RelationshipData.
func (s *SzResolvedEntity) SetRelationshipData(val []string) {
	s.RelationshipData = val
}

// SetOtherData sets the value of OtherData.
func (s *SzResolvedEntity) SetOtherData(val []string) {
	s.OtherData = val
}

// SetRecords sets the value of Records.
func (s *SzResolvedEntity) SetRecords(val []SzMatchedRecord) {
	s.Records = val
}

// SetFeatures sets the value of Features.
func (s *SzResolvedEntity) SetFeatures(val OptSzResolvedEntityFeatures) {
	s.Features = val
}

// SetPartial sets the value of Partial.
func (s *SzResolvedEntity) SetPartial(val OptBool) {
	s.Partial = val
}

// SetLastSeenTimestamp sets the value of LastSeenTimestamp.
func (s *SzResolvedEntity) SetLastSeenTimestamp(val OptDateTime) {
	s.LastSeenTimestamp = val
}

// The map of string feature names to arrays of SzEntityFeature instances describing the values
// associated with each respective feature name.
type SzResolvedEntityFeatures map[string][]SzEntityFeature

func (s *SzResolvedEntityFeatures) init() SzResolvedEntityFeatures {
	m := *s
	if m == nil {
		m = map[string][]SzEntityFeature{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzResponseWithRawData
type SzResponseWithRawData struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzResponseWithRawDataRawData `json:"rawData"`
}

// GetMeta returns the value of Meta.
func (s *SzResponseWithRawData) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzResponseWithRawData) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzResponseWithRawData) GetRawData() OptNilSzResponseWithRawDataRawData {
	return s.RawData
}

// SetMeta sets the value of Meta.
func (s *SzResponseWithRawData) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzResponseWithRawData) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzResponseWithRawData) SetRawData(val OptNilSzResponseWithRawDataRawData) {
	s.RawData = val
}

func (*SzResponseWithRawData) getActiveConfigRes()   {}
func (*SzResponseWithRawData) getTemplateConfigRes() {}

// The RAW result from the underlying native API function.
type SzResponseWithRawDataRawData map[string]jx.Raw

func (s *SzResponseWithRawDataRawData) init() SzResponseWithRawDataRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A description of a feature that has been scored against another feature.
// Ref: #/components/schemas/SzScoredFeature
type SzScoredFeature struct {
	// The identifier uniquely identifying the feature.
	FeatureId OptInt64 `json:"featureId"`
	// The feature type of the feature.
	FeatureType OptString `json:"featureType"`
	// The value of the feature that was scored.
	FeatureValue OptString `json:"featureValue"`
	// The usage type assigned to the feature value.  This field is optional and may be excluded if the
	// value is missing.
	UsageType OptString `json:"usageType"`
}

// GetFeatureId returns the value of FeatureId.
func (s *SzScoredFeature) GetFeatureId() OptInt64 {
	return s.FeatureId
}

// GetFeatureType returns the value of FeatureType.
func (s *SzScoredFeature) GetFeatureType() OptString {
	return s.FeatureType
}

// GetFeatureValue returns the value of FeatureValue.
func (s *SzScoredFeature) GetFeatureValue() OptString {
	return s.FeatureValue
}

// GetUsageType returns the value of UsageType.
func (s *SzScoredFeature) GetUsageType() OptString {
	return s.UsageType
}

// SetFeatureId sets the value of FeatureId.
func (s *SzScoredFeature) SetFeatureId(val OptInt64) {
	s.FeatureId = val
}

// SetFeatureType sets the value of FeatureType.
func (s *SzScoredFeature) SetFeatureType(val OptString) {
	s.FeatureType = val
}

// SetFeatureValue sets the value of FeatureValue.
func (s *SzScoredFeature) SetFeatureValue(val OptString) {
	s.FeatureValue = val
}

// SetUsageType sets the value of UsageType.
func (s *SzScoredFeature) SetUsageType(val OptString) {
	s.UsageType = val
}

// Describes the scoring behavior for a feature / feature type.
// Ref: #/components/schemas/SzScoringBehavior
type SzScoringBehavior struct {
	// The code identifying the behavior.
	Code OptString `json:"code"`
	// The number of entities that that would typically share the same value for a feature of type.  This
	// value can only be `null` if the frequency is unknown for the scoring behavior code that is
	// returned.
	Frequency OptSzScoringFrequency `json:"frequency"`
	// `true` if an entity should typically have only one value for a feature of this type (like a Social
	// Security Number, Date of Birth) and `false` if the entity can typically have multiple values for
	// the feature type (like Address or Phone Number).  This value is `null` if exclusivity is not
	// applicable to the scoring behavior such as with special scoring behaviors like `NAME`.
	Exclusive OptNilBool `json:"exclusive"`
	// `true` if the feature value for the feature type remains constant for an entity over time (like a
	// Date of Birth), and `false` if it can can change for the entity over time (like a Home Address).
	// This is `null` if the stability is not applicable to the scoring behavior such as with special
	// behaviors like `NAME`.
	Stable OptNilBool `json:"stable"`
}

// GetCode returns the value of Code.
func (s *SzScoringBehavior) GetCode() OptString {
	return s.Code
}

// GetFrequency returns the value of Frequency.
func (s *SzScoringBehavior) GetFrequency() OptSzScoringFrequency {
	return s.Frequency
}

// GetExclusive returns the value of Exclusive.
func (s *SzScoringBehavior) GetExclusive() OptNilBool {
	return s.Exclusive
}

// GetStable returns the value of Stable.
func (s *SzScoringBehavior) GetStable() OptNilBool {
	return s.Stable
}

// SetCode sets the value of Code.
func (s *SzScoringBehavior) SetCode(val OptString) {
	s.Code = val
}

// SetFrequency sets the value of Frequency.
func (s *SzScoringBehavior) SetFrequency(val OptSzScoringFrequency) {
	s.Frequency = val
}

// SetExclusive sets the value of Exclusive.
func (s *SzScoringBehavior) SetExclusive(val OptNilBool) {
	s.Exclusive = val
}

// SetStable sets the value of Stable.
func (s *SzScoringBehavior) SetStable(val OptNilBool) {
	s.Stable = val
}

// Describes the scoring bucket that a feature score falls into.  The range of scores constitute
// different buckets depending on the feature type..  The possible values are:
// * `NOT_SCORED` - The respective features were not scored.
// * `SAME` - The two feature values are considered to be the same.
// * `CLOSE` - The two feature values are considered to be close.
// * `LIKELY` - The two feature values are similar, but not enough to
// be considered `CLOSE`.
// * `PLAUSIBLE` - It's possible that the two feature values are the
// same but almost just as likely that they are not.
// * `UNLIKELY` - It's unlikely that the two feature values represent
// the same value.
// * `NO_CHANCE` - The two feature values obviously represent different
// values.
// Ref: #/components/schemas/SzScoringBucket
type SzScoringBucket string

const (
	SzScoringBucketNOTSCORED SzScoringBucket = "NOT_SCORED"
	SzScoringBucketSAME      SzScoringBucket = "SAME"
	SzScoringBucketCLOSE     SzScoringBucket = "CLOSE"
	SzScoringBucketLIKELY    SzScoringBucket = "LIKELY"
	SzScoringBucketPLAUSIBLE SzScoringBucket = "PLAUSIBLE"
	SzScoringBucketUNLIKELY  SzScoringBucket = "UNLIKELY"
	SzScoringBucketNOCHANCE  SzScoringBucket = "NO_CHANCE"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzScoringBucket) MarshalText() ([]byte, error) {
	switch s {
	case SzScoringBucketNOTSCORED:
		return []byte(s), nil
	case SzScoringBucketSAME:
		return []byte(s), nil
	case SzScoringBucketCLOSE:
		return []byte(s), nil
	case SzScoringBucketLIKELY:
		return []byte(s), nil
	case SzScoringBucketPLAUSIBLE:
		return []byte(s), nil
	case SzScoringBucketUNLIKELY:
		return []byte(s), nil
	case SzScoringBucketNOCHANCE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzScoringBucket) UnmarshalText(data []byte) error {
	switch SzScoringBucket(data) {
	case SzScoringBucketNOTSCORED:
		*s = SzScoringBucketNOTSCORED
		return nil
	case SzScoringBucketSAME:
		*s = SzScoringBucketSAME
		return nil
	case SzScoringBucketCLOSE:
		*s = SzScoringBucketCLOSE
		return nil
	case SzScoringBucketLIKELY:
		*s = SzScoringBucketLIKELY
		return nil
	case SzScoringBucketPLAUSIBLE:
		*s = SzScoringBucketPLAUSIBLE
		return nil
	case SzScoringBucketUNLIKELY:
		*s = SzScoringBucketUNLIKELY
		return nil
	case SzScoringBucketNOCHANCE:
		*s = SzScoringBucketNOCHANCE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Enumerates the various scoring behavior frequencies for entity features. This indicates the number
// of entities that would typically share the same value for a feature of this type.  The possible
// values are:
// * `ALWAYS_ONE` - The feature value belongs to exactly one entity so
// if two records share this value they will always
// merge together.
// * `ONE` - The feature value typically belongs to one entity (like a
// Social Security Number, Tax ID or Drivers License Number)
// * `FEW` - The feature value typically belongs to at most a few
// entities (like an Address or Phone Number).
// * `MANY` - The feature value can belong to many entities (like a
// date of birth)
// * `VERY_MANY` - The feature can belong to very many entities (like
// a gender).
// * `NAME` - A special frequency used for name features since they have
// unique properties.
// Ref: #/components/schemas/SzScoringFrequency
type SzScoringFrequency string

const (
	SzScoringFrequencyALWAYSONE SzScoringFrequency = "ALWAYS_ONE"
	SzScoringFrequencyONE       SzScoringFrequency = "ONE"
	SzScoringFrequencyFEW       SzScoringFrequency = "FEW"
	SzScoringFrequencyMANY      SzScoringFrequency = "MANY"
	SzScoringFrequencyVERYMANY  SzScoringFrequency = "VERY_MANY"
	SzScoringFrequencyNAME      SzScoringFrequency = "NAME"
)

// MarshalText implements encoding.TextMarshaler.
func (s SzScoringFrequency) MarshalText() ([]byte, error) {
	switch s {
	case SzScoringFrequencyALWAYSONE:
		return []byte(s), nil
	case SzScoringFrequencyONE:
		return []byte(s), nil
	case SzScoringFrequencyFEW:
		return []byte(s), nil
	case SzScoringFrequencyMANY:
		return []byte(s), nil
	case SzScoringFrequencyVERYMANY:
		return []byte(s), nil
	case SzScoringFrequencyNAME:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SzScoringFrequency) UnmarshalText(data []byte) error {
	switch SzScoringFrequency(data) {
	case SzScoringFrequencyALWAYSONE:
		*s = SzScoringFrequencyALWAYSONE
		return nil
	case SzScoringFrequencyONE:
		*s = SzScoringFrequencyONE
		return nil
	case SzScoringFrequencyFEW:
		*s = SzScoringFrequencyFEW
		return nil
	case SzScoringFrequencyMANY:
		*s = SzScoringFrequencyMANY
		return nil
	case SzScoringFrequencyVERYMANY:
		*s = SzScoringFrequencyVERYMANY
		return nil
	case SzScoringFrequencyNAME:
		*s = SzScoringFrequencyNAME
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the scoring between two search features.
// Ref: #/components/schemas/SzSearchFeatureScore
type SzSearchFeatureScore struct {
	// The feature type of the features being scored.
	FeatureType OptString `json:"featureType"`
	// The inbound feature value as a string.
	InboundFeature OptString `json:"inboundFeature"`
	// The feature value that was a candidate match for the inbound feature as a string.
	CandidateFeature OptString `json:"candidateFeature"`
	// The integer score between the two feature values (typically from 0 to 100).  If this is a name
	// feature, then this value is the "best" value from the `SzNameScoring` instance described by
	// `nameScoringDetails` (in order of precedence the first of these values that exists: `orgNameScore`,
	//  `fullNameScore`, `surnameScore` and then `givenNameScore`).
	Score OptInt32 `json:"score"`
	// The name scoring values if this score is for a name feature.  This property is omitted if not a
	// name feature.
	NameScoringDetails OptSzNameScoring `json:"nameScoringDetails"`
}

// GetFeatureType returns the value of FeatureType.
func (s *SzSearchFeatureScore) GetFeatureType() OptString {
	return s.FeatureType
}

// GetInboundFeature returns the value of InboundFeature.
func (s *SzSearchFeatureScore) GetInboundFeature() OptString {
	return s.InboundFeature
}

// GetCandidateFeature returns the value of CandidateFeature.
func (s *SzSearchFeatureScore) GetCandidateFeature() OptString {
	return s.CandidateFeature
}

// GetScore returns the value of Score.
func (s *SzSearchFeatureScore) GetScore() OptInt32 {
	return s.Score
}

// GetNameScoringDetails returns the value of NameScoringDetails.
func (s *SzSearchFeatureScore) GetNameScoringDetails() OptSzNameScoring {
	return s.NameScoringDetails
}

// SetFeatureType sets the value of FeatureType.
func (s *SzSearchFeatureScore) SetFeatureType(val OptString) {
	s.FeatureType = val
}

// SetInboundFeature sets the value of InboundFeature.
func (s *SzSearchFeatureScore) SetInboundFeature(val OptString) {
	s.InboundFeature = val
}

// SetCandidateFeature sets the value of CandidateFeature.
func (s *SzSearchFeatureScore) SetCandidateFeature(val OptString) {
	s.CandidateFeature = val
}

// SetScore sets the value of Score.
func (s *SzSearchFeatureScore) SetScore(val OptInt32) {
	s.Score = val
}

// SetNameScoringDetails sets the value of NameScoringDetails.
func (s *SzSearchFeatureScore) SetNameScoringDetails(val OptSzNameScoring) {
	s.NameScoringDetails = val
}

// Provides information about which server features are enabled and which are not enabled.
// Ref: #/components/schemas/SzServerInfo
type SzServerInfo struct {
	// The number of Senzing worker threads pooled for handling requests.
	Concurrency OptInt32 `json:"concurrency"`
	// The active configuration ID being used by the API server.  This is still available if the server
	// was started with a static file configuration via the `G2CONFIGFILE` initialization property.
	ActiveConfigId OptInt32 `json:"activeConfigId"`
	// Whether or not the server will automatically pickup the latest default configuration if it changes.
	DynamicConfig OptBool `json:"dynamicConfig"`
	// Whether or not the server was started in read-only mode.  If in read-only mode then operations
	// that modify the repository (e.g.: loading records or configuring new data sources) are not allowed.
	ReadOnly OptBool `json:"readOnly"`
	// Whether or not admin features are enabled.  If admin features are not enabled then the
	// configuration cannot be modified.
	AdminEnabled OptBool `json:"adminEnabled"`
	// The maximum size for inbound text or binary messages when invoking end-points via Web Sockets
	// `ws://` protocol.
	WebSocketsMessageMaxSize OptInt32 `json:"webSocketsMessageMaxSize"`
	// Whether or not an asynchronous INFO queue has been configured for automatically sending "INFO"
	// messages when records are loaded, reevaluated or deleted.
	InfoQueueConfigured OptBool `json:"infoQueueConfigured"`
}

// GetConcurrency returns the value of Concurrency.
func (s *SzServerInfo) GetConcurrency() OptInt32 {
	return s.Concurrency
}

// GetActiveConfigId returns the value of ActiveConfigId.
func (s *SzServerInfo) GetActiveConfigId() OptInt32 {
	return s.ActiveConfigId
}

// GetDynamicConfig returns the value of DynamicConfig.
func (s *SzServerInfo) GetDynamicConfig() OptBool {
	return s.DynamicConfig
}

// GetReadOnly returns the value of ReadOnly.
func (s *SzServerInfo) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetAdminEnabled returns the value of AdminEnabled.
func (s *SzServerInfo) GetAdminEnabled() OptBool {
	return s.AdminEnabled
}

// GetWebSocketsMessageMaxSize returns the value of WebSocketsMessageMaxSize.
func (s *SzServerInfo) GetWebSocketsMessageMaxSize() OptInt32 {
	return s.WebSocketsMessageMaxSize
}

// GetInfoQueueConfigured returns the value of InfoQueueConfigured.
func (s *SzServerInfo) GetInfoQueueConfigured() OptBool {
	return s.InfoQueueConfigured
}

// SetConcurrency sets the value of Concurrency.
func (s *SzServerInfo) SetConcurrency(val OptInt32) {
	s.Concurrency = val
}

// SetActiveConfigId sets the value of ActiveConfigId.
func (s *SzServerInfo) SetActiveConfigId(val OptInt32) {
	s.ActiveConfigId = val
}

// SetDynamicConfig sets the value of DynamicConfig.
func (s *SzServerInfo) SetDynamicConfig(val OptBool) {
	s.DynamicConfig = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *SzServerInfo) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetAdminEnabled sets the value of AdminEnabled.
func (s *SzServerInfo) SetAdminEnabled(val OptBool) {
	s.AdminEnabled = val
}

// SetWebSocketsMessageMaxSize sets the value of WebSocketsMessageMaxSize.
func (s *SzServerInfo) SetWebSocketsMessageMaxSize(val OptInt32) {
	s.WebSocketsMessageMaxSize = val
}

// SetInfoQueueConfigured sets the value of InfoQueueConfigured.
func (s *SzServerInfo) SetInfoQueueConfigured(val OptBool) {
	s.InfoQueueConfigured = val
}

// Merged schema.
// Ref: #/components/schemas/SzServerInfoResponse
type SzServerInfoResponse struct {
	Meta  OptSzMeta       `json:"meta"`
	Links OptSzLinks      `json:"links"`
	Data  OptSzServerInfo `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzServerInfoResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzServerInfoResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetData returns the value of Data.
func (s *SzServerInfoResponse) GetData() OptSzServerInfo {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzServerInfoResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzServerInfoResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetData sets the value of Data.
func (s *SzServerInfoResponse) SetData(val OptSzServerInfo) {
	s.Data = val
}

func (*SzServerInfoResponse) getServerInfoRes() {}

// Describes the Senzing version information.
// Ref: #/components/schemas/SzVersionInfo
type SzVersionInfo struct {
	// The version of the REST API Server implementation.
	ApiServerVersion OptString `json:"apiServerVersion"`
	// The version of the REST API Specification that is implemented.
	RestApiVersion OptString `json:"restApiVersion"`
	// The version for the underlying runtime native Senzing API.
	NativeApiVersion OptString `json:"nativeApiVersion"`
	// The build version for the underlying runtime native Senzing API.
	NativeApiBuildVersion OptString `json:"nativeApiBuildVersion"`
	// The build number for the underlying runtime native Senzing API.
	NativeApiBuildNumber OptString `json:"nativeApiBuildNumber"`
	// The build date for the underlying runtime native Senzing API.
	NativeApiBuildDate OptDateTime `json:"nativeApiBuildDate"`
	// The configuration compatibility version for the underlying runtime native Senzing API.
	ConfigCompatibilityVersion OptString `json:"configCompatibilityVersion"`
}

// GetApiServerVersion returns the value of ApiServerVersion.
func (s *SzVersionInfo) GetApiServerVersion() OptString {
	return s.ApiServerVersion
}

// GetRestApiVersion returns the value of RestApiVersion.
func (s *SzVersionInfo) GetRestApiVersion() OptString {
	return s.RestApiVersion
}

// GetNativeApiVersion returns the value of NativeApiVersion.
func (s *SzVersionInfo) GetNativeApiVersion() OptString {
	return s.NativeApiVersion
}

// GetNativeApiBuildVersion returns the value of NativeApiBuildVersion.
func (s *SzVersionInfo) GetNativeApiBuildVersion() OptString {
	return s.NativeApiBuildVersion
}

// GetNativeApiBuildNumber returns the value of NativeApiBuildNumber.
func (s *SzVersionInfo) GetNativeApiBuildNumber() OptString {
	return s.NativeApiBuildNumber
}

// GetNativeApiBuildDate returns the value of NativeApiBuildDate.
func (s *SzVersionInfo) GetNativeApiBuildDate() OptDateTime {
	return s.NativeApiBuildDate
}

// GetConfigCompatibilityVersion returns the value of ConfigCompatibilityVersion.
func (s *SzVersionInfo) GetConfigCompatibilityVersion() OptString {
	return s.ConfigCompatibilityVersion
}

// SetApiServerVersion sets the value of ApiServerVersion.
func (s *SzVersionInfo) SetApiServerVersion(val OptString) {
	s.ApiServerVersion = val
}

// SetRestApiVersion sets the value of RestApiVersion.
func (s *SzVersionInfo) SetRestApiVersion(val OptString) {
	s.RestApiVersion = val
}

// SetNativeApiVersion sets the value of NativeApiVersion.
func (s *SzVersionInfo) SetNativeApiVersion(val OptString) {
	s.NativeApiVersion = val
}

// SetNativeApiBuildVersion sets the value of NativeApiBuildVersion.
func (s *SzVersionInfo) SetNativeApiBuildVersion(val OptString) {
	s.NativeApiBuildVersion = val
}

// SetNativeApiBuildNumber sets the value of NativeApiBuildNumber.
func (s *SzVersionInfo) SetNativeApiBuildNumber(val OptString) {
	s.NativeApiBuildNumber = val
}

// SetNativeApiBuildDate sets the value of NativeApiBuildDate.
func (s *SzVersionInfo) SetNativeApiBuildDate(val OptDateTime) {
	s.NativeApiBuildDate = val
}

// SetConfigCompatibilityVersion sets the value of ConfigCompatibilityVersion.
func (s *SzVersionInfo) SetConfigCompatibilityVersion(val OptString) {
	s.ConfigCompatibilityVersion = val
}

// Merged schema.
// Ref: #/components/schemas/SzVersionResponse
type SzVersionResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzVersionResponseRawData `json:"rawData"`
	Data    OptSzVersionInfo               `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzVersionResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzVersionResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzVersionResponse) GetRawData() OptNilSzVersionResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzVersionResponse) GetData() OptSzVersionInfo {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzVersionResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzVersionResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzVersionResponse) SetRawData(val OptNilSzVersionResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzVersionResponse) SetData(val OptSzVersionInfo) {
	s.Data = val
}

func (*SzVersionResponse) versionRes() {}

// The RAW result from the underlying native API function.
type SzVersionResponseRawData map[string]jx.Raw

func (s *SzVersionResponseRawData) init() SzVersionResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes a virtual entity that describes an interim resolution step for an actual entity.
// Virtual entities that consist of a single record (or multiple "identical" records) are considered
// singletons and are the initial building blocks in how an entity is resolved.  Those with multiple
// distinct records are compound virtual entities formed from resolving two virtual entities.
// Ref: #/components/schemas/SzVirtualEntity
type SzVirtualEntity struct {
	// The unique identifier that distinguishes this virtual entity from all other virtual entities among
	// all steps in a "how" result.
	VirtualEntityId OptString `json:"virtualEntityId"`
	// Indicates if the virtual entity consists of a a single record or one or more effectively identical
	// records (i.e.: with the same internal ID) with a value of `true`.  If this virtual entity
	// comprises multiple distinct records then this is `false`.
	Singleton OptBool `json:"singleton"`
	// The array of `SzVirtualEntityRecords` identifying the constituent records of the virtual entity.
	// Those records in the array with the same `internalId` property are effectively identical for the
	// purposes of entity resolution.
	Records []SzVirtualEntityRecord `json:"records"`
}

// GetVirtualEntityId returns the value of VirtualEntityId.
func (s *SzVirtualEntity) GetVirtualEntityId() OptString {
	return s.VirtualEntityId
}

// GetSingleton returns the value of Singleton.
func (s *SzVirtualEntity) GetSingleton() OptBool {
	return s.Singleton
}

// GetRecords returns the value of Records.
func (s *SzVirtualEntity) GetRecords() []SzVirtualEntityRecord {
	return s.Records
}

// SetVirtualEntityId sets the value of VirtualEntityId.
func (s *SzVirtualEntity) SetVirtualEntityId(val OptString) {
	s.VirtualEntityId = val
}

// SetSingleton sets the value of Singleton.
func (s *SzVirtualEntity) SetSingleton(val OptBool) {
	s.Singleton = val
}

// SetRecords sets the value of Records.
func (s *SzVirtualEntity) SetRecords(val []SzVirtualEntityRecord) {
	s.Records = val
}

// Describes the data associated with an `SzVirtualEntityResponse` which currently includes only an
// `SzResolvedEntity`.
// Ref: #/components/schemas/SzVirtualEntityData
type SzVirtualEntityData struct {
	// The ResolvedEntity describing the primary entity.
	ResolvedEntity OptSzResolvedEntity `json:"resolvedEntity"`
}

// GetResolvedEntity returns the value of ResolvedEntity.
func (s *SzVirtualEntityData) GetResolvedEntity() OptSzResolvedEntity {
	return s.ResolvedEntity
}

// SetResolvedEntity sets the value of ResolvedEntity.
func (s *SzVirtualEntityData) SetResolvedEntity(val OptSzResolvedEntity) {
	s.ResolvedEntity = val
}

// Describes a record that belongs to a virtual entity.  This identifies the record as well as its
// internal ID to understand which records in the virtual entity are considered to be duplicates of
// each other.
// Ref: #/components/schemas/SzVirtualEntityRecord
type SzVirtualEntityRecord struct {
	// The data source code that uniquely identifies the data source associated with the record.
	DataSource OptString `json:"dataSource"`
	// The record ID that uniquely identifies a record within the respective data source.
	RecordId OptString `json:"recordId"`
	// The unique internal ID for the record.  Those records having the same value for this field are
	// effectively identical for the purpose of entity resolution and automatically bound together.
	InternalId OptString `json:"internalId"`
}

// GetDataSource returns the value of DataSource.
func (s *SzVirtualEntityRecord) GetDataSource() OptString {
	return s.DataSource
}

// GetRecordId returns the value of RecordId.
func (s *SzVirtualEntityRecord) GetRecordId() OptString {
	return s.RecordId
}

// GetInternalId returns the value of InternalId.
func (s *SzVirtualEntityRecord) GetInternalId() OptString {
	return s.InternalId
}

// SetDataSource sets the value of DataSource.
func (s *SzVirtualEntityRecord) SetDataSource(val OptString) {
	s.DataSource = val
}

// SetRecordId sets the value of RecordId.
func (s *SzVirtualEntityRecord) SetRecordId(val OptString) {
	s.RecordId = val
}

// SetInternalId sets the value of InternalId.
func (s *SzVirtualEntityRecord) SetInternalId(val OptString) {
	s.InternalId = val
}

// Merged schema.
// Ref: #/components/schemas/SzVirtualEntityResponse
type SzVirtualEntityResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzVirtualEntityResponseRawData `json:"rawData"`
	Data    OptSzVirtualEntityData               `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzVirtualEntityResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzVirtualEntityResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzVirtualEntityResponse) GetRawData() OptNilSzVirtualEntityResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzVirtualEntityResponse) GetData() OptSzVirtualEntityData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzVirtualEntityResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzVirtualEntityResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzVirtualEntityResponse) SetRawData(val OptNilSzVirtualEntityResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzVirtualEntityResponse) SetData(val OptSzVirtualEntityData) {
	s.Data = val
}

func (*SzVirtualEntityResponse) getVirtualEntityByRecordIdsRes() {}

// The RAW result from the underlying native API function.
type SzVirtualEntityResponseRawData map[string]jx.Raw

func (s *SzVirtualEntityResponseRawData) init() SzVirtualEntityResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SzWhyEntitiesResponse
type SzWhyEntitiesResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzWhyEntitiesResponseRawData `json:"rawData"`
	Data    OptSzWhyEntitiesResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzWhyEntitiesResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzWhyEntitiesResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzWhyEntitiesResponse) GetRawData() OptNilSzWhyEntitiesResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzWhyEntitiesResponse) GetData() OptSzWhyEntitiesResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzWhyEntitiesResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzWhyEntitiesResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzWhyEntitiesResponse) SetRawData(val OptNilSzWhyEntitiesResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzWhyEntitiesResponse) SetData(val OptSzWhyEntitiesResponseData) {
	s.Data = val
}

func (*SzWhyEntitiesResponse) whyEntitiesRes() {}

type SzWhyEntitiesResponseData struct {
	// The `SzWhyEntitiesResult` describing why the two entities did not resolve or why they related.
	WhyResult OptSzWhyEntitiesResult `json:"whyResult"`
	// The array of `SzEntityData` objects describing the entities involved in the response.  This will
	// include partial information on the first-degree related entities to the entity.
	Entities []SzEntityData `json:"entities"`
}

// GetWhyResult returns the value of WhyResult.
func (s *SzWhyEntitiesResponseData) GetWhyResult() OptSzWhyEntitiesResult {
	return s.WhyResult
}

// GetEntities returns the value of Entities.
func (s *SzWhyEntitiesResponseData) GetEntities() []SzEntityData {
	return s.Entities
}

// SetWhyResult sets the value of WhyResult.
func (s *SzWhyEntitiesResponseData) SetWhyResult(val OptSzWhyEntitiesResult) {
	s.WhyResult = val
}

// SetEntities sets the value of Entities.
func (s *SzWhyEntitiesResponseData) SetEntities(val []SzEntityData) {
	s.Entities = val
}

// The RAW result from the underlying native API function.
type SzWhyEntitiesResponseRawData map[string]jx.Raw

func (s *SzWhyEntitiesResponseRawData) init() SzWhyEntitiesResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes why two entities did not resolve or why they related.
// Ref: #/components/schemas/SzWhyEntitiesResult
type SzWhyEntitiesResult struct {
	// The entity ID of the first entity.
	EntityId1 OptInt64 `json:"entityId1"`
	// The entity ID of the second entity.
	EntityId2 OptInt64 `json:"entityId2"`
	// The `SzWhyMatchInfo` providing the details of the result.
	MatchInfo OptSzWhyMatchInfo `json:"matchInfo"`
}

// GetEntityId1 returns the value of EntityId1.
func (s *SzWhyEntitiesResult) GetEntityId1() OptInt64 {
	return s.EntityId1
}

// GetEntityId2 returns the value of EntityId2.
func (s *SzWhyEntitiesResult) GetEntityId2() OptInt64 {
	return s.EntityId2
}

// GetMatchInfo returns the value of MatchInfo.
func (s *SzWhyEntitiesResult) GetMatchInfo() OptSzWhyMatchInfo {
	return s.MatchInfo
}

// SetEntityId1 sets the value of EntityId1.
func (s *SzWhyEntitiesResult) SetEntityId1(val OptInt64) {
	s.EntityId1 = val
}

// SetEntityId2 sets the value of EntityId2.
func (s *SzWhyEntitiesResult) SetEntityId2(val OptInt64) {
	s.EntityId2 = val
}

// SetMatchInfo sets the value of MatchInfo.
func (s *SzWhyEntitiesResult) SetMatchInfo(val OptSzWhyMatchInfo) {
	s.MatchInfo = val
}

// Merged schema.
// Ref: #/components/schemas/SzWhyEntityResponse
type SzWhyEntityResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzWhyEntityResponseRawData `json:"rawData"`
	Data    OptSzWhyEntityResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzWhyEntityResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzWhyEntityResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzWhyEntityResponse) GetRawData() OptNilSzWhyEntityResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzWhyEntityResponse) GetData() OptSzWhyEntityResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzWhyEntityResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzWhyEntityResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzWhyEntityResponse) SetRawData(val OptNilSzWhyEntityResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzWhyEntityResponse) SetData(val OptSzWhyEntityResponseData) {
	s.Data = val
}

func (*SzWhyEntityResponse) whyEntityByEntityIDRes() {}
func (*SzWhyEntityResponse) whyEntityByRecordIDRes() {}

type SzWhyEntityResponseData struct {
	// The array of `SzWhyEntityResult` instances describing why from each evaluated perspective within
	// the entity.
	WhyResults []SzWhyEntityResult `json:"whyResults"`
	// The array of `SzEntityData` objects describing the entities involved in the response.  This will
	// include partial information on the first-degree related entities to the entity.
	Entities []SzEntityData `json:"entities"`
}

// GetWhyResults returns the value of WhyResults.
func (s *SzWhyEntityResponseData) GetWhyResults() []SzWhyEntityResult {
	return s.WhyResults
}

// GetEntities returns the value of Entities.
func (s *SzWhyEntityResponseData) GetEntities() []SzEntityData {
	return s.Entities
}

// SetWhyResults sets the value of WhyResults.
func (s *SzWhyEntityResponseData) SetWhyResults(val []SzWhyEntityResult) {
	s.WhyResults = val
}

// SetEntities sets the value of Entities.
func (s *SzWhyEntityResponseData) SetEntities(val []SzEntityData) {
	s.Entities = val
}

// The RAW result from the underlying native API function.
type SzWhyEntityResponseRawData map[string]jx.Raw

func (s *SzWhyEntityResponseRawData) init() SzWhyEntityResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes why an entity resolved.
// Ref: #/components/schemas/SzWhyEntityResult
type SzWhyEntityResult struct {
	// The `SzWhyPerspective` identifying and describing the perspective for this why result.
	Perspective SzWhyPerspective `json:"perspective"`
	// The `SzWhyMatchInfo` providing the details of the result.
	MatchInfo OptSzWhyMatchInfo `json:"matchInfo"`
}

// GetPerspective returns the value of Perspective.
func (s *SzWhyEntityResult) GetPerspective() SzWhyPerspective {
	return s.Perspective
}

// GetMatchInfo returns the value of MatchInfo.
func (s *SzWhyEntityResult) GetMatchInfo() OptSzWhyMatchInfo {
	return s.MatchInfo
}

// SetPerspective sets the value of Perspective.
func (s *SzWhyEntityResult) SetPerspective(val SzWhyPerspective) {
	s.Perspective = val
}

// SetMatchInfo sets the value of MatchInfo.
func (s *SzWhyEntityResult) SetMatchInfo(val OptSzWhyMatchInfo) {
	s.MatchInfo = val
}

// The match info describing why two entities (or records) resolve or relate to one another.
// Ref: #/components/schemas/SzWhyMatchInfo
type SzWhyMatchInfo struct {
	// The why key indicating the components of the match (similar to the match key).
	WhyKey OptString `json:"whyKey"`
	// The match level describing how the records relate to each other.
	MatchLevel OptSzMatchLevel `json:"matchLevel"`
	// The resolution rule that triggered the match.
	ResolutionRule OptNilString `json:"resolutionRule"`
	// The map of feature types to arrays of `SzCandidateKey` instances for that feature type.
	CandidateKeys OptNilSzWhyMatchInfoCandidateKeys `json:"candidateKeys"`
	// The map of feature types to arrays of `SzFeatureScore` instances for that feature type.
	FeatureScores OptNilSzWhyMatchInfoFeatureScores `json:"featureScores"`
	// The list of `SzDisclosedRelation` instances describing any disclosed relationships between two
	// entities.  If the match info pertains to a single entity or if there are no disclosed relations
	// between the two entities then this property is absent.
	DisclosedRelations OptNilSzDisclosedRelationArray `json:"disclosedRelations"`
}

// GetWhyKey returns the value of WhyKey.
func (s *SzWhyMatchInfo) GetWhyKey() OptString {
	return s.WhyKey
}

// GetMatchLevel returns the value of MatchLevel.
func (s *SzWhyMatchInfo) GetMatchLevel() OptSzMatchLevel {
	return s.MatchLevel
}

// GetResolutionRule returns the value of ResolutionRule.
func (s *SzWhyMatchInfo) GetResolutionRule() OptNilString {
	return s.ResolutionRule
}

// GetCandidateKeys returns the value of CandidateKeys.
func (s *SzWhyMatchInfo) GetCandidateKeys() OptNilSzWhyMatchInfoCandidateKeys {
	return s.CandidateKeys
}

// GetFeatureScores returns the value of FeatureScores.
func (s *SzWhyMatchInfo) GetFeatureScores() OptNilSzWhyMatchInfoFeatureScores {
	return s.FeatureScores
}

// GetDisclosedRelations returns the value of DisclosedRelations.
func (s *SzWhyMatchInfo) GetDisclosedRelations() OptNilSzDisclosedRelationArray {
	return s.DisclosedRelations
}

// SetWhyKey sets the value of WhyKey.
func (s *SzWhyMatchInfo) SetWhyKey(val OptString) {
	s.WhyKey = val
}

// SetMatchLevel sets the value of MatchLevel.
func (s *SzWhyMatchInfo) SetMatchLevel(val OptSzMatchLevel) {
	s.MatchLevel = val
}

// SetResolutionRule sets the value of ResolutionRule.
func (s *SzWhyMatchInfo) SetResolutionRule(val OptNilString) {
	s.ResolutionRule = val
}

// SetCandidateKeys sets the value of CandidateKeys.
func (s *SzWhyMatchInfo) SetCandidateKeys(val OptNilSzWhyMatchInfoCandidateKeys) {
	s.CandidateKeys = val
}

// SetFeatureScores sets the value of FeatureScores.
func (s *SzWhyMatchInfo) SetFeatureScores(val OptNilSzWhyMatchInfoFeatureScores) {
	s.FeatureScores = val
}

// SetDisclosedRelations sets the value of DisclosedRelations.
func (s *SzWhyMatchInfo) SetDisclosedRelations(val OptNilSzDisclosedRelationArray) {
	s.DisclosedRelations = val
}

// The map of feature types to arrays of `SzCandidateKey` instances for that feature type.
type SzWhyMatchInfoCandidateKeys map[string][]SzCandidateKey

func (s *SzWhyMatchInfoCandidateKeys) init() SzWhyMatchInfoCandidateKeys {
	m := *s
	if m == nil {
		m = map[string][]SzCandidateKey{}
		*s = m
	}
	return m
}

// The map of feature types to arrays of `SzFeatureScore` instances for that feature type.
type SzWhyMatchInfoFeatureScores map[string][]SzFeatureScore

func (s *SzWhyMatchInfoFeatureScores) init() SzWhyMatchInfoFeatureScores {
	m := *s
	if m == nil {
		m = map[string][]SzFeatureScore{}
		*s = m
	}
	return m
}

type SzWhyPerspective jx.Raw

// Merged schema.
// Ref: #/components/schemas/SzWhyRecordsResponse
type SzWhyRecordsResponse struct {
	Meta  OptSzMeta  `json:"meta"`
	Links OptSzLinks `json:"links"`
	// The RAW result from the underlying native API function.
	RawData OptNilSzWhyRecordsResponseRawData `json:"rawData"`
	Data    OptSzWhyRecordsResponseData       `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *SzWhyRecordsResponse) GetMeta() OptSzMeta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *SzWhyRecordsResponse) GetLinks() OptSzLinks {
	return s.Links
}

// GetRawData returns the value of RawData.
func (s *SzWhyRecordsResponse) GetRawData() OptNilSzWhyRecordsResponseRawData {
	return s.RawData
}

// GetData returns the value of Data.
func (s *SzWhyRecordsResponse) GetData() OptSzWhyRecordsResponseData {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *SzWhyRecordsResponse) SetMeta(val OptSzMeta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *SzWhyRecordsResponse) SetLinks(val OptSzLinks) {
	s.Links = val
}

// SetRawData sets the value of RawData.
func (s *SzWhyRecordsResponse) SetRawData(val OptNilSzWhyRecordsResponseRawData) {
	s.RawData = val
}

// SetData sets the value of Data.
func (s *SzWhyRecordsResponse) SetData(val OptSzWhyRecordsResponseData) {
	s.Data = val
}

func (*SzWhyRecordsResponse) whyRecordsRes() {}

type SzWhyRecordsResponseData struct {
	// The `SzWhyRecordsResult` describing why from for the specified records.
	WhyResult OptSzWhyRecordsResult `json:"whyResult"`
	// The array of `SzEntityData` objects describing the entities involved in the response.  This will
	// include partial information on the first-degree related entities to the entity.
	Entities []SzEntityData `json:"entities"`
}

// GetWhyResult returns the value of WhyResult.
func (s *SzWhyRecordsResponseData) GetWhyResult() OptSzWhyRecordsResult {
	return s.WhyResult
}

// GetEntities returns the value of Entities.
func (s *SzWhyRecordsResponseData) GetEntities() []SzEntityData {
	return s.Entities
}

// SetWhyResult sets the value of WhyResult.
func (s *SzWhyRecordsResponseData) SetWhyResult(val OptSzWhyRecordsResult) {
	s.WhyResult = val
}

// SetEntities sets the value of Entities.
func (s *SzWhyRecordsResponseData) SetEntities(val []SzEntityData) {
	s.Entities = val
}

// The RAW result from the underlying native API function.
type SzWhyRecordsResponseRawData map[string]jx.Raw

func (s *SzWhyRecordsResponseRawData) init() SzWhyRecordsResponseRawData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Describes why two records might resolve.
// Ref: #/components/schemas/SzWhyRecordsResult
type SzWhyRecordsResult struct {
	// The `SzWhyPerspective` identifying and describing the perspective from the first record.
	Perspective1 SzWhyPerspective `json:"perspective1"`
	// The `SzWhyPerspective` identifying and describing the perspective from the second record.
	Perspective2 SzWhyPerspective `json:"perspective2"`
	// The `SzWhyMatchInfo` providing the details of the result.
	MatchInfo OptSzWhyMatchInfo `json:"matchInfo"`
}

// GetPerspective1 returns the value of Perspective1.
func (s *SzWhyRecordsResult) GetPerspective1() SzWhyPerspective {
	return s.Perspective1
}

// GetPerspective2 returns the value of Perspective2.
func (s *SzWhyRecordsResult) GetPerspective2() SzWhyPerspective {
	return s.Perspective2
}

// GetMatchInfo returns the value of MatchInfo.
func (s *SzWhyRecordsResult) GetMatchInfo() OptSzWhyMatchInfo {
	return s.MatchInfo
}

// SetPerspective1 sets the value of Perspective1.
func (s *SzWhyRecordsResult) SetPerspective1(val SzWhyPerspective) {
	s.Perspective1 = val
}

// SetPerspective2 sets the value of Perspective2.
func (s *SzWhyRecordsResult) SetPerspective2(val SzWhyPerspective) {
	s.Perspective2 = val
}

// SetMatchInfo sets the value of MatchInfo.
func (s *SzWhyRecordsResult) SetMatchInfo(val OptSzWhyMatchInfo) {
	s.MatchInfo = val
}

// The response containing the version information.
// Ref: #/components/schemas/SzVersionResponse
type VersionOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s VersionOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*VersionOKDefault) versionRes() {}

type WhyEntitiesApplicationJSONInternalServerError SzErrorResponse

func (*WhyEntitiesApplicationJSONInternalServerError) whyEntitiesRes() {}

type WhyEntitiesApplicationJSONNotFound SzErrorResponse

func (*WhyEntitiesApplicationJSONNotFound) whyEntitiesRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type WhyEntitiesNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntitiesNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntitiesNotFoundDefault) whyEntitiesRes() {}

// The response describing the result of "why entities" operation.
// Ref: #/components/schemas/SzWhyEntitiesResponse
type WhyEntitiesOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntitiesOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntitiesOKDefault) whyEntitiesRes() {}

type WhyEntityByEntityIDApplicationJSONInternalServerError SzErrorResponse

func (*WhyEntityByEntityIDApplicationJSONInternalServerError) whyEntityByEntityIDRes() {}

type WhyEntityByEntityIDApplicationJSONNotFound SzErrorResponse

func (*WhyEntityByEntityIDApplicationJSONNotFound) whyEntityByEntityIDRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type WhyEntityByEntityIDNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntityByEntityIDNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntityByEntityIDNotFoundDefault) whyEntityByEntityIDRes() {}

// The response describing the result of "why" operation.
// Ref: #/components/schemas/SzWhyEntityResponse
type WhyEntityByEntityIDOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntityByEntityIDOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntityByEntityIDOKDefault) whyEntityByEntityIDRes() {}

type WhyEntityByRecordIDApplicationJSONInternalServerError SzErrorResponse

func (*WhyEntityByRecordIDApplicationJSONInternalServerError) whyEntityByRecordIDRes() {}

type WhyEntityByRecordIDApplicationJSONNotFound SzErrorResponse

func (*WhyEntityByRecordIDApplicationJSONNotFound) whyEntityByRecordIDRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type WhyEntityByRecordIDNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntityByRecordIDNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntityByRecordIDNotFoundDefault) whyEntityByRecordIDRes() {}

// The response describing the result of "why" operation.
// Ref: #/components/schemas/SzWhyEntityResponse
type WhyEntityByRecordIDOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyEntityByRecordIDOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyEntityByRecordIDOKDefault) whyEntityByRecordIDRes() {}

type WhyRecordsApplicationJSONInternalServerError SzErrorResponse

func (*WhyRecordsApplicationJSONInternalServerError) whyRecordsRes() {}

type WhyRecordsApplicationJSONNotFound SzErrorResponse

func (*WhyRecordsApplicationJSONNotFound) whyRecordsRes() {}

// The response describing an error that occurred.
// Ref: #/components/schemas/SzErrorResponse
type WhyRecordsNotFoundDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyRecordsNotFoundDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyRecordsNotFoundDefault) whyRecordsRes() {}

// The response describing the result of "why" operation.
// Ref: #/components/schemas/SzWhyRecordsResponse
type WhyRecordsOKDefault struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WhyRecordsOKDefault) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*WhyRecordsOKDefault) whyRecordsRes() {}
